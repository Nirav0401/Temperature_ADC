
Temperature_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008790  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da8  08008da8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db0  08008db0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000330  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009d18  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bb2  00000000  00000000  00029f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008a8  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000699  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a4d  00000000  00000000  0002ca59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b097  00000000  00000000  000514a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfab6  00000000  00000000  0005c53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003858  00000000  00000000  0013bff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0013f84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008928 	.word	0x08008928

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008928 	.word	0x08008928

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_write>:
static void MX_UART7_Init(void);
static void MX_UART8_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart8, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <_write+0x28>)
 8001028:	f002 fcc5 	bl	80039b6 <HAL_UART_Transmit>
   return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000364 	.word	0x20000364
 800103c:	00000000 	.word	0x00000000

08001040 <HAL_ADC_ConvCpltCallback>:

uint32_t ADC_VAL = 0;
float Temp = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	Temp =  ((VSENSE*ADC_VAL - V25) / Avg_Slope) + 25;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_ADC_ConvCpltCallback+0x98>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa69 	bl	8000524 <__aeabi_ui2d>
 8001052:	a31b      	add	r3, pc, #108	; (adr r3, 80010c0 <HAL_ADC_ConvCpltCallback+0x80>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fade 	bl	8000618 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a318      	add	r3, pc, #96	; (adr r3, 80010c8 <HAL_ADC_ConvCpltCallback+0x88>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff f91d 	bl	80002a8 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	a316      	add	r3, pc, #88	; (adr r3, 80010d0 <HAL_ADC_ConvCpltCallback+0x90>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fbf6 	bl	800086c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_ADC_ConvCpltCallback+0x9c>)
 800108e:	f7ff f90d 	bl	80002ac <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fdb5 	bl	8000c08 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_ADC_ConvCpltCallback+0xa0>)
 80010a2:	6013      	str	r3, [r2, #0]
	printf("Temp value is %0.2f\n", Temp);
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_ADC_ConvCpltCallback+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa5d 	bl	8000568 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_ADC_ConvCpltCallback+0xa4>)
 80010b4:	f003 ff2c 	bl	8004f10 <iprintf>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	66666666 	.word	0x66666666
 80010c4:	3f4a6666 	.word	0x3f4a6666
 80010c8:	851eb852 	.word	0x851eb852
 80010cc:	3fe851eb 	.word	0x3fe851eb
 80010d0:	47ae147b 	.word	0x47ae147b
 80010d4:	3f647ae1 	.word	0x3f647ae1
 80010d8:	200003a8 	.word	0x200003a8
 80010dc:	40390000 	.word	0x40390000
 80010e0:	200003ac 	.word	0x200003ac
 80010e4:	08008940 	.word	0x08008940

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fcc6 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f81e 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 f9a4 	bl	8001440 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f8:	f000 f982 	bl	8001400 <MX_DMA_Init>
  MX_ADC1_Init();
 80010fc:	f000 f884 	bl	8001208 <MX_ADC1_Init>
  MX_UART4_Init();
 8001100:	f000 f8d6 	bl	80012b0 <MX_UART4_Init>
  MX_UART5_Init();
 8001104:	f000 f8fe 	bl	8001304 <MX_UART5_Init>
  MX_UART7_Init();
 8001108:	f000 f926 	bl	8001358 <MX_UART7_Init>
  MX_UART8_Init();
 800110c:	f000 f94e 	bl	80013ac <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, &ADC_VAL, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	4904      	ldr	r1, [pc, #16]	; (8001124 <main+0x3c>)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <main+0x40>)
 8001116:	f000 fd67 	bl	8001be8 <HAL_ADC_Start_DMA>
  printf("Hello\n");
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <main+0x44>)
 800111c:	f003 ff5e 	bl	8004fdc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	e7fe      	b.n	8001120 <main+0x38>
 8001122:	bf00      	nop
 8001124:	200003a8 	.word	0x200003a8
 8001128:	200001f0 	.word	0x200001f0
 800112c:	08008958 	.word	0x08008958

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f004 f84c 	bl	80051dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <SystemClock_Config+0xd0>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <SystemClock_Config+0xd0>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemClock_Config+0xd0>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SystemClock_Config+0xd4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <SystemClock_Config+0xd4>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <SystemClock_Config+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011a8:	2332      	movs	r3, #50	; 0x32
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 ff17 	bl	8002fec <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c4:	f000 f9b4 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f978 	bl	80034dc <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011f2:	f000 f99d 	bl	8001530 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_ADC1_Init+0x98>)
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x9c>)
 800121e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001236:	2201      	movs	r2, #1
 8001238:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_ADC1_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_ADC1_Init+0x98>)
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <MX_ADC1_Init+0xa0>)
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001256:	2201      	movs	r2, #1
 8001258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_ADC1_Init+0x98>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC1_Init+0x98>)
 8001264:	2201      	movs	r2, #1
 8001266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_ADC1_Init+0x98>)
 800126a:	f000 fc79 	bl	8001b60 <HAL_ADC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 f95c 	bl	8001530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_ADC1_Init+0xa4>)
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001280:	2305      	movs	r3, #5
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_ADC1_Init+0x98>)
 800128a:	f000 fdd1 	bl	8001e30 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001294:	f000 f94c 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001f0 	.word	0x200001f0
 80012a4:	40012000 	.word	0x40012000
 80012a8:	0f000001 	.word	0x0f000001
 80012ac:	10000012 	.word	0x10000012

080012b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_UART4_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_UART4_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_UART4_Init+0x4c>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_UART4_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_UART4_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_UART4_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_UART4_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_UART4_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_UART4_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_UART4_Init+0x4c>)
 80012e8:	f002 fb18 	bl	800391c <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 f91d 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000298 	.word	0x20000298
 8001300:	40004c00 	.word	0x40004c00

08001304 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_UART5_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_UART5_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_UART5_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_UART5_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_UART5_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_UART5_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_UART5_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_UART5_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_UART5_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_UART5_Init+0x4c>)
 800133c:	f002 faee 	bl	800391c <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f8f3 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002dc 	.word	0x200002dc
 8001354:	40005000 	.word	0x40005000

08001358 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_UART7_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_UART7_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_UART7_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_UART7_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_UART7_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_UART7_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_UART7_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_UART7_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_UART7_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_UART7_Init+0x4c>)
 8001390:	f002 fac4 	bl	800391c <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 f8c9 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000320 	.word	0x20000320
 80013a8:	40007800 	.word	0x40007800

080013ac <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_UART8_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_UART8_Init+0x4c>)
 80013e4:	f002 fa9a 	bl	800391c <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f89f 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000364 	.word	0x20000364
 80013fc:	40007c00 	.word	0x40007c00

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <MX_DMA_Init+0x3c>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_DMA_Init+0x3c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2038      	movs	r0, #56	; 0x38
 8001428:	f001 f88d 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800142c:	2038      	movs	r0, #56	; 0x38
 800142e:	f001 f8a6 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_GPIO_Init+0xe8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <MX_GPIO_Init+0xe8>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a24      	ldr	r2, [pc, #144]	; (8001528 <MX_GPIO_Init+0xe8>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_GPIO_Init+0xe8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fe:	230c      	movs	r3, #12
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150e:	2307      	movs	r3, #7
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_GPIO_Init+0xec>)
 800151a:	f001 fbbb 	bl	8002c94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_ADC_MspInit+0x98>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d13d      	bne.n	800161a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_ADC_MspInit+0x9c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_ADC_MspInit+0x9c>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_ADC_MspInit+0x9c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_ADC_MspInit+0xa4>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_ADC_MspInit+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_ADC_MspInit+0xa0>)
 8001600:	f000 ffd8 	bl	80025b4 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800160a:	f7ff ff91 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_ADC_MspInit+0xa0>)
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <HAL_ADC_MspInit+0xa0>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000
 8001628:	40023800 	.word	0x40023800
 800162c:	20000238 	.word	0x20000238
 8001630:	40026410 	.word	0x40026410

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a73      	ldr	r2, [pc, #460]	; (8001820 <HAL_UART_MspInit+0x1ec>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001670:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800168e:	2303      	movs	r3, #3
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800169e:	2308      	movs	r3, #8
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a6:	4619      	mov	r1, r3
 80016a8:	485f      	ldr	r0, [pc, #380]	; (8001828 <HAL_UART_MspInit+0x1f4>)
 80016aa:	f001 faf3 	bl	8002c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80016ae:	e0b3      	b.n	8001818 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==UART5)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5d      	ldr	r2, [pc, #372]	; (800182c <HAL_UART_MspInit+0x1f8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d14b      	bne.n	8001752 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001720:	2308      	movs	r3, #8
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4841      	ldr	r0, [pc, #260]	; (8001830 <HAL_UART_MspInit+0x1fc>)
 800172c:	f001 fab2 	bl	8002c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001730:	2304      	movs	r3, #4
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001740:	2308      	movs	r3, #8
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	483a      	ldr	r0, [pc, #232]	; (8001834 <HAL_UART_MspInit+0x200>)
 800174c:	f001 faa2 	bl	8002c94 <HAL_GPIO_Init>
}
 8001750:	e062      	b.n	8001818 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==UART7)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a38      	ldr	r2, [pc, #224]	; (8001838 <HAL_UART_MspInit+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d12c      	bne.n	80017b6 <HAL_UART_MspInit+0x182>
    __HAL_RCC_UART7_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 8001782:	f043 0320 	orr.w	r3, r3, #32
 8001786:	6313      	str	r3, [r2, #48]	; 0x30
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001794:	23c0      	movs	r3, #192	; 0xc0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80017a4:	2308      	movs	r3, #8
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <HAL_UART_MspInit+0x208>)
 80017b0:	f001 fa70 	bl	8002c94 <HAL_GPIO_Init>
}
 80017b4:	e030      	b.n	8001818 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==UART8)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_UART_MspInit+0x20c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d12b      	bne.n	8001818 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_UART8_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_UART_MspInit+0x1f0>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f8:	2303      	movs	r3, #3
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001808:	2308      	movs	r3, #8
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_UART_MspInit+0x210>)
 8001814:	f001 fa3e 	bl	8002c94 <HAL_GPIO_Init>
}
 8001818:	bf00      	nop
 800181a:	3740      	adds	r7, #64	; 0x40
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004c00 	.word	0x40004c00
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	40005000 	.word	0x40005000
 8001830:	40020800 	.word	0x40020800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40007800 	.word	0x40007800
 800183c:	40021400 	.word	0x40021400
 8001840:	40007c00 	.word	0x40007c00
 8001844:	40021000 	.word	0x40021000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 f944 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA2_Stream0_IRQHandler+0x10>)
 80018a2:	f000 ff8d 	bl	80027c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000238 	.word	0x20000238

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ca:	f003 fcd9 	bl	8005280 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
  }

  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:
  }
  return len;
}

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f003 fc5a 	bl	8005280 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20030000 	.word	0x20030000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200003b0 	.word	0x200003b0
 8001a00:	20000508 	.word	0x20000508

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2e:	490e      	ldr	r1, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a44:	4c0b      	ldr	r4, [pc, #44]	; (8001a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd7 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f003 fc19 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff fb45 	bl	80010e8 <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a6c:	08008db8 	.word	0x08008db8
  ldr r2, =_sbss
 8001a70:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a74:	20000504 	.word	0x20000504

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_Init+0x40>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_Init+0x40>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x40>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 fd43 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fd44 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fd5b 	bl	800259a <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 fd23 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008
 8001b44:	200003b4 	.word	0x200003b4

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200003b4 	.word	0x200003b4

08001b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e033      	b.n	8001bde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fd04 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba6:	f023 0302 	bic.w	r3, r3, #2
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fa6e 	bl	8002094 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bce:	e001      	b.n	8001bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start_DMA+0x1e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0e9      	b.n	8001dda <HAL_ADC_Start_DMA+0x1f2>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d018      	beq.n	8001c4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2c:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <HAL_ADC_Start_DMA+0x1fc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_ADC_Start_DMA+0x200>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c5c:	d107      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 80a1 	bne.w	8001dc0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbc:	d106      	bne.n	8001ccc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f023 0206 	bic.w	r2, r3, #6
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001cca:	e002      	b.n	8001cd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_ADC_Start_DMA+0x204>)
 8001cdc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_ADC_Start_DMA+0x208>)
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_ADC_Start_DMA+0x20c>)
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	4a41      	ldr	r2, [pc, #260]	; (8001df8 <HAL_ADC_Start_DMA+0x210>)
 8001cf4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	334c      	adds	r3, #76	; 0x4c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f000 fcee 	bl	8002710 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d12a      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <HAL_ADC_Start_DMA+0x214>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d015      	beq.n	8001d76 <HAL_ADC_Start_DMA+0x18e>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_ADC_Start_DMA+0x218>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_Start_DMA+0x178>
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_ADC_Start_DMA+0x204>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_ADC_Start_DMA+0x21c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d136      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_ADC_Start_DMA+0x204>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d130      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d129      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	e020      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_ADC_Start_DMA+0x214>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d114      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0800228d 	.word	0x0800228d
 8001df4:	08002347 	.word	0x08002347
 8001df8:	08002363 	.word	0x08002363
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	40012100 	.word	0x40012100
 8001e04:	40012200 	.word	0x40012200

08001e08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1c>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e113      	b.n	8002074 <HAL_ADC_ConfigChannel+0x244>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d925      	bls.n	8001ea8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b1e      	subs	r3, #30
 8001e72:	2207      	movs	r2, #7
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	4603      	mov	r3, r0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4403      	add	r3, r0
 8001e9a:	3b1e      	subs	r3, #30
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e022      	b.n	8001eee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4403      	add	r3, r0
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d824      	bhi.n	8001f40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b05      	subs	r3, #5
 8001f08:	221f      	movs	r2, #31
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b05      	subs	r3, #5
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3e:	e04c      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d824      	bhi.n	8001f92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b23      	subs	r3, #35	; 0x23
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b23      	subs	r3, #35	; 0x23
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f90:	e023      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b41      	subs	r3, #65	; 0x41
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b41      	subs	r3, #65	; 0x41
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_ADC_ConfigChannel+0x250>)
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_ADC_ConfigChannel+0x254>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10f      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_ADC_ConfigChannel+0x254>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_ADC_ConfigChannel+0x23a>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_ADC_ConfigChannel+0x258>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x1f4>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b11      	cmp	r3, #17
 8002022:	d122      	bne.n	800206a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x258>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x25c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_ADC_ConfigChannel+0x260>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	0c9a      	lsrs	r2, r3, #18
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800205c:	e002      	b.n	8002064 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f9      	bne.n	800205e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40012300 	.word	0x40012300
 8002084:	40012000 	.word	0x40012000
 8002088:	10000012 	.word	0x10000012
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83

08002094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209c:	4b79      	ldr	r3, [pc, #484]	; (8002284 <ADC_Init+0x1f0>)
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	021a      	lsls	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	4a58      	ldr	r2, [pc, #352]	; (8002288 <ADC_Init+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e00f      	b.n	8002192 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0202 	bic.w	r2, r2, #2
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	035a      	lsls	r2, r3, #13
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	051a      	lsls	r2, r3, #20
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224a:	025a      	lsls	r2, r3, #9
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40012300 	.word	0x40012300
 8002288:	0f000001 	.word	0x0f000001

0800228c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d13c      	bne.n	8002320 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12b      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d127      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d119      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0220 	bic.w	r2, r2, #32
 80022f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7fe fe91 	bl	8001040 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800231e:	e00e      	b.n	800233e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd75 	bl	8001e1c <HAL_ADC_ErrorCallback>
}
 8002332:	e004      	b.n	800233e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fd57 	bl	8001e08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fd4a 	bl	8001e1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff29 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff3e 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff31 	bl	80023f4 <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fac2 	bl	8001b48 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e099      	b.n	8002704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f0:	e00f      	b.n	8002612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f2:	f7ff faa9 	bl	8001b48 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d908      	bls.n	8002612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e078      	b.n	8002704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e8      	bne.n	80025f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_DMA_Init+0x158>)
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4313      	orrs	r3, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0307 	bic.w	r3, r3, #7
 8002692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d117      	bne.n	80026d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fa6f 	bl	8002b9c <DMA_CheckFifoParam>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026d2:	2301      	movs	r3, #1
 80026d4:	e016      	b.n	8002704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa26 	bl	8002b30 <DMA_CalcBaseAndBitshift>
 80026e4:	4603      	mov	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f010803f 	.word	0xf010803f

08002710 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_DMA_Start_IT+0x26>
 8002732:	2302      	movs	r3, #2
 8002734:	e040      	b.n	80027b8 <HAL_DMA_Start_IT+0xa8>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d12f      	bne.n	80027aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2202      	movs	r2, #2
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f9b8 	bl	8002ad4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	223f      	movs	r2, #63	; 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0216 	orr.w	r2, r2, #22
 800277e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0208 	orr.w	r2, r2, #8
 8002796:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e005      	b.n	80027b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027cc:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <HAL_DMA_IRQHandler+0x248>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a8e      	ldr	r2, [pc, #568]	; (8002a0c <HAL_DMA_IRQHandler+0x24c>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2208      	movs	r2, #8
 80027ec:	409a      	lsls	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01a      	beq.n	800282c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2208      	movs	r2, #8
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2201      	movs	r2, #1
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	2201      	movs	r2, #1
 8002850:	409a      	lsls	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2204      	movs	r2, #4
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2204      	movs	r2, #4
 8002886:	409a      	lsls	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2210      	movs	r2, #16
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03c      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2210      	movs	r2, #16
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d018      	beq.n	8002902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d024      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
 80028ee:	e01f      	b.n	8002930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
 8002900:	e016      	b.n	8002930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0208 	bic.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2220      	movs	r2, #32
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 808f 	beq.w	8002a60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8087 	beq.w	8002a60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2220      	movs	r2, #32
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b05      	cmp	r3, #5
 8002968:	d136      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_IRQHandler+0x1da>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	223f      	movs	r2, #63	; 0x3f
 80029b0:	409a      	lsls	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
        }
        return;
 80029d6:	e079      	b.n	8002acc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d031      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e02c      	b.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
 8002a06:	bf00      	nop
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e01e      	b.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0210 	bic.w	r2, r2, #16
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d032      	beq.n	8002ace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2205      	movs	r2, #5
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d307      	bcc.n	8002aa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f2      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x2cc>
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e000      	b.n	8002ace <HAL_DMA_IRQHandler+0x30e>
        return;
 8002acc:	bf00      	nop
    }
  }
}
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d108      	bne.n	8002b14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b12:	e007      	b.n	8002b24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3b10      	subs	r3, #16
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <DMA_CalcBaseAndBitshift+0x64>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <DMA_CalcBaseAndBitshift+0x68>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d909      	bls.n	8002b72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b70:	e007      	b.n	8002b82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	aaaaaaab 	.word	0xaaaaaaab
 8002b98:	08008978 	.word	0x08008978

08002b9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11f      	bne.n	8002bf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d856      	bhi.n	8002c6a <DMA_CheckFifoParam+0xce>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <DMA_CheckFifoParam+0x28>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002be7 	.word	0x08002be7
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002c6b 	.word	0x08002c6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d046      	beq.n	8002c6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be4:	e043      	b.n	8002c6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bee:	d140      	bne.n	8002c72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf4:	e03d      	b.n	8002c72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	d121      	bne.n	8002c44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d837      	bhi.n	8002c76 <DMA_CheckFifoParam+0xda>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <DMA_CheckFifoParam+0x70>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c23 	.word	0x08002c23
 8002c14:	08002c1d 	.word	0x08002c1d
 8002c18:	08002c35 	.word	0x08002c35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e030      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d025      	beq.n	8002c7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c32:	e022      	b.n	8002c7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3c:	d11f      	bne.n	8002c7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c42:	e01c      	b.n	8002c7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d903      	bls.n	8002c52 <DMA_CheckFifoParam+0xb6>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d003      	beq.n	8002c58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c50:	e018      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      break;
 8002c56:	e015      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e00b      	b.n	8002c82 <DMA_CheckFifoParam+0xe6>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e00a      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e008      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e006      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e004      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
    }
  } 
  
  return status; 
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e177      	b.n	8002fa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 8166 	bne.w	8002f9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d005      	beq.n	8002ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d130      	bne.n	8002d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80c0 	beq.w	8002f9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a65      	ldr	r2, [pc, #404]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_GPIO_Init+0x324>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e36:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <HAL_GPIO_Init+0x328>)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_GPIO_Init+0x32c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d037      	beq.n	8002ed2 <HAL_GPIO_Init+0x23e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_GPIO_Init+0x330>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_GPIO_Init+0x23a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02b      	beq.n	8002eca <HAL_GPIO_Init+0x236>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a55      	ldr	r2, [pc, #340]	; (8002fcc <HAL_GPIO_Init+0x338>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d025      	beq.n	8002ec6 <HAL_GPIO_Init+0x232>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a54      	ldr	r2, [pc, #336]	; (8002fd0 <HAL_GPIO_Init+0x33c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01f      	beq.n	8002ec2 <HAL_GPIO_Init+0x22e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a53      	ldr	r2, [pc, #332]	; (8002fd4 <HAL_GPIO_Init+0x340>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d019      	beq.n	8002ebe <HAL_GPIO_Init+0x22a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_GPIO_Init+0x344>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0x226>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a51      	ldr	r2, [pc, #324]	; (8002fdc <HAL_GPIO_Init+0x348>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00d      	beq.n	8002eb6 <HAL_GPIO_Init+0x222>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a50      	ldr	r2, [pc, #320]	; (8002fe0 <HAL_GPIO_Init+0x34c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <HAL_GPIO_Init+0x21e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4f      	ldr	r2, [pc, #316]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_GPIO_Init+0x21a>
 8002eaa:	2309      	movs	r3, #9
 8002eac:	e012      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002eae:	230a      	movs	r3, #10
 8002eb0:	e010      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	e00e      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	e00c      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e00a      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x240>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <HAL_GPIO_Init+0x328>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_GPIO_Init+0x354>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f ae84 	bls.w	8002cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021400 	.word	0x40021400
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40021c00 	.word	0x40021c00
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40022400 	.word	0x40022400
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e267      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d075      	beq.n	80030f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d00c      	beq.n	8003030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b85      	ldr	r3, [pc, #532]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	2b08      	cmp	r3, #8
 8003020:	d112      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4b82      	ldr	r3, [pc, #520]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d10b      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05b      	beq.n	80030f4 <HAL_RCC_OscConfig+0x108>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d157      	bne.n	80030f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e242      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x74>
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e01d      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x98>
 800306a:	4b70      	ldr	r3, [pc, #448]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6f      	ldr	r2, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6c      	ldr	r2, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003084:	4b69      	ldr	r3, [pc, #420]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a68      	ldr	r2, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd50 	bl	8001b48 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fd4c 	bl	8001b48 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e207      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b5b      	ldr	r3, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0xc0>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd3c 	bl	8001b48 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe fd38 	bl	8001b48 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1f3      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0xe8>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d063      	beq.n	80031ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003102:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	2b08      	cmp	r3, #8
 8003118:	d11c      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1c7      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4937      	ldr	r1, [pc, #220]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	e03a      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x244>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe fcf1 	bl	8001b48 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316a:	f7fe fced 	bl	8001b48 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1a8      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4925      	ldr	r1, [pc, #148]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x244>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe fcd0 	bl	8001b48 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe fccc 	bl	8001b48 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e187      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d036      	beq.n	8003244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x248>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fcb0 	bl	8001b48 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe fcac 	bl	8001b48 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e167      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x200>
 800320a:	e01b      	b.n	8003244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x248>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fc99 	bl	8001b48 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	e00e      	b.n	8003238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe fc95 	bl	8001b48 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d907      	bls.n	8003238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e150      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ea      	bne.n	800321a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8097 	beq.w	8003380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b81      	ldr	r3, [pc, #516]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b7d      	ldr	r3, [pc, #500]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b7a      	ldr	r3, [pc, #488]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b77      	ldr	r3, [pc, #476]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b74      	ldr	r3, [pc, #464]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a73      	ldr	r2, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe fc55 	bl	8001b48 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fe fc51 	bl	8001b48 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e10c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ea>
 80032c8:	4b64      	ldr	r3, [pc, #400]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a63      	ldr	r2, [pc, #396]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	e01c      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x30c>
 80032de:	4b5f      	ldr	r3, [pc, #380]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ea:	4b5c      	ldr	r3, [pc, #368]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032f8:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b55      	ldr	r3, [pc, #340]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fc16 	bl	8001b48 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fc12 	bl	8001b48 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0cb      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b49      	ldr	r3, [pc, #292]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCC_OscConfig+0x334>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003344:	f7fe fc00 	bl	8001b48 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fbfc 	bl	8001b48 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0b5      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ee      	bne.n	800334c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a1 	beq.w	80034cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338a:	4b34      	ldr	r3, [pc, #208]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d05c      	beq.n	8003450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d141      	bne.n	8003422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fbd0 	bl	8001b48 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fbcc 	bl	8001b48 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e087      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	491b      	ldr	r1, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fba5 	bl	8001b48 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fba1 	bl	8001b48 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e05c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x416>
 8003420:	e054      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fb8e 	bl	8001b48 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fb8a 	bl	8001b48 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e045      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x444>
 800344e:	e03d      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e038      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
 8003464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x4ec>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d028      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d11a      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0cc      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d90c      	bls.n	8003518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b65      	ldr	r3, [pc, #404]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b8      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800353a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	494d      	ldr	r1, [pc, #308]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d044      	beq.n	80035fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d119      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d003      	beq.n	800359a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	2b03      	cmp	r3, #3
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e067      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4934      	ldr	r1, [pc, #208]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7fe fabc 	bl	8001b48 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fab8 	bl	8001b48 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d20c      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e032      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4916      	ldr	r1, [pc, #88]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	490e      	ldr	r1, [pc, #56]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003662:	f000 f821 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003666:	4602      	mov	r2, r0
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	490a      	ldr	r1, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	5ccb      	ldrb	r3, [r1, r3]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fa1c 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023c00 	.word	0x40023c00
 8003698:	40023800 	.word	0x40023800
 800369c:	08008960 	.word	0x08008960
 80036a0:	20000000 	.word	0x20000000
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b094      	sub	sp, #80	; 0x50
 80036ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
 80036b4:	2300      	movs	r3, #0
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	2300      	movs	r3, #0
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c0:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d00d      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x40>
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	f200 80e1 	bhi.w	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036da:	e0db      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036e0:	e0db      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e2:	4b73      	ldr	r3, [pc, #460]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e6:	e0d8      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2200      	movs	r2, #0
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
 8003708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	f04f 0000 	mov.w	r0, #0
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	0159      	lsls	r1, r3, #5
 8003728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372c:	0150      	lsls	r0, r2, #5
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4621      	mov	r1, r4
 8003734:	1a51      	subs	r1, r2, r1
 8003736:	6139      	str	r1, [r7, #16]
 8003738:	4629      	mov	r1, r5
 800373a:	eb63 0301 	sbc.w	r3, r3, r1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800374c:	4659      	mov	r1, fp
 800374e:	018b      	lsls	r3, r1, #6
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003756:	4651      	mov	r1, sl
 8003758:	018a      	lsls	r2, r1, #6
 800375a:	4651      	mov	r1, sl
 800375c:	ebb2 0801 	subs.w	r8, r2, r1
 8003760:	4659      	mov	r1, fp
 8003762:	eb63 0901 	sbc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	462b      	mov	r3, r5
 8003788:	eb49 0303 	adc.w	r3, r9, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800379a:	4629      	mov	r1, r5
 800379c:	024b      	lsls	r3, r1, #9
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a4:	4621      	mov	r1, r4
 80037a6:	024a      	lsls	r2, r1, #9
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b8:	f7fd fa76 	bl	8000ca8 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	e058      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	4611      	mov	r1, r2
 80037d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	0159      	lsls	r1, r3, #5
 80037ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f2:	0150      	lsls	r0, r2, #5
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4641      	mov	r1, r8
 80037fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80037fe:	4649      	mov	r1, r9
 8003800:	eb63 0b01 	sbc.w	fp, r3, r1
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003818:	ebb2 040a 	subs.w	r4, r2, sl
 800381c:	eb63 050b 	sbc.w	r5, r3, fp
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	00eb      	lsls	r3, r5, #3
 800382a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382e:	00e2      	lsls	r2, r4, #3
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	4643      	mov	r3, r8
 8003836:	18e3      	adds	r3, r4, r3
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	464b      	mov	r3, r9
 800383c:	eb45 0303 	adc.w	r3, r5, r3
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800384e:	4629      	mov	r1, r5
 8003850:	028b      	lsls	r3, r1, #10
 8003852:	4621      	mov	r1, r4
 8003854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003858:	4621      	mov	r1, r4
 800385a:	028a      	lsls	r2, r1, #10
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003862:	2200      	movs	r2, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	61fa      	str	r2, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	f7fd fa1c 	bl	8000ca8 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4613      	mov	r3, r2
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800389c:	4618      	mov	r0, r3
 800389e:	3750      	adds	r7, #80	; 0x50
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	007a1200 	.word	0x007a1200

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000000 	.word	0x20000000

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d0:	f7ff fff0 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4903      	ldr	r1, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	08008970 	.word	0x08008970

080038f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f8:	f7ff ffdc 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0b5b      	lsrs	r3, r3, #13
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	08008970 	.word	0x08008970

0800391c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e03f      	b.n	80039ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fe76 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f929 	bl	8003bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b08a      	sub	sp, #40	; 0x28
 80039ba:	af02      	add	r7, sp, #8
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d17c      	bne.n	8003ad0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_UART_Transmit+0x2c>
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e075      	b.n	8003ad2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Transmit+0x3e>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e06e      	b.n	8003ad2 <HAL_UART_Transmit+0x11c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2221      	movs	r2, #33	; 0x21
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a0a:	f7fe f89d 	bl	8001b48 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a24:	d108      	bne.n	8003a38 <HAL_UART_Transmit+0x82>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e003      	b.n	8003a40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a48:	e02a      	b.n	8003aa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f840 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e036      	b.n	8003ad2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	e007      	b.n	8003a92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1cf      	bne.n	8003a4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2140      	movs	r1, #64	; 0x40
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f810 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e006      	b.n	8003ad2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b090      	sub	sp, #64	; 0x40
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	e050      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d04c      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003afa:	f7fe f825 	bl	8001b48 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d241      	bcs.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5e:	623a      	str	r2, [r7, #32]
 8003b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	69f9      	ldr	r1, [r7, #28]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e5      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d09f      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3740      	adds	r7, #64	; 0x40
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b0c0      	sub	sp, #256	; 0x100
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	68d9      	ldr	r1, [r3, #12]
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	ea40 0301 	orr.w	r3, r0, r1
 8003be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c10:	f021 010c 	bic.w	r1, r1, #12
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	6999      	ldr	r1, [r3, #24]
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	ea40 0301 	orr.w	r3, r0, r1
 8003c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8f      	ldr	r3, [pc, #572]	; (8003e84 <UART_SetConfig+0x2cc>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d005      	beq.n	8003c58 <UART_SetConfig+0xa0>
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <UART_SetConfig+0x2d0>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d104      	bne.n	8003c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7ff fe4c 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c60:	e003      	b.n	8003c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7ff fe33 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 8003c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c74:	f040 810c 	bne.w	8003e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c92:	415b      	adcs	r3, r3
 8003c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb43 0901 	adc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cc8:	462b      	mov	r3, r5
 8003cca:	eb49 0303 	adc.w	r3, r9, r3
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	18db      	adds	r3, r3, r3
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
 8003cec:	4613      	mov	r3, r2
 8003cee:	eb42 0303 	adc.w	r3, r2, r3
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cfc:	f7fc ffd4 	bl	8000ca8 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	011c      	lsls	r4, r3, #4
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d30:	4641      	mov	r1, r8
 8003d32:	eb12 0a01 	adds.w	sl, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0b01 	adc.w	fp, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d50:	4692      	mov	sl, r2
 8003d52:	469b      	mov	fp, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	eb1a 0303 	adds.w	r3, sl, r3
 8003d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb4b 0303 	adc.w	r3, fp, r3
 8003d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	18db      	adds	r3, r3, r3
 8003d80:	643b      	str	r3, [r7, #64]	; 0x40
 8003d82:	4613      	mov	r3, r2
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d92:	f7fc ff89 	bl	8000ca8 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2264      	movs	r2, #100	; 0x64
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	1acb      	subs	r3, r1, r3
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003db4:	fba3 2302 	umull	r2, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc0:	441c      	add	r4, r3
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e38:	460b      	mov	r3, r1
 8003e3a:	18db      	adds	r3, r3, r3
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3e:	4613      	mov	r3, r2
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e4e:	f7fc ff2b 	bl	8000ca8 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	3332      	adds	r3, #50	; 0x32
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <UART_SetConfig+0x2d4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 0207 	and.w	r2, r3, #7
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4422      	add	r2, r4
 8003e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e80:	e106      	b.n	8004090 <UART_SetConfig+0x4d8>
 8003e82:	bf00      	nop
 8003e84:	40011000 	.word	0x40011000
 8003e88:	40011400 	.word	0x40011400
 8003e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	6239      	str	r1, [r7, #32]
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	1854      	adds	r4, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0501 	adc.w	r5, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ed8:	464b      	mov	r3, r9
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003efe:	4629      	mov	r1, r5
 8003f00:	008b      	lsls	r3, r1, #2
 8003f02:	4621      	mov	r1, r4
 8003f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f08:	4621      	mov	r1, r4
 8003f0a:	008a      	lsls	r2, r1, #2
 8003f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f10:	f7fc feca 	bl	8000ca8 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b60      	ldr	r3, [pc, #384]	; (800409c <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	61b9      	str	r1, [r7, #24]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	008a      	lsls	r2, r1, #2
 8003faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fae:	f7fc fe7b 	bl	8000ca8 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <UART_SetConfig+0x4e4>)
 8003fba:	fba3 2301 	umull	r2, r3, r3, r1
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	; 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <UART_SetConfig+0x4e4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd8:	441c      	add	r4, r3
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe2:	677a      	str	r2, [r7, #116]	; 0x74
 8003fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	66bb      	str	r3, [r7, #104]	; 0x68
 800402a:	464b      	mov	r3, r9
 800402c:	460a      	mov	r2, r1
 800402e:	eb42 0303 	adc.w	r3, r2, r3
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	663b      	str	r3, [r7, #96]	; 0x60
 800403e:	667a      	str	r2, [r7, #100]	; 0x64
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800404c:	4649      	mov	r1, r9
 800404e:	008b      	lsls	r3, r1, #2
 8004050:	4641      	mov	r1, r8
 8004052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004056:	4641      	mov	r1, r8
 8004058:	008a      	lsls	r2, r1, #2
 800405a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800405e:	f7fc fe23 	bl	8000ca8 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <UART_SetConfig+0x4e4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <UART_SetConfig+0x4e4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4422      	add	r2, r4
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <__cvt>:
 80040a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a4:	ec55 4b10 	vmov	r4, r5, d0
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	460e      	mov	r6, r1
 80040ac:	4619      	mov	r1, r3
 80040ae:	462b      	mov	r3, r5
 80040b0:	bfbb      	ittet	lt
 80040b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040b6:	461d      	movlt	r5, r3
 80040b8:	2300      	movge	r3, #0
 80040ba:	232d      	movlt	r3, #45	; 0x2d
 80040bc:	700b      	strb	r3, [r1, #0]
 80040be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040c4:	4691      	mov	r9, r2
 80040c6:	f023 0820 	bic.w	r8, r3, #32
 80040ca:	bfbc      	itt	lt
 80040cc:	4622      	movlt	r2, r4
 80040ce:	4614      	movlt	r4, r2
 80040d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d4:	d005      	beq.n	80040e2 <__cvt+0x42>
 80040d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040da:	d100      	bne.n	80040de <__cvt+0x3e>
 80040dc:	3601      	adds	r6, #1
 80040de:	2102      	movs	r1, #2
 80040e0:	e000      	b.n	80040e4 <__cvt+0x44>
 80040e2:	2103      	movs	r1, #3
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	ab02      	add	r3, sp, #8
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	ec45 4b10 	vmov	d0, r4, r5
 80040f0:	4653      	mov	r3, sl
 80040f2:	4632      	mov	r2, r6
 80040f4:	f001 f980 	bl	80053f8 <_dtoa_r>
 80040f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040fc:	4607      	mov	r7, r0
 80040fe:	d102      	bne.n	8004106 <__cvt+0x66>
 8004100:	f019 0f01 	tst.w	r9, #1
 8004104:	d022      	beq.n	800414c <__cvt+0xac>
 8004106:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800410a:	eb07 0906 	add.w	r9, r7, r6
 800410e:	d110      	bne.n	8004132 <__cvt+0x92>
 8004110:	783b      	ldrb	r3, [r7, #0]
 8004112:	2b30      	cmp	r3, #48	; 0x30
 8004114:	d10a      	bne.n	800412c <__cvt+0x8c>
 8004116:	2200      	movs	r2, #0
 8004118:	2300      	movs	r3, #0
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	f7fc fce3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004122:	b918      	cbnz	r0, 800412c <__cvt+0x8c>
 8004124:	f1c6 0601 	rsb	r6, r6, #1
 8004128:	f8ca 6000 	str.w	r6, [sl]
 800412c:	f8da 3000 	ldr.w	r3, [sl]
 8004130:	4499      	add	r9, r3
 8004132:	2200      	movs	r2, #0
 8004134:	2300      	movs	r3, #0
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	f7fc fcd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800413e:	b108      	cbz	r0, 8004144 <__cvt+0xa4>
 8004140:	f8cd 900c 	str.w	r9, [sp, #12]
 8004144:	2230      	movs	r2, #48	; 0x30
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	454b      	cmp	r3, r9
 800414a:	d307      	bcc.n	800415c <__cvt+0xbc>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004150:	1bdb      	subs	r3, r3, r7
 8004152:	4638      	mov	r0, r7
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	b004      	add	sp, #16
 8004158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415c:	1c59      	adds	r1, r3, #1
 800415e:	9103      	str	r1, [sp, #12]
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e7f0      	b.n	8004146 <__cvt+0xa6>

08004164 <__exponent>:
 8004164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004166:	4603      	mov	r3, r0
 8004168:	2900      	cmp	r1, #0
 800416a:	bfb8      	it	lt
 800416c:	4249      	neglt	r1, r1
 800416e:	f803 2b02 	strb.w	r2, [r3], #2
 8004172:	bfb4      	ite	lt
 8004174:	222d      	movlt	r2, #45	; 0x2d
 8004176:	222b      	movge	r2, #43	; 0x2b
 8004178:	2909      	cmp	r1, #9
 800417a:	7042      	strb	r2, [r0, #1]
 800417c:	dd2a      	ble.n	80041d4 <__exponent+0x70>
 800417e:	f10d 0207 	add.w	r2, sp, #7
 8004182:	4617      	mov	r7, r2
 8004184:	260a      	movs	r6, #10
 8004186:	4694      	mov	ip, r2
 8004188:	fb91 f5f6 	sdiv	r5, r1, r6
 800418c:	fb06 1415 	mls	r4, r6, r5, r1
 8004190:	3430      	adds	r4, #48	; 0x30
 8004192:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004196:	460c      	mov	r4, r1
 8004198:	2c63      	cmp	r4, #99	; 0x63
 800419a:	f102 32ff 	add.w	r2, r2, #4294967295
 800419e:	4629      	mov	r1, r5
 80041a0:	dcf1      	bgt.n	8004186 <__exponent+0x22>
 80041a2:	3130      	adds	r1, #48	; 0x30
 80041a4:	f1ac 0402 	sub.w	r4, ip, #2
 80041a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80041ac:	1c41      	adds	r1, r0, #1
 80041ae:	4622      	mov	r2, r4
 80041b0:	42ba      	cmp	r2, r7
 80041b2:	d30a      	bcc.n	80041ca <__exponent+0x66>
 80041b4:	f10d 0209 	add.w	r2, sp, #9
 80041b8:	eba2 020c 	sub.w	r2, r2, ip
 80041bc:	42bc      	cmp	r4, r7
 80041be:	bf88      	it	hi
 80041c0:	2200      	movhi	r2, #0
 80041c2:	4413      	add	r3, r2
 80041c4:	1a18      	subs	r0, r3, r0
 80041c6:	b003      	add	sp, #12
 80041c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80041ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80041d2:	e7ed      	b.n	80041b0 <__exponent+0x4c>
 80041d4:	2330      	movs	r3, #48	; 0x30
 80041d6:	3130      	adds	r1, #48	; 0x30
 80041d8:	7083      	strb	r3, [r0, #2]
 80041da:	70c1      	strb	r1, [r0, #3]
 80041dc:	1d03      	adds	r3, r0, #4
 80041de:	e7f1      	b.n	80041c4 <__exponent+0x60>

080041e0 <_printf_float>:
 80041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e4:	ed2d 8b02 	vpush	{d8}
 80041e8:	b08d      	sub	sp, #52	; 0x34
 80041ea:	460c      	mov	r4, r1
 80041ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041f0:	4616      	mov	r6, r2
 80041f2:	461f      	mov	r7, r3
 80041f4:	4605      	mov	r5, r0
 80041f6:	f000 fff9 	bl	80051ec <_localeconv_r>
 80041fa:	f8d0 a000 	ldr.w	sl, [r0]
 80041fe:	4650      	mov	r0, sl
 8004200:	f7fc f846 	bl	8000290 <strlen>
 8004204:	2300      	movs	r3, #0
 8004206:	930a      	str	r3, [sp, #40]	; 0x28
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	9305      	str	r3, [sp, #20]
 800420c:	f8d8 3000 	ldr.w	r3, [r8]
 8004210:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004214:	3307      	adds	r3, #7
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	f103 0208 	add.w	r2, r3, #8
 800421e:	f8c8 2000 	str.w	r2, [r8]
 8004222:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800422a:	9307      	str	r3, [sp, #28]
 800422c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004230:	ee08 0a10 	vmov	s16, r0
 8004234:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423c:	4b9e      	ldr	r3, [pc, #632]	; (80044b8 <_printf_float+0x2d8>)
 800423e:	f04f 32ff 	mov.w	r2, #4294967295
 8004242:	f7fc fc83 	bl	8000b4c <__aeabi_dcmpun>
 8004246:	bb88      	cbnz	r0, 80042ac <_printf_float+0xcc>
 8004248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800424c:	4b9a      	ldr	r3, [pc, #616]	; (80044b8 <_printf_float+0x2d8>)
 800424e:	f04f 32ff 	mov.w	r2, #4294967295
 8004252:	f7fc fc5d 	bl	8000b10 <__aeabi_dcmple>
 8004256:	bb48      	cbnz	r0, 80042ac <_printf_float+0xcc>
 8004258:	2200      	movs	r2, #0
 800425a:	2300      	movs	r3, #0
 800425c:	4640      	mov	r0, r8
 800425e:	4649      	mov	r1, r9
 8004260:	f7fc fc4c 	bl	8000afc <__aeabi_dcmplt>
 8004264:	b110      	cbz	r0, 800426c <_printf_float+0x8c>
 8004266:	232d      	movs	r3, #45	; 0x2d
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426c:	4a93      	ldr	r2, [pc, #588]	; (80044bc <_printf_float+0x2dc>)
 800426e:	4b94      	ldr	r3, [pc, #592]	; (80044c0 <_printf_float+0x2e0>)
 8004270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004274:	bf94      	ite	ls
 8004276:	4690      	movls	r8, r2
 8004278:	4698      	movhi	r8, r3
 800427a:	2303      	movs	r3, #3
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	9b05      	ldr	r3, [sp, #20]
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	f04f 0900 	mov.w	r9, #0
 800428a:	9700      	str	r7, [sp, #0]
 800428c:	4633      	mov	r3, r6
 800428e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004290:	4621      	mov	r1, r4
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f9da 	bl	800464c <_printf_common>
 8004298:	3001      	adds	r0, #1
 800429a:	f040 8090 	bne.w	80043be <_printf_float+0x1de>
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	b00d      	add	sp, #52	; 0x34
 80042a4:	ecbd 8b02 	vpop	{d8}
 80042a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	4649      	mov	r1, r9
 80042b4:	f7fc fc4a 	bl	8000b4c <__aeabi_dcmpun>
 80042b8:	b140      	cbz	r0, 80042cc <_printf_float+0xec>
 80042ba:	464b      	mov	r3, r9
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfbc      	itt	lt
 80042c0:	232d      	movlt	r3, #45	; 0x2d
 80042c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042c6:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <_printf_float+0x2e4>)
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <_printf_float+0x2e8>)
 80042ca:	e7d1      	b.n	8004270 <_printf_float+0x90>
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042d2:	9206      	str	r2, [sp, #24]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	d13f      	bne.n	8004358 <_printf_float+0x178>
 80042d8:	2306      	movs	r3, #6
 80042da:	6063      	str	r3, [r4, #4]
 80042dc:	9b05      	ldr	r3, [sp, #20]
 80042de:	6861      	ldr	r1, [r4, #4]
 80042e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042e4:	2300      	movs	r3, #0
 80042e6:	9303      	str	r3, [sp, #12]
 80042e8:	ab0a      	add	r3, sp, #40	; 0x28
 80042ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042ee:	ab09      	add	r3, sp, #36	; 0x24
 80042f0:	ec49 8b10 	vmov	d0, r8, r9
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6022      	str	r2, [r4, #0]
 80042f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff fecf 	bl	80040a0 <__cvt>
 8004302:	9b06      	ldr	r3, [sp, #24]
 8004304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004306:	2b47      	cmp	r3, #71	; 0x47
 8004308:	4680      	mov	r8, r0
 800430a:	d108      	bne.n	800431e <_printf_float+0x13e>
 800430c:	1cc8      	adds	r0, r1, #3
 800430e:	db02      	blt.n	8004316 <_printf_float+0x136>
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	4299      	cmp	r1, r3
 8004314:	dd41      	ble.n	800439a <_printf_float+0x1ba>
 8004316:	f1ab 0302 	sub.w	r3, fp, #2
 800431a:	fa5f fb83 	uxtb.w	fp, r3
 800431e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004322:	d820      	bhi.n	8004366 <_printf_float+0x186>
 8004324:	3901      	subs	r1, #1
 8004326:	465a      	mov	r2, fp
 8004328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800432c:	9109      	str	r1, [sp, #36]	; 0x24
 800432e:	f7ff ff19 	bl	8004164 <__exponent>
 8004332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004334:	1813      	adds	r3, r2, r0
 8004336:	2a01      	cmp	r2, #1
 8004338:	4681      	mov	r9, r0
 800433a:	6123      	str	r3, [r4, #16]
 800433c:	dc02      	bgt.n	8004344 <_printf_float+0x164>
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	07d2      	lsls	r2, r2, #31
 8004342:	d501      	bpl.n	8004348 <_printf_float+0x168>
 8004344:	3301      	adds	r3, #1
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800434c:	2b00      	cmp	r3, #0
 800434e:	d09c      	beq.n	800428a <_printf_float+0xaa>
 8004350:	232d      	movs	r3, #45	; 0x2d
 8004352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004356:	e798      	b.n	800428a <_printf_float+0xaa>
 8004358:	9a06      	ldr	r2, [sp, #24]
 800435a:	2a47      	cmp	r2, #71	; 0x47
 800435c:	d1be      	bne.n	80042dc <_printf_float+0xfc>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1bc      	bne.n	80042dc <_printf_float+0xfc>
 8004362:	2301      	movs	r3, #1
 8004364:	e7b9      	b.n	80042da <_printf_float+0xfa>
 8004366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800436a:	d118      	bne.n	800439e <_printf_float+0x1be>
 800436c:	2900      	cmp	r1, #0
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	dd0b      	ble.n	800438a <_printf_float+0x1aa>
 8004372:	6121      	str	r1, [r4, #16]
 8004374:	b913      	cbnz	r3, 800437c <_printf_float+0x19c>
 8004376:	6822      	ldr	r2, [r4, #0]
 8004378:	07d0      	lsls	r0, r2, #31
 800437a:	d502      	bpl.n	8004382 <_printf_float+0x1a2>
 800437c:	3301      	adds	r3, #1
 800437e:	440b      	add	r3, r1
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	65a1      	str	r1, [r4, #88]	; 0x58
 8004384:	f04f 0900 	mov.w	r9, #0
 8004388:	e7de      	b.n	8004348 <_printf_float+0x168>
 800438a:	b913      	cbnz	r3, 8004392 <_printf_float+0x1b2>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	07d2      	lsls	r2, r2, #31
 8004390:	d501      	bpl.n	8004396 <_printf_float+0x1b6>
 8004392:	3302      	adds	r3, #2
 8004394:	e7f4      	b.n	8004380 <_printf_float+0x1a0>
 8004396:	2301      	movs	r3, #1
 8004398:	e7f2      	b.n	8004380 <_printf_float+0x1a0>
 800439a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800439e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a0:	4299      	cmp	r1, r3
 80043a2:	db05      	blt.n	80043b0 <_printf_float+0x1d0>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	6121      	str	r1, [r4, #16]
 80043a8:	07d8      	lsls	r0, r3, #31
 80043aa:	d5ea      	bpl.n	8004382 <_printf_float+0x1a2>
 80043ac:	1c4b      	adds	r3, r1, #1
 80043ae:	e7e7      	b.n	8004380 <_printf_float+0x1a0>
 80043b0:	2900      	cmp	r1, #0
 80043b2:	bfd4      	ite	le
 80043b4:	f1c1 0202 	rsble	r2, r1, #2
 80043b8:	2201      	movgt	r2, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	e7e0      	b.n	8004380 <_printf_float+0x1a0>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	055a      	lsls	r2, r3, #21
 80043c2:	d407      	bmi.n	80043d4 <_printf_float+0x1f4>
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	4642      	mov	r2, r8
 80043c8:	4631      	mov	r1, r6
 80043ca:	4628      	mov	r0, r5
 80043cc:	47b8      	blx	r7
 80043ce:	3001      	adds	r0, #1
 80043d0:	d12c      	bne.n	800442c <_printf_float+0x24c>
 80043d2:	e764      	b.n	800429e <_printf_float+0xbe>
 80043d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043d8:	f240 80e0 	bls.w	800459c <_printf_float+0x3bc>
 80043dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043e0:	2200      	movs	r2, #0
 80043e2:	2300      	movs	r3, #0
 80043e4:	f7fc fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d034      	beq.n	8004456 <_printf_float+0x276>
 80043ec:	4a37      	ldr	r2, [pc, #220]	; (80044cc <_printf_float+0x2ec>)
 80043ee:	2301      	movs	r3, #1
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f af51 	beq.w	800429e <_printf_float+0xbe>
 80043fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004400:	429a      	cmp	r2, r3
 8004402:	db02      	blt.n	800440a <_printf_float+0x22a>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	07d8      	lsls	r0, r3, #31
 8004408:	d510      	bpl.n	800442c <_printf_float+0x24c>
 800440a:	ee18 3a10 	vmov	r3, s16
 800440e:	4652      	mov	r2, sl
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f af41 	beq.w	800429e <_printf_float+0xbe>
 800441c:	f04f 0800 	mov.w	r8, #0
 8004420:	f104 091a 	add.w	r9, r4, #26
 8004424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	4543      	cmp	r3, r8
 800442a:	dc09      	bgt.n	8004440 <_printf_float+0x260>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	079b      	lsls	r3, r3, #30
 8004430:	f100 8107 	bmi.w	8004642 <_printf_float+0x462>
 8004434:	68e0      	ldr	r0, [r4, #12]
 8004436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004438:	4298      	cmp	r0, r3
 800443a:	bfb8      	it	lt
 800443c:	4618      	movlt	r0, r3
 800443e:	e730      	b.n	80042a2 <_printf_float+0xc2>
 8004440:	2301      	movs	r3, #1
 8004442:	464a      	mov	r2, r9
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	f43f af27 	beq.w	800429e <_printf_float+0xbe>
 8004450:	f108 0801 	add.w	r8, r8, #1
 8004454:	e7e6      	b.n	8004424 <_printf_float+0x244>
 8004456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	dc39      	bgt.n	80044d0 <_printf_float+0x2f0>
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <_printf_float+0x2ec>)
 800445e:	2301      	movs	r3, #1
 8004460:	4631      	mov	r1, r6
 8004462:	4628      	mov	r0, r5
 8004464:	47b8      	blx	r7
 8004466:	3001      	adds	r0, #1
 8004468:	f43f af19 	beq.w	800429e <_printf_float+0xbe>
 800446c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004470:	4313      	orrs	r3, r2
 8004472:	d102      	bne.n	800447a <_printf_float+0x29a>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	07d9      	lsls	r1, r3, #31
 8004478:	d5d8      	bpl.n	800442c <_printf_float+0x24c>
 800447a:	ee18 3a10 	vmov	r3, s16
 800447e:	4652      	mov	r2, sl
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f af09 	beq.w	800429e <_printf_float+0xbe>
 800448c:	f04f 0900 	mov.w	r9, #0
 8004490:	f104 0a1a 	add.w	sl, r4, #26
 8004494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004496:	425b      	negs	r3, r3
 8004498:	454b      	cmp	r3, r9
 800449a:	dc01      	bgt.n	80044a0 <_printf_float+0x2c0>
 800449c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800449e:	e792      	b.n	80043c6 <_printf_float+0x1e6>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4652      	mov	r2, sl
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f aef7 	beq.w	800429e <_printf_float+0xbe>
 80044b0:	f109 0901 	add.w	r9, r9, #1
 80044b4:	e7ee      	b.n	8004494 <_printf_float+0x2b4>
 80044b6:	bf00      	nop
 80044b8:	7fefffff 	.word	0x7fefffff
 80044bc:	08008980 	.word	0x08008980
 80044c0:	08008984 	.word	0x08008984
 80044c4:	08008988 	.word	0x08008988
 80044c8:	0800898c 	.word	0x0800898c
 80044cc:	08008990 	.word	0x08008990
 80044d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044d4:	429a      	cmp	r2, r3
 80044d6:	bfa8      	it	ge
 80044d8:	461a      	movge	r2, r3
 80044da:	2a00      	cmp	r2, #0
 80044dc:	4691      	mov	r9, r2
 80044de:	dc37      	bgt.n	8004550 <_printf_float+0x370>
 80044e0:	f04f 0b00 	mov.w	fp, #0
 80044e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044e8:	f104 021a 	add.w	r2, r4, #26
 80044ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	eba3 0309 	sub.w	r3, r3, r9
 80044f4:	455b      	cmp	r3, fp
 80044f6:	dc33      	bgt.n	8004560 <_printf_float+0x380>
 80044f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044fc:	429a      	cmp	r2, r3
 80044fe:	db3b      	blt.n	8004578 <_printf_float+0x398>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	07da      	lsls	r2, r3, #31
 8004504:	d438      	bmi.n	8004578 <_printf_float+0x398>
 8004506:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800450a:	eba2 0903 	sub.w	r9, r2, r3
 800450e:	9b05      	ldr	r3, [sp, #20]
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	4591      	cmp	r9, r2
 8004514:	bfa8      	it	ge
 8004516:	4691      	movge	r9, r2
 8004518:	f1b9 0f00 	cmp.w	r9, #0
 800451c:	dc35      	bgt.n	800458a <_printf_float+0x3aa>
 800451e:	f04f 0800 	mov.w	r8, #0
 8004522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004526:	f104 0a1a 	add.w	sl, r4, #26
 800452a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	eba3 0309 	sub.w	r3, r3, r9
 8004534:	4543      	cmp	r3, r8
 8004536:	f77f af79 	ble.w	800442c <_printf_float+0x24c>
 800453a:	2301      	movs	r3, #1
 800453c:	4652      	mov	r2, sl
 800453e:	4631      	mov	r1, r6
 8004540:	4628      	mov	r0, r5
 8004542:	47b8      	blx	r7
 8004544:	3001      	adds	r0, #1
 8004546:	f43f aeaa 	beq.w	800429e <_printf_float+0xbe>
 800454a:	f108 0801 	add.w	r8, r8, #1
 800454e:	e7ec      	b.n	800452a <_printf_float+0x34a>
 8004550:	4613      	mov	r3, r2
 8004552:	4631      	mov	r1, r6
 8004554:	4642      	mov	r2, r8
 8004556:	4628      	mov	r0, r5
 8004558:	47b8      	blx	r7
 800455a:	3001      	adds	r0, #1
 800455c:	d1c0      	bne.n	80044e0 <_printf_float+0x300>
 800455e:	e69e      	b.n	800429e <_printf_float+0xbe>
 8004560:	2301      	movs	r3, #1
 8004562:	4631      	mov	r1, r6
 8004564:	4628      	mov	r0, r5
 8004566:	9205      	str	r2, [sp, #20]
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	f43f ae97 	beq.w	800429e <_printf_float+0xbe>
 8004570:	9a05      	ldr	r2, [sp, #20]
 8004572:	f10b 0b01 	add.w	fp, fp, #1
 8004576:	e7b9      	b.n	80044ec <_printf_float+0x30c>
 8004578:	ee18 3a10 	vmov	r3, s16
 800457c:	4652      	mov	r2, sl
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	d1be      	bne.n	8004506 <_printf_float+0x326>
 8004588:	e689      	b.n	800429e <_printf_float+0xbe>
 800458a:	9a05      	ldr	r2, [sp, #20]
 800458c:	464b      	mov	r3, r9
 800458e:	4442      	add	r2, r8
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	47b8      	blx	r7
 8004596:	3001      	adds	r0, #1
 8004598:	d1c1      	bne.n	800451e <_printf_float+0x33e>
 800459a:	e680      	b.n	800429e <_printf_float+0xbe>
 800459c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800459e:	2a01      	cmp	r2, #1
 80045a0:	dc01      	bgt.n	80045a6 <_printf_float+0x3c6>
 80045a2:	07db      	lsls	r3, r3, #31
 80045a4:	d53a      	bpl.n	800461c <_printf_float+0x43c>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4642      	mov	r2, r8
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	f43f ae74 	beq.w	800429e <_printf_float+0xbe>
 80045b6:	ee18 3a10 	vmov	r3, s16
 80045ba:	4652      	mov	r2, sl
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f ae6b 	beq.w	800429e <_printf_float+0xbe>
 80045c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045cc:	2200      	movs	r2, #0
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80045d4:	f7fc fa88 	bl	8000ae8 <__aeabi_dcmpeq>
 80045d8:	b9d8      	cbnz	r0, 8004612 <_printf_float+0x432>
 80045da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80045de:	f108 0201 	add.w	r2, r8, #1
 80045e2:	4631      	mov	r1, r6
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	3001      	adds	r0, #1
 80045ea:	d10e      	bne.n	800460a <_printf_float+0x42a>
 80045ec:	e657      	b.n	800429e <_printf_float+0xbe>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f ae50 	beq.w	800429e <_printf_float+0xbe>
 80045fe:	f108 0801 	add.w	r8, r8, #1
 8004602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	4543      	cmp	r3, r8
 8004608:	dcf1      	bgt.n	80045ee <_printf_float+0x40e>
 800460a:	464b      	mov	r3, r9
 800460c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004610:	e6da      	b.n	80043c8 <_printf_float+0x1e8>
 8004612:	f04f 0800 	mov.w	r8, #0
 8004616:	f104 0a1a 	add.w	sl, r4, #26
 800461a:	e7f2      	b.n	8004602 <_printf_float+0x422>
 800461c:	2301      	movs	r3, #1
 800461e:	4642      	mov	r2, r8
 8004620:	e7df      	b.n	80045e2 <_printf_float+0x402>
 8004622:	2301      	movs	r3, #1
 8004624:	464a      	mov	r2, r9
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f ae36 	beq.w	800429e <_printf_float+0xbe>
 8004632:	f108 0801 	add.w	r8, r8, #1
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800463a:	1a5b      	subs	r3, r3, r1
 800463c:	4543      	cmp	r3, r8
 800463e:	dcf0      	bgt.n	8004622 <_printf_float+0x442>
 8004640:	e6f8      	b.n	8004434 <_printf_float+0x254>
 8004642:	f04f 0800 	mov.w	r8, #0
 8004646:	f104 0919 	add.w	r9, r4, #25
 800464a:	e7f4      	b.n	8004636 <_printf_float+0x456>

0800464c <_printf_common>:
 800464c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	4616      	mov	r6, r2
 8004652:	4699      	mov	r9, r3
 8004654:	688a      	ldr	r2, [r1, #8]
 8004656:	690b      	ldr	r3, [r1, #16]
 8004658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800465c:	4293      	cmp	r3, r2
 800465e:	bfb8      	it	lt
 8004660:	4613      	movlt	r3, r2
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004668:	4607      	mov	r7, r0
 800466a:	460c      	mov	r4, r1
 800466c:	b10a      	cbz	r2, 8004672 <_printf_common+0x26>
 800466e:	3301      	adds	r3, #1
 8004670:	6033      	str	r3, [r6, #0]
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	0699      	lsls	r1, r3, #26
 8004676:	bf42      	ittt	mi
 8004678:	6833      	ldrmi	r3, [r6, #0]
 800467a:	3302      	addmi	r3, #2
 800467c:	6033      	strmi	r3, [r6, #0]
 800467e:	6825      	ldr	r5, [r4, #0]
 8004680:	f015 0506 	ands.w	r5, r5, #6
 8004684:	d106      	bne.n	8004694 <_printf_common+0x48>
 8004686:	f104 0a19 	add.w	sl, r4, #25
 800468a:	68e3      	ldr	r3, [r4, #12]
 800468c:	6832      	ldr	r2, [r6, #0]
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	42ab      	cmp	r3, r5
 8004692:	dc26      	bgt.n	80046e2 <_printf_common+0x96>
 8004694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004698:	1e13      	subs	r3, r2, #0
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	bf18      	it	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	0692      	lsls	r2, r2, #26
 80046a2:	d42b      	bmi.n	80046fc <_printf_common+0xb0>
 80046a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a8:	4649      	mov	r1, r9
 80046aa:	4638      	mov	r0, r7
 80046ac:	47c0      	blx	r8
 80046ae:	3001      	adds	r0, #1
 80046b0:	d01e      	beq.n	80046f0 <_printf_common+0xa4>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	6922      	ldr	r2, [r4, #16]
 80046b6:	f003 0306 	and.w	r3, r3, #6
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	bf02      	ittt	eq
 80046be:	68e5      	ldreq	r5, [r4, #12]
 80046c0:	6833      	ldreq	r3, [r6, #0]
 80046c2:	1aed      	subeq	r5, r5, r3
 80046c4:	68a3      	ldr	r3, [r4, #8]
 80046c6:	bf0c      	ite	eq
 80046c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046cc:	2500      	movne	r5, #0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bfc4      	itt	gt
 80046d2:	1a9b      	subgt	r3, r3, r2
 80046d4:	18ed      	addgt	r5, r5, r3
 80046d6:	2600      	movs	r6, #0
 80046d8:	341a      	adds	r4, #26
 80046da:	42b5      	cmp	r5, r6
 80046dc:	d11a      	bne.n	8004714 <_printf_common+0xc8>
 80046de:	2000      	movs	r0, #0
 80046e0:	e008      	b.n	80046f4 <_printf_common+0xa8>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4652      	mov	r2, sl
 80046e6:	4649      	mov	r1, r9
 80046e8:	4638      	mov	r0, r7
 80046ea:	47c0      	blx	r8
 80046ec:	3001      	adds	r0, #1
 80046ee:	d103      	bne.n	80046f8 <_printf_common+0xac>
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	3501      	adds	r5, #1
 80046fa:	e7c6      	b.n	800468a <_printf_common+0x3e>
 80046fc:	18e1      	adds	r1, r4, r3
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	2030      	movs	r0, #48	; 0x30
 8004702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004706:	4422      	add	r2, r4
 8004708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800470c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004710:	3302      	adds	r3, #2
 8004712:	e7c7      	b.n	80046a4 <_printf_common+0x58>
 8004714:	2301      	movs	r3, #1
 8004716:	4622      	mov	r2, r4
 8004718:	4649      	mov	r1, r9
 800471a:	4638      	mov	r0, r7
 800471c:	47c0      	blx	r8
 800471e:	3001      	adds	r0, #1
 8004720:	d0e6      	beq.n	80046f0 <_printf_common+0xa4>
 8004722:	3601      	adds	r6, #1
 8004724:	e7d9      	b.n	80046da <_printf_common+0x8e>
	...

08004728 <_printf_i>:
 8004728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	7e0f      	ldrb	r7, [r1, #24]
 800472e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004730:	2f78      	cmp	r7, #120	; 0x78
 8004732:	4691      	mov	r9, r2
 8004734:	4680      	mov	r8, r0
 8004736:	460c      	mov	r4, r1
 8004738:	469a      	mov	sl, r3
 800473a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800473e:	d807      	bhi.n	8004750 <_printf_i+0x28>
 8004740:	2f62      	cmp	r7, #98	; 0x62
 8004742:	d80a      	bhi.n	800475a <_printf_i+0x32>
 8004744:	2f00      	cmp	r7, #0
 8004746:	f000 80d4 	beq.w	80048f2 <_printf_i+0x1ca>
 800474a:	2f58      	cmp	r7, #88	; 0x58
 800474c:	f000 80c0 	beq.w	80048d0 <_printf_i+0x1a8>
 8004750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004758:	e03a      	b.n	80047d0 <_printf_i+0xa8>
 800475a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800475e:	2b15      	cmp	r3, #21
 8004760:	d8f6      	bhi.n	8004750 <_printf_i+0x28>
 8004762:	a101      	add	r1, pc, #4	; (adr r1, 8004768 <_printf_i+0x40>)
 8004764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047d5 	.word	0x080047d5
 8004770:	08004751 	.word	0x08004751
 8004774:	08004751 	.word	0x08004751
 8004778:	08004751 	.word	0x08004751
 800477c:	08004751 	.word	0x08004751
 8004780:	080047d5 	.word	0x080047d5
 8004784:	08004751 	.word	0x08004751
 8004788:	08004751 	.word	0x08004751
 800478c:	08004751 	.word	0x08004751
 8004790:	08004751 	.word	0x08004751
 8004794:	080048d9 	.word	0x080048d9
 8004798:	08004801 	.word	0x08004801
 800479c:	08004893 	.word	0x08004893
 80047a0:	08004751 	.word	0x08004751
 80047a4:	08004751 	.word	0x08004751
 80047a8:	080048fb 	.word	0x080048fb
 80047ac:	08004751 	.word	0x08004751
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004751 	.word	0x08004751
 80047b8:	08004751 	.word	0x08004751
 80047bc:	0800489b 	.word	0x0800489b
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	1d1a      	adds	r2, r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	602a      	str	r2, [r5, #0]
 80047c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d0:	2301      	movs	r3, #1
 80047d2:	e09f      	b.n	8004914 <_printf_i+0x1ec>
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	682b      	ldr	r3, [r5, #0]
 80047d8:	0607      	lsls	r7, r0, #24
 80047da:	f103 0104 	add.w	r1, r3, #4
 80047de:	6029      	str	r1, [r5, #0]
 80047e0:	d501      	bpl.n	80047e6 <_printf_i+0xbe>
 80047e2:	681e      	ldr	r6, [r3, #0]
 80047e4:	e003      	b.n	80047ee <_printf_i+0xc6>
 80047e6:	0646      	lsls	r6, r0, #25
 80047e8:	d5fb      	bpl.n	80047e2 <_printf_i+0xba>
 80047ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	da03      	bge.n	80047fa <_printf_i+0xd2>
 80047f2:	232d      	movs	r3, #45	; 0x2d
 80047f4:	4276      	negs	r6, r6
 80047f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fa:	485a      	ldr	r0, [pc, #360]	; (8004964 <_printf_i+0x23c>)
 80047fc:	230a      	movs	r3, #10
 80047fe:	e012      	b.n	8004826 <_printf_i+0xfe>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	0605      	lsls	r5, r0, #24
 800480a:	d501      	bpl.n	8004810 <_printf_i+0xe8>
 800480c:	681e      	ldr	r6, [r3, #0]
 800480e:	e002      	b.n	8004816 <_printf_i+0xee>
 8004810:	0641      	lsls	r1, r0, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0xe4>
 8004814:	881e      	ldrh	r6, [r3, #0]
 8004816:	4853      	ldr	r0, [pc, #332]	; (8004964 <_printf_i+0x23c>)
 8004818:	2f6f      	cmp	r7, #111	; 0x6f
 800481a:	bf0c      	ite	eq
 800481c:	2308      	moveq	r3, #8
 800481e:	230a      	movne	r3, #10
 8004820:	2100      	movs	r1, #0
 8004822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004826:	6865      	ldr	r5, [r4, #4]
 8004828:	60a5      	str	r5, [r4, #8]
 800482a:	2d00      	cmp	r5, #0
 800482c:	bfa2      	ittt	ge
 800482e:	6821      	ldrge	r1, [r4, #0]
 8004830:	f021 0104 	bicge.w	r1, r1, #4
 8004834:	6021      	strge	r1, [r4, #0]
 8004836:	b90e      	cbnz	r6, 800483c <_printf_i+0x114>
 8004838:	2d00      	cmp	r5, #0
 800483a:	d04b      	beq.n	80048d4 <_printf_i+0x1ac>
 800483c:	4615      	mov	r5, r2
 800483e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004842:	fb03 6711 	mls	r7, r3, r1, r6
 8004846:	5dc7      	ldrb	r7, [r0, r7]
 8004848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800484c:	4637      	mov	r7, r6
 800484e:	42bb      	cmp	r3, r7
 8004850:	460e      	mov	r6, r1
 8004852:	d9f4      	bls.n	800483e <_printf_i+0x116>
 8004854:	2b08      	cmp	r3, #8
 8004856:	d10b      	bne.n	8004870 <_printf_i+0x148>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07de      	lsls	r6, r3, #31
 800485c:	d508      	bpl.n	8004870 <_printf_i+0x148>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6861      	ldr	r1, [r4, #4]
 8004862:	4299      	cmp	r1, r3
 8004864:	bfde      	ittt	le
 8004866:	2330      	movle	r3, #48	; 0x30
 8004868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800486c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004870:	1b52      	subs	r2, r2, r5
 8004872:	6122      	str	r2, [r4, #16]
 8004874:	f8cd a000 	str.w	sl, [sp]
 8004878:	464b      	mov	r3, r9
 800487a:	aa03      	add	r2, sp, #12
 800487c:	4621      	mov	r1, r4
 800487e:	4640      	mov	r0, r8
 8004880:	f7ff fee4 	bl	800464c <_printf_common>
 8004884:	3001      	adds	r0, #1
 8004886:	d14a      	bne.n	800491e <_printf_i+0x1f6>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	b004      	add	sp, #16
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f043 0320 	orr.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	4833      	ldr	r0, [pc, #204]	; (8004968 <_printf_i+0x240>)
 800489c:	2778      	movs	r7, #120	; 0x78
 800489e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	6829      	ldr	r1, [r5, #0]
 80048a6:	061f      	lsls	r7, r3, #24
 80048a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ac:	d402      	bmi.n	80048b4 <_printf_i+0x18c>
 80048ae:	065f      	lsls	r7, r3, #25
 80048b0:	bf48      	it	mi
 80048b2:	b2b6      	uxthmi	r6, r6
 80048b4:	07df      	lsls	r7, r3, #31
 80048b6:	bf48      	it	mi
 80048b8:	f043 0320 	orrmi.w	r3, r3, #32
 80048bc:	6029      	str	r1, [r5, #0]
 80048be:	bf48      	it	mi
 80048c0:	6023      	strmi	r3, [r4, #0]
 80048c2:	b91e      	cbnz	r6, 80048cc <_printf_i+0x1a4>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	f023 0320 	bic.w	r3, r3, #32
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	2310      	movs	r3, #16
 80048ce:	e7a7      	b.n	8004820 <_printf_i+0xf8>
 80048d0:	4824      	ldr	r0, [pc, #144]	; (8004964 <_printf_i+0x23c>)
 80048d2:	e7e4      	b.n	800489e <_printf_i+0x176>
 80048d4:	4615      	mov	r5, r2
 80048d6:	e7bd      	b.n	8004854 <_printf_i+0x12c>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	6826      	ldr	r6, [r4, #0]
 80048dc:	6961      	ldr	r1, [r4, #20]
 80048de:	1d18      	adds	r0, r3, #4
 80048e0:	6028      	str	r0, [r5, #0]
 80048e2:	0635      	lsls	r5, r6, #24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	d501      	bpl.n	80048ec <_printf_i+0x1c4>
 80048e8:	6019      	str	r1, [r3, #0]
 80048ea:	e002      	b.n	80048f2 <_printf_i+0x1ca>
 80048ec:	0670      	lsls	r0, r6, #25
 80048ee:	d5fb      	bpl.n	80048e8 <_printf_i+0x1c0>
 80048f0:	8019      	strh	r1, [r3, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	4615      	mov	r5, r2
 80048f8:	e7bc      	b.n	8004874 <_printf_i+0x14c>
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	1d1a      	adds	r2, r3, #4
 80048fe:	602a      	str	r2, [r5, #0]
 8004900:	681d      	ldr	r5, [r3, #0]
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	2100      	movs	r1, #0
 8004906:	4628      	mov	r0, r5
 8004908:	f7fb fc72 	bl	80001f0 <memchr>
 800490c:	b108      	cbz	r0, 8004912 <_printf_i+0x1ea>
 800490e:	1b40      	subs	r0, r0, r5
 8004910:	6060      	str	r0, [r4, #4]
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	2300      	movs	r3, #0
 8004918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491c:	e7aa      	b.n	8004874 <_printf_i+0x14c>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	462a      	mov	r2, r5
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	47d0      	blx	sl
 8004928:	3001      	adds	r0, #1
 800492a:	d0ad      	beq.n	8004888 <_printf_i+0x160>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	079b      	lsls	r3, r3, #30
 8004930:	d413      	bmi.n	800495a <_printf_i+0x232>
 8004932:	68e0      	ldr	r0, [r4, #12]
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	4298      	cmp	r0, r3
 8004938:	bfb8      	it	lt
 800493a:	4618      	movlt	r0, r3
 800493c:	e7a6      	b.n	800488c <_printf_i+0x164>
 800493e:	2301      	movs	r3, #1
 8004940:	4632      	mov	r2, r6
 8004942:	4649      	mov	r1, r9
 8004944:	4640      	mov	r0, r8
 8004946:	47d0      	blx	sl
 8004948:	3001      	adds	r0, #1
 800494a:	d09d      	beq.n	8004888 <_printf_i+0x160>
 800494c:	3501      	adds	r5, #1
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	9903      	ldr	r1, [sp, #12]
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	42ab      	cmp	r3, r5
 8004956:	dcf2      	bgt.n	800493e <_printf_i+0x216>
 8004958:	e7eb      	b.n	8004932 <_printf_i+0x20a>
 800495a:	2500      	movs	r5, #0
 800495c:	f104 0619 	add.w	r6, r4, #25
 8004960:	e7f5      	b.n	800494e <_printf_i+0x226>
 8004962:	bf00      	nop
 8004964:	08008992 	.word	0x08008992
 8004968:	080089a3 	.word	0x080089a3

0800496c <_scanf_float>:
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	b087      	sub	sp, #28
 8004972:	4617      	mov	r7, r2
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	688b      	ldr	r3, [r1, #8]
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800497e:	bf83      	ittte	hi
 8004980:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004984:	195b      	addhi	r3, r3, r5
 8004986:	9302      	strhi	r3, [sp, #8]
 8004988:	2300      	movls	r3, #0
 800498a:	bf86      	itte	hi
 800498c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004990:	608b      	strhi	r3, [r1, #8]
 8004992:	9302      	strls	r3, [sp, #8]
 8004994:	680b      	ldr	r3, [r1, #0]
 8004996:	468b      	mov	fp, r1
 8004998:	2500      	movs	r5, #0
 800499a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800499e:	f84b 3b1c 	str.w	r3, [fp], #28
 80049a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80049a6:	4680      	mov	r8, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	465e      	mov	r6, fp
 80049ac:	46aa      	mov	sl, r5
 80049ae:	46a9      	mov	r9, r5
 80049b0:	9501      	str	r5, [sp, #4]
 80049b2:	68a2      	ldr	r2, [r4, #8]
 80049b4:	b152      	cbz	r2, 80049cc <_scanf_float+0x60>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b4e      	cmp	r3, #78	; 0x4e
 80049bc:	d864      	bhi.n	8004a88 <_scanf_float+0x11c>
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d83c      	bhi.n	8004a3c <_scanf_float+0xd0>
 80049c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049c6:	b2c8      	uxtb	r0, r1
 80049c8:	280e      	cmp	r0, #14
 80049ca:	d93a      	bls.n	8004a42 <_scanf_float+0xd6>
 80049cc:	f1b9 0f00 	cmp.w	r9, #0
 80049d0:	d003      	beq.n	80049da <_scanf_float+0x6e>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049de:	f1ba 0f01 	cmp.w	sl, #1
 80049e2:	f200 8113 	bhi.w	8004c0c <_scanf_float+0x2a0>
 80049e6:	455e      	cmp	r6, fp
 80049e8:	f200 8105 	bhi.w	8004bf6 <_scanf_float+0x28a>
 80049ec:	2501      	movs	r5, #1
 80049ee:	4628      	mov	r0, r5
 80049f0:	b007      	add	sp, #28
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049fa:	2a0d      	cmp	r2, #13
 80049fc:	d8e6      	bhi.n	80049cc <_scanf_float+0x60>
 80049fe:	a101      	add	r1, pc, #4	; (adr r1, 8004a04 <_scanf_float+0x98>)
 8004a00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a04:	08004b43 	.word	0x08004b43
 8004a08:	080049cd 	.word	0x080049cd
 8004a0c:	080049cd 	.word	0x080049cd
 8004a10:	080049cd 	.word	0x080049cd
 8004a14:	08004ba3 	.word	0x08004ba3
 8004a18:	08004b7b 	.word	0x08004b7b
 8004a1c:	080049cd 	.word	0x080049cd
 8004a20:	080049cd 	.word	0x080049cd
 8004a24:	08004b51 	.word	0x08004b51
 8004a28:	080049cd 	.word	0x080049cd
 8004a2c:	080049cd 	.word	0x080049cd
 8004a30:	080049cd 	.word	0x080049cd
 8004a34:	080049cd 	.word	0x080049cd
 8004a38:	08004b09 	.word	0x08004b09
 8004a3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a40:	e7db      	b.n	80049fa <_scanf_float+0x8e>
 8004a42:	290e      	cmp	r1, #14
 8004a44:	d8c2      	bhi.n	80049cc <_scanf_float+0x60>
 8004a46:	a001      	add	r0, pc, #4	; (adr r0, 8004a4c <_scanf_float+0xe0>)
 8004a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a4c:	08004afb 	.word	0x08004afb
 8004a50:	080049cd 	.word	0x080049cd
 8004a54:	08004afb 	.word	0x08004afb
 8004a58:	08004b8f 	.word	0x08004b8f
 8004a5c:	080049cd 	.word	0x080049cd
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004ae5 	.word	0x08004ae5
 8004a68:	08004ae5 	.word	0x08004ae5
 8004a6c:	08004ae5 	.word	0x08004ae5
 8004a70:	08004ae5 	.word	0x08004ae5
 8004a74:	08004ae5 	.word	0x08004ae5
 8004a78:	08004ae5 	.word	0x08004ae5
 8004a7c:	08004ae5 	.word	0x08004ae5
 8004a80:	08004ae5 	.word	0x08004ae5
 8004a84:	08004ae5 	.word	0x08004ae5
 8004a88:	2b6e      	cmp	r3, #110	; 0x6e
 8004a8a:	d809      	bhi.n	8004aa0 <_scanf_float+0x134>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d8b2      	bhi.n	80049f6 <_scanf_float+0x8a>
 8004a90:	2b54      	cmp	r3, #84	; 0x54
 8004a92:	d077      	beq.n	8004b84 <_scanf_float+0x218>
 8004a94:	2b59      	cmp	r3, #89	; 0x59
 8004a96:	d199      	bne.n	80049cc <_scanf_float+0x60>
 8004a98:	2d07      	cmp	r5, #7
 8004a9a:	d197      	bne.n	80049cc <_scanf_float+0x60>
 8004a9c:	2508      	movs	r5, #8
 8004a9e:	e029      	b.n	8004af4 <_scanf_float+0x188>
 8004aa0:	2b74      	cmp	r3, #116	; 0x74
 8004aa2:	d06f      	beq.n	8004b84 <_scanf_float+0x218>
 8004aa4:	2b79      	cmp	r3, #121	; 0x79
 8004aa6:	e7f6      	b.n	8004a96 <_scanf_float+0x12a>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	05c8      	lsls	r0, r1, #23
 8004aac:	d51a      	bpl.n	8004ae4 <_scanf_float+0x178>
 8004aae:	9b02      	ldr	r3, [sp, #8]
 8004ab0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ab4:	6021      	str	r1, [r4, #0]
 8004ab6:	f109 0901 	add.w	r9, r9, #1
 8004aba:	b11b      	cbz	r3, 8004ac4 <_scanf_float+0x158>
 8004abc:	3b01      	subs	r3, #1
 8004abe:	3201      	adds	r2, #1
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	60a2      	str	r2, [r4, #8]
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60a3      	str	r3, [r4, #8]
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	3301      	adds	r3, #1
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	f340 8084 	ble.w	8004be4 <_scanf_float+0x278>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	e766      	b.n	80049b2 <_scanf_float+0x46>
 8004ae4:	eb1a 0f05 	cmn.w	sl, r5
 8004ae8:	f47f af70 	bne.w	80049cc <_scanf_float+0x60>
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004af2:	6022      	str	r2, [r4, #0]
 8004af4:	f806 3b01 	strb.w	r3, [r6], #1
 8004af8:	e7e4      	b.n	8004ac4 <_scanf_float+0x158>
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	0610      	lsls	r0, r2, #24
 8004afe:	f57f af65 	bpl.w	80049cc <_scanf_float+0x60>
 8004b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b06:	e7f4      	b.n	8004af2 <_scanf_float+0x186>
 8004b08:	f1ba 0f00 	cmp.w	sl, #0
 8004b0c:	d10e      	bne.n	8004b2c <_scanf_float+0x1c0>
 8004b0e:	f1b9 0f00 	cmp.w	r9, #0
 8004b12:	d10e      	bne.n	8004b32 <_scanf_float+0x1c6>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b1e:	d108      	bne.n	8004b32 <_scanf_float+0x1c6>
 8004b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	f04f 0a01 	mov.w	sl, #1
 8004b2a:	e7e3      	b.n	8004af4 <_scanf_float+0x188>
 8004b2c:	f1ba 0f02 	cmp.w	sl, #2
 8004b30:	d055      	beq.n	8004bde <_scanf_float+0x272>
 8004b32:	2d01      	cmp	r5, #1
 8004b34:	d002      	beq.n	8004b3c <_scanf_float+0x1d0>
 8004b36:	2d04      	cmp	r5, #4
 8004b38:	f47f af48 	bne.w	80049cc <_scanf_float+0x60>
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	b2ed      	uxtb	r5, r5
 8004b40:	e7d8      	b.n	8004af4 <_scanf_float+0x188>
 8004b42:	f1ba 0f01 	cmp.w	sl, #1
 8004b46:	f47f af41 	bne.w	80049cc <_scanf_float+0x60>
 8004b4a:	f04f 0a02 	mov.w	sl, #2
 8004b4e:	e7d1      	b.n	8004af4 <_scanf_float+0x188>
 8004b50:	b97d      	cbnz	r5, 8004b72 <_scanf_float+0x206>
 8004b52:	f1b9 0f00 	cmp.w	r9, #0
 8004b56:	f47f af3c 	bne.w	80049d2 <_scanf_float+0x66>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b64:	f47f af39 	bne.w	80049da <_scanf_float+0x6e>
 8004b68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	2501      	movs	r5, #1
 8004b70:	e7c0      	b.n	8004af4 <_scanf_float+0x188>
 8004b72:	2d03      	cmp	r5, #3
 8004b74:	d0e2      	beq.n	8004b3c <_scanf_float+0x1d0>
 8004b76:	2d05      	cmp	r5, #5
 8004b78:	e7de      	b.n	8004b38 <_scanf_float+0x1cc>
 8004b7a:	2d02      	cmp	r5, #2
 8004b7c:	f47f af26 	bne.w	80049cc <_scanf_float+0x60>
 8004b80:	2503      	movs	r5, #3
 8004b82:	e7b7      	b.n	8004af4 <_scanf_float+0x188>
 8004b84:	2d06      	cmp	r5, #6
 8004b86:	f47f af21 	bne.w	80049cc <_scanf_float+0x60>
 8004b8a:	2507      	movs	r5, #7
 8004b8c:	e7b2      	b.n	8004af4 <_scanf_float+0x188>
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	0591      	lsls	r1, r2, #22
 8004b92:	f57f af1b 	bpl.w	80049cc <_scanf_float+0x60>
 8004b96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b9a:	6022      	str	r2, [r4, #0]
 8004b9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ba0:	e7a8      	b.n	8004af4 <_scanf_float+0x188>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004bac:	d006      	beq.n	8004bbc <_scanf_float+0x250>
 8004bae:	0550      	lsls	r0, r2, #21
 8004bb0:	f57f af0c 	bpl.w	80049cc <_scanf_float+0x60>
 8004bb4:	f1b9 0f00 	cmp.w	r9, #0
 8004bb8:	f43f af0f 	beq.w	80049da <_scanf_float+0x6e>
 8004bbc:	0591      	lsls	r1, r2, #22
 8004bbe:	bf58      	it	pl
 8004bc0:	9901      	ldrpl	r1, [sp, #4]
 8004bc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bc6:	bf58      	it	pl
 8004bc8:	eba9 0101 	subpl.w	r1, r9, r1
 8004bcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004bd0:	bf58      	it	pl
 8004bd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	e78a      	b.n	8004af4 <_scanf_float+0x188>
 8004bde:	f04f 0a03 	mov.w	sl, #3
 8004be2:	e787      	b.n	8004af4 <_scanf_float+0x188>
 8004be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004be8:	4639      	mov	r1, r7
 8004bea:	4640      	mov	r0, r8
 8004bec:	4798      	blx	r3
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f43f aedf 	beq.w	80049b2 <_scanf_float+0x46>
 8004bf4:	e6ea      	b.n	80049cc <_scanf_float+0x60>
 8004bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bfe:	463a      	mov	r2, r7
 8004c00:	4640      	mov	r0, r8
 8004c02:	4798      	blx	r3
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	e6ec      	b.n	80049e6 <_scanf_float+0x7a>
 8004c0c:	1e6b      	subs	r3, r5, #1
 8004c0e:	2b06      	cmp	r3, #6
 8004c10:	d825      	bhi.n	8004c5e <_scanf_float+0x2f2>
 8004c12:	2d02      	cmp	r5, #2
 8004c14:	d836      	bhi.n	8004c84 <_scanf_float+0x318>
 8004c16:	455e      	cmp	r6, fp
 8004c18:	f67f aee8 	bls.w	80049ec <_scanf_float+0x80>
 8004c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c24:	463a      	mov	r2, r7
 8004c26:	4640      	mov	r0, r8
 8004c28:	4798      	blx	r3
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	e7f1      	b.n	8004c16 <_scanf_float+0x2aa>
 8004c32:	9802      	ldr	r0, [sp, #8]
 8004c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c3c:	9002      	str	r0, [sp, #8]
 8004c3e:	463a      	mov	r2, r7
 8004c40:	4640      	mov	r0, r8
 8004c42:	4798      	blx	r3
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c4e:	fa5f fa8a 	uxtb.w	sl, sl
 8004c52:	f1ba 0f02 	cmp.w	sl, #2
 8004c56:	d1ec      	bne.n	8004c32 <_scanf_float+0x2c6>
 8004c58:	3d03      	subs	r5, #3
 8004c5a:	b2ed      	uxtb	r5, r5
 8004c5c:	1b76      	subs	r6, r6, r5
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	05da      	lsls	r2, r3, #23
 8004c62:	d52f      	bpl.n	8004cc4 <_scanf_float+0x358>
 8004c64:	055b      	lsls	r3, r3, #21
 8004c66:	d510      	bpl.n	8004c8a <_scanf_float+0x31e>
 8004c68:	455e      	cmp	r6, fp
 8004c6a:	f67f aebf 	bls.w	80049ec <_scanf_float+0x80>
 8004c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c76:	463a      	mov	r2, r7
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4798      	blx	r3
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	e7f1      	b.n	8004c68 <_scanf_float+0x2fc>
 8004c84:	46aa      	mov	sl, r5
 8004c86:	9602      	str	r6, [sp, #8]
 8004c88:	e7df      	b.n	8004c4a <_scanf_float+0x2de>
 8004c8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	2965      	cmp	r1, #101	; 0x65
 8004c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c96:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	d00c      	beq.n	8004cb8 <_scanf_float+0x34c>
 8004c9e:	2945      	cmp	r1, #69	; 0x45
 8004ca0:	d00a      	beq.n	8004cb8 <_scanf_float+0x34c>
 8004ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ca6:	463a      	mov	r2, r7
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4798      	blx	r3
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	1eb5      	subs	r5, r6, #2
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4798      	blx	r3
 8004cc2:	462e      	mov	r6, r5
 8004cc4:	6825      	ldr	r5, [r4, #0]
 8004cc6:	f015 0510 	ands.w	r5, r5, #16
 8004cca:	d158      	bne.n	8004d7e <_scanf_float+0x412>
 8004ccc:	7035      	strb	r5, [r6, #0]
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd8:	d11c      	bne.n	8004d14 <_scanf_float+0x3a8>
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	454b      	cmp	r3, r9
 8004cde:	eba3 0209 	sub.w	r2, r3, r9
 8004ce2:	d124      	bne.n	8004d2e <_scanf_float+0x3c2>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f002 fd31 	bl	8007750 <_strtod_r>
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	6821      	ldr	r1, [r4, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f011 0f02 	tst.w	r1, #2
 8004cf8:	ec57 6b10 	vmov	r6, r7, d0
 8004cfc:	f103 0204 	add.w	r2, r3, #4
 8004d00:	d020      	beq.n	8004d44 <_scanf_float+0x3d8>
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	600a      	str	r2, [r1, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	e9c3 6700 	strd	r6, r7, [r3]
 8004d0c:	68e3      	ldr	r3, [r4, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60e3      	str	r3, [r4, #12]
 8004d12:	e66c      	b.n	80049ee <_scanf_float+0x82>
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0e4      	beq.n	8004ce4 <_scanf_float+0x378>
 8004d1a:	9905      	ldr	r1, [sp, #20]
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	462a      	mov	r2, r5
 8004d20:	3101      	adds	r1, #1
 8004d22:	4640      	mov	r0, r8
 8004d24:	f002 fd9c 	bl	8007860 <_strtol_r>
 8004d28:	9b04      	ldr	r3, [sp, #16]
 8004d2a:	9e05      	ldr	r6, [sp, #20]
 8004d2c:	1ac2      	subs	r2, r0, r3
 8004d2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d32:	429e      	cmp	r6, r3
 8004d34:	bf28      	it	cs
 8004d36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d3a:	4912      	ldr	r1, [pc, #72]	; (8004d84 <_scanf_float+0x418>)
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 f955 	bl	8004fec <siprintf>
 8004d42:	e7cf      	b.n	8004ce4 <_scanf_float+0x378>
 8004d44:	f011 0f04 	tst.w	r1, #4
 8004d48:	9903      	ldr	r1, [sp, #12]
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	d1db      	bne.n	8004d06 <_scanf_float+0x39a>
 8004d4e:	f8d3 8000 	ldr.w	r8, [r3]
 8004d52:	ee10 2a10 	vmov	r2, s0
 8004d56:	ee10 0a10 	vmov	r0, s0
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	f7fb fef5 	bl	8000b4c <__aeabi_dcmpun>
 8004d62:	b128      	cbz	r0, 8004d70 <_scanf_float+0x404>
 8004d64:	4808      	ldr	r0, [pc, #32]	; (8004d88 <_scanf_float+0x41c>)
 8004d66:	f000 fab9 	bl	80052dc <nanf>
 8004d6a:	ed88 0a00 	vstr	s0, [r8]
 8004d6e:	e7cd      	b.n	8004d0c <_scanf_float+0x3a0>
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb ff48 	bl	8000c08 <__aeabi_d2f>
 8004d78:	f8c8 0000 	str.w	r0, [r8]
 8004d7c:	e7c6      	b.n	8004d0c <_scanf_float+0x3a0>
 8004d7e:	2500      	movs	r5, #0
 8004d80:	e635      	b.n	80049ee <_scanf_float+0x82>
 8004d82:	bf00      	nop
 8004d84:	080089b4 	.word	0x080089b4
 8004d88:	08008d45 	.word	0x08008d45

08004d8c <std>:
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	e9c0 3300 	strd	r3, r3, [r0]
 8004d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d9a:	6083      	str	r3, [r0, #8]
 8004d9c:	8181      	strh	r1, [r0, #12]
 8004d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004da0:	81c2      	strh	r2, [r0, #14]
 8004da2:	6183      	str	r3, [r0, #24]
 8004da4:	4619      	mov	r1, r3
 8004da6:	2208      	movs	r2, #8
 8004da8:	305c      	adds	r0, #92	; 0x5c
 8004daa:	f000 fa17 	bl	80051dc <memset>
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <std+0x58>)
 8004db0:	6263      	str	r3, [r4, #36]	; 0x24
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <std+0x5c>)
 8004db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <std+0x60>)
 8004db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <std+0x64>)
 8004dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <std+0x68>)
 8004dc0:	6224      	str	r4, [r4, #32]
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d006      	beq.n	8004dd4 <std+0x48>
 8004dc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004dca:	4294      	cmp	r4, r2
 8004dcc:	d002      	beq.n	8004dd4 <std+0x48>
 8004dce:	33d0      	adds	r3, #208	; 0xd0
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d105      	bne.n	8004de0 <std+0x54>
 8004dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ddc:	f000 ba7a 	b.w	80052d4 <__retarget_lock_init_recursive>
 8004de0:	bd10      	pop	{r4, pc}
 8004de2:	bf00      	nop
 8004de4:	0800502d 	.word	0x0800502d
 8004de8:	0800504f 	.word	0x0800504f
 8004dec:	08005087 	.word	0x08005087
 8004df0:	080050ab 	.word	0x080050ab
 8004df4:	200003b8 	.word	0x200003b8

08004df8 <stdio_exit_handler>:
 8004df8:	4a02      	ldr	r2, [pc, #8]	; (8004e04 <stdio_exit_handler+0xc>)
 8004dfa:	4903      	ldr	r1, [pc, #12]	; (8004e08 <stdio_exit_handler+0x10>)
 8004dfc:	4803      	ldr	r0, [pc, #12]	; (8004e0c <stdio_exit_handler+0x14>)
 8004dfe:	f000 b869 	b.w	8004ed4 <_fwalk_sglue>
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	08007ea9 	.word	0x08007ea9
 8004e0c:	20000018 	.word	0x20000018

08004e10 <cleanup_stdio>:
 8004e10:	6841      	ldr	r1, [r0, #4]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <cleanup_stdio+0x34>)
 8004e14:	4299      	cmp	r1, r3
 8004e16:	b510      	push	{r4, lr}
 8004e18:	4604      	mov	r4, r0
 8004e1a:	d001      	beq.n	8004e20 <cleanup_stdio+0x10>
 8004e1c:	f003 f844 	bl	8007ea8 <_fflush_r>
 8004e20:	68a1      	ldr	r1, [r4, #8]
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <cleanup_stdio+0x38>)
 8004e24:	4299      	cmp	r1, r3
 8004e26:	d002      	beq.n	8004e2e <cleanup_stdio+0x1e>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f003 f83d 	bl	8007ea8 <_fflush_r>
 8004e2e:	68e1      	ldr	r1, [r4, #12]
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <cleanup_stdio+0x3c>)
 8004e32:	4299      	cmp	r1, r3
 8004e34:	d004      	beq.n	8004e40 <cleanup_stdio+0x30>
 8004e36:	4620      	mov	r0, r4
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f003 b834 	b.w	8007ea8 <_fflush_r>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	200003b8 	.word	0x200003b8
 8004e48:	20000420 	.word	0x20000420
 8004e4c:	20000488 	.word	0x20000488

08004e50 <global_stdio_init.part.0>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <global_stdio_init.part.0+0x30>)
 8004e54:	4c0b      	ldr	r4, [pc, #44]	; (8004e84 <global_stdio_init.part.0+0x34>)
 8004e56:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <global_stdio_init.part.0+0x38>)
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2104      	movs	r1, #4
 8004e60:	f7ff ff94 	bl	8004d8c <std>
 8004e64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2109      	movs	r1, #9
 8004e6c:	f7ff ff8e 	bl	8004d8c <std>
 8004e70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e74:	2202      	movs	r2, #2
 8004e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7a:	2112      	movs	r1, #18
 8004e7c:	f7ff bf86 	b.w	8004d8c <std>
 8004e80:	200004f0 	.word	0x200004f0
 8004e84:	200003b8 	.word	0x200003b8
 8004e88:	08004df9 	.word	0x08004df9

08004e8c <__sfp_lock_acquire>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sfp_lock_acquire+0x8>)
 8004e8e:	f000 ba22 	b.w	80052d6 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	200004f9 	.word	0x200004f9

08004e98 <__sfp_lock_release>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__sfp_lock_release+0x8>)
 8004e9a:	f000 ba1d 	b.w	80052d8 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	200004f9 	.word	0x200004f9

08004ea4 <__sinit>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	f7ff fff0 	bl	8004e8c <__sfp_lock_acquire>
 8004eac:	6a23      	ldr	r3, [r4, #32]
 8004eae:	b11b      	cbz	r3, 8004eb8 <__sinit+0x14>
 8004eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb4:	f7ff bff0 	b.w	8004e98 <__sfp_lock_release>
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <__sinit+0x28>)
 8004eba:	6223      	str	r3, [r4, #32]
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <__sinit+0x2c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f5      	bne.n	8004eb0 <__sinit+0xc>
 8004ec4:	f7ff ffc4 	bl	8004e50 <global_stdio_init.part.0>
 8004ec8:	e7f2      	b.n	8004eb0 <__sinit+0xc>
 8004eca:	bf00      	nop
 8004ecc:	08004e11 	.word	0x08004e11
 8004ed0:	200004f0 	.word	0x200004f0

08004ed4 <_fwalk_sglue>:
 8004ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	4607      	mov	r7, r0
 8004eda:	4688      	mov	r8, r1
 8004edc:	4614      	mov	r4, r2
 8004ede:	2600      	movs	r6, #0
 8004ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ee8:	d505      	bpl.n	8004ef6 <_fwalk_sglue+0x22>
 8004eea:	6824      	ldr	r4, [r4, #0]
 8004eec:	2c00      	cmp	r4, #0
 8004eee:	d1f7      	bne.n	8004ee0 <_fwalk_sglue+0xc>
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d907      	bls.n	8004f0c <_fwalk_sglue+0x38>
 8004efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f00:	3301      	adds	r3, #1
 8004f02:	d003      	beq.n	8004f0c <_fwalk_sglue+0x38>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4638      	mov	r0, r7
 8004f08:	47c0      	blx	r8
 8004f0a:	4306      	orrs	r6, r0
 8004f0c:	3568      	adds	r5, #104	; 0x68
 8004f0e:	e7e9      	b.n	8004ee4 <_fwalk_sglue+0x10>

08004f10 <iprintf>:
 8004f10:	b40f      	push	{r0, r1, r2, r3}
 8004f12:	b507      	push	{r0, r1, r2, lr}
 8004f14:	4906      	ldr	r1, [pc, #24]	; (8004f30 <iprintf+0x20>)
 8004f16:	ab04      	add	r3, sp, #16
 8004f18:	6808      	ldr	r0, [r1, #0]
 8004f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f1e:	6881      	ldr	r1, [r0, #8]
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	f002 fe21 	bl	8007b68 <_vfiprintf_r>
 8004f26:	b003      	add	sp, #12
 8004f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f2c:	b004      	add	sp, #16
 8004f2e:	4770      	bx	lr
 8004f30:	20000064 	.word	0x20000064

08004f34 <_puts_r>:
 8004f34:	6a03      	ldr	r3, [r0, #32]
 8004f36:	b570      	push	{r4, r5, r6, lr}
 8004f38:	6884      	ldr	r4, [r0, #8]
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	b90b      	cbnz	r3, 8004f44 <_puts_r+0x10>
 8004f40:	f7ff ffb0 	bl	8004ea4 <__sinit>
 8004f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f46:	07db      	lsls	r3, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_puts_r+0x22>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	0598      	lsls	r0, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_puts_r+0x22>
 8004f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f52:	f000 f9c0 	bl	80052d6 <__retarget_lock_acquire_recursive>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	0719      	lsls	r1, r3, #28
 8004f5a:	d513      	bpl.n	8004f84 <_puts_r+0x50>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	b18b      	cbz	r3, 8004f84 <_puts_r+0x50>
 8004f60:	3e01      	subs	r6, #1
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	b9e9      	cbnz	r1, 8004faa <_puts_r+0x76>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da2e      	bge.n	8004fd0 <_puts_r+0x9c>
 8004f72:	4622      	mov	r2, r4
 8004f74:	210a      	movs	r1, #10
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 f89b 	bl	80050b2 <__swbuf_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d007      	beq.n	8004f90 <_puts_r+0x5c>
 8004f80:	250a      	movs	r5, #10
 8004f82:	e007      	b.n	8004f94 <_puts_r+0x60>
 8004f84:	4621      	mov	r1, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 f8d0 	bl	800512c <__swsetup_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0e7      	beq.n	8004f60 <_puts_r+0x2c>
 8004f90:	f04f 35ff 	mov.w	r5, #4294967295
 8004f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f96:	07da      	lsls	r2, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_puts_r+0x72>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	059b      	lsls	r3, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_puts_r+0x72>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 f999 	bl	80052d8 <__retarget_lock_release_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	da04      	bge.n	8004fb8 <_puts_r+0x84>
 8004fae:	69a2      	ldr	r2, [r4, #24]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dc06      	bgt.n	8004fc2 <_puts_r+0x8e>
 8004fb4:	290a      	cmp	r1, #10
 8004fb6:	d004      	beq.n	8004fc2 <_puts_r+0x8e>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	7019      	strb	r1, [r3, #0]
 8004fc0:	e7cf      	b.n	8004f62 <_puts_r+0x2e>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 f874 	bl	80050b2 <__swbuf_r>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d1c9      	bne.n	8004f62 <_puts_r+0x2e>
 8004fce:	e7df      	b.n	8004f90 <_puts_r+0x5c>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	250a      	movs	r5, #10
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	701d      	strb	r5, [r3, #0]
 8004fda:	e7db      	b.n	8004f94 <_puts_r+0x60>

08004fdc <puts>:
 8004fdc:	4b02      	ldr	r3, [pc, #8]	; (8004fe8 <puts+0xc>)
 8004fde:	4601      	mov	r1, r0
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f7ff bfa7 	b.w	8004f34 <_puts_r>
 8004fe6:	bf00      	nop
 8004fe8:	20000064 	.word	0x20000064

08004fec <siprintf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b500      	push	{lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	9006      	str	r0, [sp, #24]
 8004ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ffc:	4809      	ldr	r0, [pc, #36]	; (8005024 <siprintf+0x38>)
 8004ffe:	9107      	str	r1, [sp, #28]
 8005000:	9104      	str	r1, [sp, #16]
 8005002:	4909      	ldr	r1, [pc, #36]	; (8005028 <siprintf+0x3c>)
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	a902      	add	r1, sp, #8
 8005010:	f002 fc82 	bl	8007918 <_svfiprintf_r>
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	b01c      	add	sp, #112	; 0x70
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
 8005024:	20000064 	.word	0x20000064
 8005028:	ffff0208 	.word	0xffff0208

0800502c <__sread>:
 800502c:	b510      	push	{r4, lr}
 800502e:	460c      	mov	r4, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 f900 	bl	8005238 <_read_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	bfab      	itete	ge
 800503c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503e:	89a3      	ldrhlt	r3, [r4, #12]
 8005040:	181b      	addge	r3, r3, r0
 8005042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005046:	bfac      	ite	ge
 8005048:	6563      	strge	r3, [r4, #84]	; 0x54
 800504a:	81a3      	strhlt	r3, [r4, #12]
 800504c:	bd10      	pop	{r4, pc}

0800504e <__swrite>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	461f      	mov	r7, r3
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	05db      	lsls	r3, r3, #23
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4616      	mov	r6, r2
 800505e:	d505      	bpl.n	800506c <__swrite+0x1e>
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	2302      	movs	r3, #2
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f8d4 	bl	8005214 <_lseek_r>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	4632      	mov	r2, r6
 800507a:	463b      	mov	r3, r7
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	f000 b8eb 	b.w	800525c <_write_r>

08005086 <__sseek>:
 8005086:	b510      	push	{r4, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 f8c1 	bl	8005214 <_lseek_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	bf15      	itete	ne
 8005098:	6560      	strne	r0, [r4, #84]	; 0x54
 800509a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strheq	r3, [r4, #12]
 80050a4:	bf18      	it	ne
 80050a6:	81a3      	strhne	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__sclose>:
 80050aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ae:	f000 b8a1 	b.w	80051f4 <_close_r>

080050b2 <__swbuf_r>:
 80050b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b4:	460e      	mov	r6, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	4605      	mov	r5, r0
 80050ba:	b118      	cbz	r0, 80050c4 <__swbuf_r+0x12>
 80050bc:	6a03      	ldr	r3, [r0, #32]
 80050be:	b90b      	cbnz	r3, 80050c4 <__swbuf_r+0x12>
 80050c0:	f7ff fef0 	bl	8004ea4 <__sinit>
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	60a3      	str	r3, [r4, #8]
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	071a      	lsls	r2, r3, #28
 80050cc:	d525      	bpl.n	800511a <__swbuf_r+0x68>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	b31b      	cbz	r3, 800511a <__swbuf_r+0x68>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	1a98      	subs	r0, r3, r2
 80050d8:	6963      	ldr	r3, [r4, #20]
 80050da:	b2f6      	uxtb	r6, r6
 80050dc:	4283      	cmp	r3, r0
 80050de:	4637      	mov	r7, r6
 80050e0:	dc04      	bgt.n	80050ec <__swbuf_r+0x3a>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f002 fedf 	bl	8007ea8 <_fflush_r>
 80050ea:	b9e0      	cbnz	r0, 8005126 <__swbuf_r+0x74>
 80050ec:	68a3      	ldr	r3, [r4, #8]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	701e      	strb	r6, [r3, #0]
 80050fa:	6962      	ldr	r2, [r4, #20]
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	429a      	cmp	r2, r3
 8005100:	d004      	beq.n	800510c <__swbuf_r+0x5a>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	07db      	lsls	r3, r3, #31
 8005106:	d506      	bpl.n	8005116 <__swbuf_r+0x64>
 8005108:	2e0a      	cmp	r6, #10
 800510a:	d104      	bne.n	8005116 <__swbuf_r+0x64>
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f002 feca 	bl	8007ea8 <_fflush_r>
 8005114:	b938      	cbnz	r0, 8005126 <__swbuf_r+0x74>
 8005116:	4638      	mov	r0, r7
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	4621      	mov	r1, r4
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f805 	bl	800512c <__swsetup_r>
 8005122:	2800      	cmp	r0, #0
 8005124:	d0d5      	beq.n	80050d2 <__swbuf_r+0x20>
 8005126:	f04f 37ff 	mov.w	r7, #4294967295
 800512a:	e7f4      	b.n	8005116 <__swbuf_r+0x64>

0800512c <__swsetup_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <__swsetup_r+0xac>)
 8005130:	4605      	mov	r5, r0
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	460c      	mov	r4, r1
 8005136:	b118      	cbz	r0, 8005140 <__swsetup_r+0x14>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b90b      	cbnz	r3, 8005140 <__swsetup_r+0x14>
 800513c:	f7ff feb2 	bl	8004ea4 <__sinit>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005146:	0718      	lsls	r0, r3, #28
 8005148:	d422      	bmi.n	8005190 <__swsetup_r+0x64>
 800514a:	06d9      	lsls	r1, r3, #27
 800514c:	d407      	bmi.n	800515e <__swsetup_r+0x32>
 800514e:	2309      	movs	r3, #9
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	e034      	b.n	80051c8 <__swsetup_r+0x9c>
 800515e:	0758      	lsls	r0, r3, #29
 8005160:	d512      	bpl.n	8005188 <__swsetup_r+0x5c>
 8005162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005164:	b141      	cbz	r1, 8005178 <__swsetup_r+0x4c>
 8005166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800516a:	4299      	cmp	r1, r3
 800516c:	d002      	beq.n	8005174 <__swsetup_r+0x48>
 800516e:	4628      	mov	r0, r5
 8005170:	f000 ff34 	bl	8005fdc <_free_r>
 8005174:	2300      	movs	r3, #0
 8005176:	6363      	str	r3, [r4, #52]	; 0x34
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	2300      	movs	r3, #0
 8005182:	6063      	str	r3, [r4, #4]
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f043 0308 	orr.w	r3, r3, #8
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	6923      	ldr	r3, [r4, #16]
 8005192:	b94b      	cbnz	r3, 80051a8 <__swsetup_r+0x7c>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800519a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519e:	d003      	beq.n	80051a8 <__swsetup_r+0x7c>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	f002 fece 	bl	8007f44 <__smakebuf_r>
 80051a8:	89a0      	ldrh	r0, [r4, #12]
 80051aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ae:	f010 0301 	ands.w	r3, r0, #1
 80051b2:	d00a      	beq.n	80051ca <__swsetup_r+0x9e>
 80051b4:	2300      	movs	r3, #0
 80051b6:	60a3      	str	r3, [r4, #8]
 80051b8:	6963      	ldr	r3, [r4, #20]
 80051ba:	425b      	negs	r3, r3
 80051bc:	61a3      	str	r3, [r4, #24]
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	b943      	cbnz	r3, 80051d4 <__swsetup_r+0xa8>
 80051c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051c6:	d1c4      	bne.n	8005152 <__swsetup_r+0x26>
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 80051ca:	0781      	lsls	r1, r0, #30
 80051cc:	bf58      	it	pl
 80051ce:	6963      	ldrpl	r3, [r4, #20]
 80051d0:	60a3      	str	r3, [r4, #8]
 80051d2:	e7f4      	b.n	80051be <__swsetup_r+0x92>
 80051d4:	2000      	movs	r0, #0
 80051d6:	e7f7      	b.n	80051c8 <__swsetup_r+0x9c>
 80051d8:	20000064 	.word	0x20000064

080051dc <memset>:
 80051dc:	4402      	add	r2, r0
 80051de:	4603      	mov	r3, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <_localeconv_r>:
 80051ec:	4800      	ldr	r0, [pc, #0]	; (80051f0 <_localeconv_r+0x4>)
 80051ee:	4770      	bx	lr
 80051f0:	20000158 	.word	0x20000158

080051f4 <_close_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d06      	ldr	r5, [pc, #24]	; (8005210 <_close_r+0x1c>)
 80051f8:	2300      	movs	r3, #0
 80051fa:	4604      	mov	r4, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	602b      	str	r3, [r5, #0]
 8005200:	f7fc fb95 	bl	800192e <_close>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_close_r+0x1a>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_close_r+0x1a>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	200004f4 	.word	0x200004f4

08005214 <_lseek_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	; (8005234 <_lseek_r+0x20>)
 8005218:	4604      	mov	r4, r0
 800521a:	4608      	mov	r0, r1
 800521c:	4611      	mov	r1, r2
 800521e:	2200      	movs	r2, #0
 8005220:	602a      	str	r2, [r5, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	f7fc fbaa 	bl	800197c <_lseek>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_lseek_r+0x1e>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_lseek_r+0x1e>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	200004f4 	.word	0x200004f4

08005238 <_read_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d07      	ldr	r5, [pc, #28]	; (8005258 <_read_r+0x20>)
 800523c:	4604      	mov	r4, r0
 800523e:	4608      	mov	r0, r1
 8005240:	4611      	mov	r1, r2
 8005242:	2200      	movs	r2, #0
 8005244:	602a      	str	r2, [r5, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f7fc fb54 	bl	80018f4 <_read>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_read_r+0x1e>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_read_r+0x1e>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200004f4 	.word	0x200004f4

0800525c <_write_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_write_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fb fed0 	bl	8001010 <_write>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_write_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_write_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	200004f4 	.word	0x200004f4

08005280 <__errno>:
 8005280:	4b01      	ldr	r3, [pc, #4]	; (8005288 <__errno+0x8>)
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000064 	.word	0x20000064

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4d0d      	ldr	r5, [pc, #52]	; (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2600      	movs	r6, #0
 8005298:	42a6      	cmp	r6, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4d0b      	ldr	r5, [pc, #44]	; (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	; (80052d0 <__libc_init_array+0x44>)
 80052a0:	f003 fb42 	bl	8008928 <_init>
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2600      	movs	r6, #0
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b4:	4798      	blx	r3
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80052be:	4798      	blx	r3
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	08008db0 	.word	0x08008db0
 80052c8:	08008db0 	.word	0x08008db0
 80052cc:	08008db0 	.word	0x08008db0
 80052d0:	08008db4 	.word	0x08008db4

080052d4 <__retarget_lock_init_recursive>:
 80052d4:	4770      	bx	lr

080052d6 <__retarget_lock_acquire_recursive>:
 80052d6:	4770      	bx	lr

080052d8 <__retarget_lock_release_recursive>:
 80052d8:	4770      	bx	lr
	...

080052dc <nanf>:
 80052dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80052e4 <nanf+0x8>
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	7fc00000 	.word	0x7fc00000

080052e8 <quorem>:
 80052e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	6903      	ldr	r3, [r0, #16]
 80052ee:	690c      	ldr	r4, [r1, #16]
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	4607      	mov	r7, r0
 80052f4:	db7e      	blt.n	80053f4 <quorem+0x10c>
 80052f6:	3c01      	subs	r4, #1
 80052f8:	f101 0814 	add.w	r8, r1, #20
 80052fc:	f100 0514 	add.w	r5, r0, #20
 8005300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800530a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800530e:	3301      	adds	r3, #1
 8005310:	429a      	cmp	r2, r3
 8005312:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005316:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800531a:	fbb2 f6f3 	udiv	r6, r2, r3
 800531e:	d331      	bcc.n	8005384 <quorem+0x9c>
 8005320:	f04f 0e00 	mov.w	lr, #0
 8005324:	4640      	mov	r0, r8
 8005326:	46ac      	mov	ip, r5
 8005328:	46f2      	mov	sl, lr
 800532a:	f850 2b04 	ldr.w	r2, [r0], #4
 800532e:	b293      	uxth	r3, r2
 8005330:	fb06 e303 	mla	r3, r6, r3, lr
 8005334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005338:	0c1a      	lsrs	r2, r3, #16
 800533a:	b29b      	uxth	r3, r3
 800533c:	ebaa 0303 	sub.w	r3, sl, r3
 8005340:	f8dc a000 	ldr.w	sl, [ip]
 8005344:	fa13 f38a 	uxtah	r3, r3, sl
 8005348:	fb06 220e 	mla	r2, r6, lr, r2
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	9b00      	ldr	r3, [sp, #0]
 8005350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005354:	b292      	uxth	r2, r2
 8005356:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800535a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800535e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005362:	4581      	cmp	r9, r0
 8005364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005368:	f84c 3b04 	str.w	r3, [ip], #4
 800536c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005370:	d2db      	bcs.n	800532a <quorem+0x42>
 8005372:	f855 300b 	ldr.w	r3, [r5, fp]
 8005376:	b92b      	cbnz	r3, 8005384 <quorem+0x9c>
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	3b04      	subs	r3, #4
 800537c:	429d      	cmp	r5, r3
 800537e:	461a      	mov	r2, r3
 8005380:	d32c      	bcc.n	80053dc <quorem+0xf4>
 8005382:	613c      	str	r4, [r7, #16]
 8005384:	4638      	mov	r0, r7
 8005386:	f001 f9ef 	bl	8006768 <__mcmp>
 800538a:	2800      	cmp	r0, #0
 800538c:	db22      	blt.n	80053d4 <quorem+0xec>
 800538e:	3601      	adds	r6, #1
 8005390:	4629      	mov	r1, r5
 8005392:	2000      	movs	r0, #0
 8005394:	f858 2b04 	ldr.w	r2, [r8], #4
 8005398:	f8d1 c000 	ldr.w	ip, [r1]
 800539c:	b293      	uxth	r3, r2
 800539e:	1ac3      	subs	r3, r0, r3
 80053a0:	0c12      	lsrs	r2, r2, #16
 80053a2:	fa13 f38c 	uxtah	r3, r3, ip
 80053a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80053aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b4:	45c1      	cmp	r9, r8
 80053b6:	f841 3b04 	str.w	r3, [r1], #4
 80053ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053be:	d2e9      	bcs.n	8005394 <quorem+0xac>
 80053c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053c8:	b922      	cbnz	r2, 80053d4 <quorem+0xec>
 80053ca:	3b04      	subs	r3, #4
 80053cc:	429d      	cmp	r5, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	d30a      	bcc.n	80053e8 <quorem+0x100>
 80053d2:	613c      	str	r4, [r7, #16]
 80053d4:	4630      	mov	r0, r6
 80053d6:	b003      	add	sp, #12
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	3b04      	subs	r3, #4
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d1ce      	bne.n	8005382 <quorem+0x9a>
 80053e4:	3c01      	subs	r4, #1
 80053e6:	e7c9      	b.n	800537c <quorem+0x94>
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	3b04      	subs	r3, #4
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d1f0      	bne.n	80053d2 <quorem+0xea>
 80053f0:	3c01      	subs	r4, #1
 80053f2:	e7eb      	b.n	80053cc <quorem+0xe4>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e7ee      	b.n	80053d6 <quorem+0xee>

080053f8 <_dtoa_r>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	ed2d 8b04 	vpush	{d8-d9}
 8005400:	69c5      	ldr	r5, [r0, #28]
 8005402:	b093      	sub	sp, #76	; 0x4c
 8005404:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005408:	ec57 6b10 	vmov	r6, r7, d0
 800540c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005410:	9107      	str	r1, [sp, #28]
 8005412:	4604      	mov	r4, r0
 8005414:	920a      	str	r2, [sp, #40]	; 0x28
 8005416:	930d      	str	r3, [sp, #52]	; 0x34
 8005418:	b975      	cbnz	r5, 8005438 <_dtoa_r+0x40>
 800541a:	2010      	movs	r0, #16
 800541c:	f000 fe2a 	bl	8006074 <malloc>
 8005420:	4602      	mov	r2, r0
 8005422:	61e0      	str	r0, [r4, #28]
 8005424:	b920      	cbnz	r0, 8005430 <_dtoa_r+0x38>
 8005426:	4bae      	ldr	r3, [pc, #696]	; (80056e0 <_dtoa_r+0x2e8>)
 8005428:	21ef      	movs	r1, #239	; 0xef
 800542a:	48ae      	ldr	r0, [pc, #696]	; (80056e4 <_dtoa_r+0x2ec>)
 800542c:	f002 fe3c 	bl	80080a8 <__assert_func>
 8005430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005434:	6005      	str	r5, [r0, #0]
 8005436:	60c5      	str	r5, [r0, #12]
 8005438:	69e3      	ldr	r3, [r4, #28]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	b151      	cbz	r1, 8005454 <_dtoa_r+0x5c>
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	604a      	str	r2, [r1, #4]
 8005442:	2301      	movs	r3, #1
 8005444:	4093      	lsls	r3, r2
 8005446:	608b      	str	r3, [r1, #8]
 8005448:	4620      	mov	r0, r4
 800544a:	f000 ff07 	bl	800625c <_Bfree>
 800544e:	69e3      	ldr	r3, [r4, #28]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	1e3b      	subs	r3, r7, #0
 8005456:	bfbb      	ittet	lt
 8005458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800545c:	9303      	strlt	r3, [sp, #12]
 800545e:	2300      	movge	r3, #0
 8005460:	2201      	movlt	r2, #1
 8005462:	bfac      	ite	ge
 8005464:	f8c8 3000 	strge.w	r3, [r8]
 8005468:	f8c8 2000 	strlt.w	r2, [r8]
 800546c:	4b9e      	ldr	r3, [pc, #632]	; (80056e8 <_dtoa_r+0x2f0>)
 800546e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005472:	ea33 0308 	bics.w	r3, r3, r8
 8005476:	d11b      	bne.n	80054b0 <_dtoa_r+0xb8>
 8005478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800547a:	f242 730f 	movw	r3, #9999	; 0x270f
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005484:	4333      	orrs	r3, r6
 8005486:	f000 8593 	beq.w	8005fb0 <_dtoa_r+0xbb8>
 800548a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800548c:	b963      	cbnz	r3, 80054a8 <_dtoa_r+0xb0>
 800548e:	4b97      	ldr	r3, [pc, #604]	; (80056ec <_dtoa_r+0x2f4>)
 8005490:	e027      	b.n	80054e2 <_dtoa_r+0xea>
 8005492:	4b97      	ldr	r3, [pc, #604]	; (80056f0 <_dtoa_r+0x2f8>)
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	9800      	ldr	r0, [sp, #0]
 800549e:	b013      	add	sp, #76	; 0x4c
 80054a0:	ecbd 8b04 	vpop	{d8-d9}
 80054a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a8:	4b90      	ldr	r3, [pc, #576]	; (80056ec <_dtoa_r+0x2f4>)
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	3303      	adds	r3, #3
 80054ae:	e7f3      	b.n	8005498 <_dtoa_r+0xa0>
 80054b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	ec51 0b17 	vmov	r0, r1, d7
 80054ba:	eeb0 8a47 	vmov.f32	s16, s14
 80054be:	eef0 8a67 	vmov.f32	s17, s15
 80054c2:	2300      	movs	r3, #0
 80054c4:	f7fb fb10 	bl	8000ae8 <__aeabi_dcmpeq>
 80054c8:	4681      	mov	r9, r0
 80054ca:	b160      	cbz	r0, 80054e6 <_dtoa_r+0xee>
 80054cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ce:	2301      	movs	r3, #1
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8568 	beq.w	8005faa <_dtoa_r+0xbb2>
 80054da:	4b86      	ldr	r3, [pc, #536]	; (80056f4 <_dtoa_r+0x2fc>)
 80054dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	e7da      	b.n	800549c <_dtoa_r+0xa4>
 80054e6:	aa10      	add	r2, sp, #64	; 0x40
 80054e8:	a911      	add	r1, sp, #68	; 0x44
 80054ea:	4620      	mov	r0, r4
 80054ec:	eeb0 0a48 	vmov.f32	s0, s16
 80054f0:	eef0 0a68 	vmov.f32	s1, s17
 80054f4:	f001 fa4e 	bl	8006994 <__d2b>
 80054f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054fc:	4682      	mov	sl, r0
 80054fe:	2d00      	cmp	r5, #0
 8005500:	d07f      	beq.n	8005602 <_dtoa_r+0x20a>
 8005502:	ee18 3a90 	vmov	r3, s17
 8005506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800550e:	ec51 0b18 	vmov	r0, r1, d8
 8005512:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800551a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800551e:	4619      	mov	r1, r3
 8005520:	2200      	movs	r2, #0
 8005522:	4b75      	ldr	r3, [pc, #468]	; (80056f8 <_dtoa_r+0x300>)
 8005524:	f7fa fec0 	bl	80002a8 <__aeabi_dsub>
 8005528:	a367      	add	r3, pc, #412	; (adr r3, 80056c8 <_dtoa_r+0x2d0>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb f873 	bl	8000618 <__aeabi_dmul>
 8005532:	a367      	add	r3, pc, #412	; (adr r3, 80056d0 <_dtoa_r+0x2d8>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f7fa feb8 	bl	80002ac <__adddf3>
 800553c:	4606      	mov	r6, r0
 800553e:	4628      	mov	r0, r5
 8005540:	460f      	mov	r7, r1
 8005542:	f7fa ffff 	bl	8000544 <__aeabi_i2d>
 8005546:	a364      	add	r3, pc, #400	; (adr r3, 80056d8 <_dtoa_r+0x2e0>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fb f864 	bl	8000618 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fa fea8 	bl	80002ac <__adddf3>
 800555c:	4606      	mov	r6, r0
 800555e:	460f      	mov	r7, r1
 8005560:	f7fb fb0a 	bl	8000b78 <__aeabi_d2iz>
 8005564:	2200      	movs	r2, #0
 8005566:	4683      	mov	fp, r0
 8005568:	2300      	movs	r3, #0
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	f7fb fac5 	bl	8000afc <__aeabi_dcmplt>
 8005572:	b148      	cbz	r0, 8005588 <_dtoa_r+0x190>
 8005574:	4658      	mov	r0, fp
 8005576:	f7fa ffe5 	bl	8000544 <__aeabi_i2d>
 800557a:	4632      	mov	r2, r6
 800557c:	463b      	mov	r3, r7
 800557e:	f7fb fab3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005582:	b908      	cbnz	r0, 8005588 <_dtoa_r+0x190>
 8005584:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005588:	f1bb 0f16 	cmp.w	fp, #22
 800558c:	d857      	bhi.n	800563e <_dtoa_r+0x246>
 800558e:	4b5b      	ldr	r3, [pc, #364]	; (80056fc <_dtoa_r+0x304>)
 8005590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	ec51 0b18 	vmov	r0, r1, d8
 800559c:	f7fb faae 	bl	8000afc <__aeabi_dcmplt>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d04e      	beq.n	8005642 <_dtoa_r+0x24a>
 80055a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055a8:	2300      	movs	r3, #0
 80055aa:	930c      	str	r3, [sp, #48]	; 0x30
 80055ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055ae:	1b5b      	subs	r3, r3, r5
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	bf45      	ittet	mi
 80055b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80055b8:	9305      	strmi	r3, [sp, #20]
 80055ba:	2300      	movpl	r3, #0
 80055bc:	2300      	movmi	r3, #0
 80055be:	9206      	str	r2, [sp, #24]
 80055c0:	bf54      	ite	pl
 80055c2:	9305      	strpl	r3, [sp, #20]
 80055c4:	9306      	strmi	r3, [sp, #24]
 80055c6:	f1bb 0f00 	cmp.w	fp, #0
 80055ca:	db3c      	blt.n	8005646 <_dtoa_r+0x24e>
 80055cc:	9b06      	ldr	r3, [sp, #24]
 80055ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80055d2:	445b      	add	r3, fp
 80055d4:	9306      	str	r3, [sp, #24]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9308      	str	r3, [sp, #32]
 80055da:	9b07      	ldr	r3, [sp, #28]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d868      	bhi.n	80056b2 <_dtoa_r+0x2ba>
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	bfc4      	itt	gt
 80055e4:	3b04      	subgt	r3, #4
 80055e6:	9307      	strgt	r3, [sp, #28]
 80055e8:	9b07      	ldr	r3, [sp, #28]
 80055ea:	f1a3 0302 	sub.w	r3, r3, #2
 80055ee:	bfcc      	ite	gt
 80055f0:	2500      	movgt	r5, #0
 80055f2:	2501      	movle	r5, #1
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	f200 8085 	bhi.w	8005704 <_dtoa_r+0x30c>
 80055fa:	e8df f003 	tbb	[pc, r3]
 80055fe:	3b2e      	.short	0x3b2e
 8005600:	5839      	.short	0x5839
 8005602:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005606:	441d      	add	r5, r3
 8005608:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800560c:	2b20      	cmp	r3, #32
 800560e:	bfc1      	itttt	gt
 8005610:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005614:	fa08 f803 	lslgt.w	r8, r8, r3
 8005618:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800561c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005620:	bfd6      	itet	le
 8005622:	f1c3 0320 	rsble	r3, r3, #32
 8005626:	ea48 0003 	orrgt.w	r0, r8, r3
 800562a:	fa06 f003 	lslle.w	r0, r6, r3
 800562e:	f7fa ff79 	bl	8000524 <__aeabi_ui2d>
 8005632:	2201      	movs	r2, #1
 8005634:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005638:	3d01      	subs	r5, #1
 800563a:	920e      	str	r2, [sp, #56]	; 0x38
 800563c:	e76f      	b.n	800551e <_dtoa_r+0x126>
 800563e:	2301      	movs	r3, #1
 8005640:	e7b3      	b.n	80055aa <_dtoa_r+0x1b2>
 8005642:	900c      	str	r0, [sp, #48]	; 0x30
 8005644:	e7b2      	b.n	80055ac <_dtoa_r+0x1b4>
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	eba3 030b 	sub.w	r3, r3, fp
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	f1cb 0300 	rsb	r3, fp, #0
 8005652:	9308      	str	r3, [sp, #32]
 8005654:	2300      	movs	r3, #0
 8005656:	930b      	str	r3, [sp, #44]	; 0x2c
 8005658:	e7bf      	b.n	80055da <_dtoa_r+0x1e2>
 800565a:	2300      	movs	r3, #0
 800565c:	9309      	str	r3, [sp, #36]	; 0x24
 800565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc52      	bgt.n	800570a <_dtoa_r+0x312>
 8005664:	2301      	movs	r3, #1
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	9304      	str	r3, [sp, #16]
 800566a:	461a      	mov	r2, r3
 800566c:	920a      	str	r2, [sp, #40]	; 0x28
 800566e:	e00b      	b.n	8005688 <_dtoa_r+0x290>
 8005670:	2301      	movs	r3, #1
 8005672:	e7f3      	b.n	800565c <_dtoa_r+0x264>
 8005674:	2300      	movs	r3, #0
 8005676:	9309      	str	r3, [sp, #36]	; 0x24
 8005678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567a:	445b      	add	r3, fp
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	3301      	adds	r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	bfb8      	it	lt
 8005686:	2301      	movlt	r3, #1
 8005688:	69e0      	ldr	r0, [r4, #28]
 800568a:	2100      	movs	r1, #0
 800568c:	2204      	movs	r2, #4
 800568e:	f102 0614 	add.w	r6, r2, #20
 8005692:	429e      	cmp	r6, r3
 8005694:	d93d      	bls.n	8005712 <_dtoa_r+0x31a>
 8005696:	6041      	str	r1, [r0, #4]
 8005698:	4620      	mov	r0, r4
 800569a:	f000 fd9f 	bl	80061dc <_Balloc>
 800569e:	9000      	str	r0, [sp, #0]
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d139      	bne.n	8005718 <_dtoa_r+0x320>
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <_dtoa_r+0x308>)
 80056a6:	4602      	mov	r2, r0
 80056a8:	f240 11af 	movw	r1, #431	; 0x1af
 80056ac:	e6bd      	b.n	800542a <_dtoa_r+0x32>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e7e1      	b.n	8005676 <_dtoa_r+0x27e>
 80056b2:	2501      	movs	r5, #1
 80056b4:	2300      	movs	r3, #0
 80056b6:	9307      	str	r3, [sp, #28]
 80056b8:	9509      	str	r5, [sp, #36]	; 0x24
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2312      	movs	r3, #18
 80056c6:	e7d1      	b.n	800566c <_dtoa_r+0x274>
 80056c8:	636f4361 	.word	0x636f4361
 80056cc:	3fd287a7 	.word	0x3fd287a7
 80056d0:	8b60c8b3 	.word	0x8b60c8b3
 80056d4:	3fc68a28 	.word	0x3fc68a28
 80056d8:	509f79fb 	.word	0x509f79fb
 80056dc:	3fd34413 	.word	0x3fd34413
 80056e0:	080089c6 	.word	0x080089c6
 80056e4:	080089dd 	.word	0x080089dd
 80056e8:	7ff00000 	.word	0x7ff00000
 80056ec:	080089c2 	.word	0x080089c2
 80056f0:	080089b9 	.word	0x080089b9
 80056f4:	08008991 	.word	0x08008991
 80056f8:	3ff80000 	.word	0x3ff80000
 80056fc:	08008ac8 	.word	0x08008ac8
 8005700:	08008a35 	.word	0x08008a35
 8005704:	2301      	movs	r3, #1
 8005706:	9309      	str	r3, [sp, #36]	; 0x24
 8005708:	e7d7      	b.n	80056ba <_dtoa_r+0x2c2>
 800570a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	e7ba      	b.n	8005688 <_dtoa_r+0x290>
 8005712:	3101      	adds	r1, #1
 8005714:	0052      	lsls	r2, r2, #1
 8005716:	e7ba      	b.n	800568e <_dtoa_r+0x296>
 8005718:	69e3      	ldr	r3, [r4, #28]
 800571a:	9a00      	ldr	r2, [sp, #0]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	2b0e      	cmp	r3, #14
 8005722:	f200 80a8 	bhi.w	8005876 <_dtoa_r+0x47e>
 8005726:	2d00      	cmp	r5, #0
 8005728:	f000 80a5 	beq.w	8005876 <_dtoa_r+0x47e>
 800572c:	f1bb 0f00 	cmp.w	fp, #0
 8005730:	dd38      	ble.n	80057a4 <_dtoa_r+0x3ac>
 8005732:	4bc0      	ldr	r3, [pc, #768]	; (8005a34 <_dtoa_r+0x63c>)
 8005734:	f00b 020f 	and.w	r2, fp, #15
 8005738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800573c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005740:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005744:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005748:	d019      	beq.n	800577e <_dtoa_r+0x386>
 800574a:	4bbb      	ldr	r3, [pc, #748]	; (8005a38 <_dtoa_r+0x640>)
 800574c:	ec51 0b18 	vmov	r0, r1, d8
 8005750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005754:	f7fb f88a 	bl	800086c <__aeabi_ddiv>
 8005758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800575c:	f008 080f 	and.w	r8, r8, #15
 8005760:	2503      	movs	r5, #3
 8005762:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005a38 <_dtoa_r+0x640>
 8005766:	f1b8 0f00 	cmp.w	r8, #0
 800576a:	d10a      	bne.n	8005782 <_dtoa_r+0x38a>
 800576c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	f7fb f87a 	bl	800086c <__aeabi_ddiv>
 8005778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577c:	e02b      	b.n	80057d6 <_dtoa_r+0x3de>
 800577e:	2502      	movs	r5, #2
 8005780:	e7ef      	b.n	8005762 <_dtoa_r+0x36a>
 8005782:	f018 0f01 	tst.w	r8, #1
 8005786:	d008      	beq.n	800579a <_dtoa_r+0x3a2>
 8005788:	4630      	mov	r0, r6
 800578a:	4639      	mov	r1, r7
 800578c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005790:	f7fa ff42 	bl	8000618 <__aeabi_dmul>
 8005794:	3501      	adds	r5, #1
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800579e:	f109 0908 	add.w	r9, r9, #8
 80057a2:	e7e0      	b.n	8005766 <_dtoa_r+0x36e>
 80057a4:	f000 809f 	beq.w	80058e6 <_dtoa_r+0x4ee>
 80057a8:	f1cb 0600 	rsb	r6, fp, #0
 80057ac:	4ba1      	ldr	r3, [pc, #644]	; (8005a34 <_dtoa_r+0x63c>)
 80057ae:	4fa2      	ldr	r7, [pc, #648]	; (8005a38 <_dtoa_r+0x640>)
 80057b0:	f006 020f 	and.w	r2, r6, #15
 80057b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	ec51 0b18 	vmov	r0, r1, d8
 80057c0:	f7fa ff2a 	bl	8000618 <__aeabi_dmul>
 80057c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c8:	1136      	asrs	r6, r6, #4
 80057ca:	2300      	movs	r3, #0
 80057cc:	2502      	movs	r5, #2
 80057ce:	2e00      	cmp	r6, #0
 80057d0:	d17e      	bne.n	80058d0 <_dtoa_r+0x4d8>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1d0      	bne.n	8005778 <_dtoa_r+0x380>
 80057d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8084 	beq.w	80058ea <_dtoa_r+0x4f2>
 80057e2:	4b96      	ldr	r3, [pc, #600]	; (8005a3c <_dtoa_r+0x644>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fb f987 	bl	8000afc <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d07b      	beq.n	80058ea <_dtoa_r+0x4f2>
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d078      	beq.n	80058ea <_dtoa_r+0x4f2>
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dd39      	ble.n	8005872 <_dtoa_r+0x47a>
 80057fe:	4b90      	ldr	r3, [pc, #576]	; (8005a40 <_dtoa_r+0x648>)
 8005800:	2200      	movs	r2, #0
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	f7fa ff07 	bl	8000618 <__aeabi_dmul>
 800580a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580e:	9e01      	ldr	r6, [sp, #4]
 8005810:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005814:	3501      	adds	r5, #1
 8005816:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800581a:	4628      	mov	r0, r5
 800581c:	f7fa fe92 	bl	8000544 <__aeabi_i2d>
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	f7fa fef8 	bl	8000618 <__aeabi_dmul>
 8005828:	4b86      	ldr	r3, [pc, #536]	; (8005a44 <_dtoa_r+0x64c>)
 800582a:	2200      	movs	r2, #0
 800582c:	f7fa fd3e 	bl	80002ac <__adddf3>
 8005830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005838:	9303      	str	r3, [sp, #12]
 800583a:	2e00      	cmp	r6, #0
 800583c:	d158      	bne.n	80058f0 <_dtoa_r+0x4f8>
 800583e:	4b82      	ldr	r3, [pc, #520]	; (8005a48 <_dtoa_r+0x650>)
 8005840:	2200      	movs	r2, #0
 8005842:	4640      	mov	r0, r8
 8005844:	4649      	mov	r1, r9
 8005846:	f7fa fd2f 	bl	80002a8 <__aeabi_dsub>
 800584a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800584e:	4680      	mov	r8, r0
 8005850:	4689      	mov	r9, r1
 8005852:	f7fb f971 	bl	8000b38 <__aeabi_dcmpgt>
 8005856:	2800      	cmp	r0, #0
 8005858:	f040 8296 	bne.w	8005d88 <_dtoa_r+0x990>
 800585c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005860:	4640      	mov	r0, r8
 8005862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005866:	4649      	mov	r1, r9
 8005868:	f7fb f948 	bl	8000afc <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 8289 	bne.w	8005d84 <_dtoa_r+0x98c>
 8005872:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005878:	2b00      	cmp	r3, #0
 800587a:	f2c0 814e 	blt.w	8005b1a <_dtoa_r+0x722>
 800587e:	f1bb 0f0e 	cmp.w	fp, #14
 8005882:	f300 814a 	bgt.w	8005b1a <_dtoa_r+0x722>
 8005886:	4b6b      	ldr	r3, [pc, #428]	; (8005a34 <_dtoa_r+0x63c>)
 8005888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800588c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	f280 80dc 	bge.w	8005a50 <_dtoa_r+0x658>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f300 80d8 	bgt.w	8005a50 <_dtoa_r+0x658>
 80058a0:	f040 826f 	bne.w	8005d82 <_dtoa_r+0x98a>
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <_dtoa_r+0x650>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fa feb4 	bl	8000618 <__aeabi_dmul>
 80058b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b4:	f7fb f936 	bl	8000b24 <__aeabi_dcmpge>
 80058b8:	9e04      	ldr	r6, [sp, #16]
 80058ba:	4637      	mov	r7, r6
 80058bc:	2800      	cmp	r0, #0
 80058be:	f040 8245 	bne.w	8005d4c <_dtoa_r+0x954>
 80058c2:	9d00      	ldr	r5, [sp, #0]
 80058c4:	2331      	movs	r3, #49	; 0x31
 80058c6:	f805 3b01 	strb.w	r3, [r5], #1
 80058ca:	f10b 0b01 	add.w	fp, fp, #1
 80058ce:	e241      	b.n	8005d54 <_dtoa_r+0x95c>
 80058d0:	07f2      	lsls	r2, r6, #31
 80058d2:	d505      	bpl.n	80058e0 <_dtoa_r+0x4e8>
 80058d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d8:	f7fa fe9e 	bl	8000618 <__aeabi_dmul>
 80058dc:	3501      	adds	r5, #1
 80058de:	2301      	movs	r3, #1
 80058e0:	1076      	asrs	r6, r6, #1
 80058e2:	3708      	adds	r7, #8
 80058e4:	e773      	b.n	80057ce <_dtoa_r+0x3d6>
 80058e6:	2502      	movs	r5, #2
 80058e8:	e775      	b.n	80057d6 <_dtoa_r+0x3de>
 80058ea:	9e04      	ldr	r6, [sp, #16]
 80058ec:	465f      	mov	r7, fp
 80058ee:	e792      	b.n	8005816 <_dtoa_r+0x41e>
 80058f0:	9900      	ldr	r1, [sp, #0]
 80058f2:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <_dtoa_r+0x63c>)
 80058f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058f8:	4431      	add	r1, r6
 80058fa:	9102      	str	r1, [sp, #8]
 80058fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058fe:	eeb0 9a47 	vmov.f32	s18, s14
 8005902:	eef0 9a67 	vmov.f32	s19, s15
 8005906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800590a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800590e:	2900      	cmp	r1, #0
 8005910:	d044      	beq.n	800599c <_dtoa_r+0x5a4>
 8005912:	494e      	ldr	r1, [pc, #312]	; (8005a4c <_dtoa_r+0x654>)
 8005914:	2000      	movs	r0, #0
 8005916:	f7fa ffa9 	bl	800086c <__aeabi_ddiv>
 800591a:	ec53 2b19 	vmov	r2, r3, d9
 800591e:	f7fa fcc3 	bl	80002a8 <__aeabi_dsub>
 8005922:	9d00      	ldr	r5, [sp, #0]
 8005924:	ec41 0b19 	vmov	d9, r0, r1
 8005928:	4649      	mov	r1, r9
 800592a:	4640      	mov	r0, r8
 800592c:	f7fb f924 	bl	8000b78 <__aeabi_d2iz>
 8005930:	4606      	mov	r6, r0
 8005932:	f7fa fe07 	bl	8000544 <__aeabi_i2d>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4640      	mov	r0, r8
 800593c:	4649      	mov	r1, r9
 800593e:	f7fa fcb3 	bl	80002a8 <__aeabi_dsub>
 8005942:	3630      	adds	r6, #48	; 0x30
 8005944:	f805 6b01 	strb.w	r6, [r5], #1
 8005948:	ec53 2b19 	vmov	r2, r3, d9
 800594c:	4680      	mov	r8, r0
 800594e:	4689      	mov	r9, r1
 8005950:	f7fb f8d4 	bl	8000afc <__aeabi_dcmplt>
 8005954:	2800      	cmp	r0, #0
 8005956:	d164      	bne.n	8005a22 <_dtoa_r+0x62a>
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	4937      	ldr	r1, [pc, #220]	; (8005a3c <_dtoa_r+0x644>)
 800595e:	2000      	movs	r0, #0
 8005960:	f7fa fca2 	bl	80002a8 <__aeabi_dsub>
 8005964:	ec53 2b19 	vmov	r2, r3, d9
 8005968:	f7fb f8c8 	bl	8000afc <__aeabi_dcmplt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 80b6 	bne.w	8005ade <_dtoa_r+0x6e6>
 8005972:	9b02      	ldr	r3, [sp, #8]
 8005974:	429d      	cmp	r5, r3
 8005976:	f43f af7c 	beq.w	8005872 <_dtoa_r+0x47a>
 800597a:	4b31      	ldr	r3, [pc, #196]	; (8005a40 <_dtoa_r+0x648>)
 800597c:	ec51 0b19 	vmov	r0, r1, d9
 8005980:	2200      	movs	r2, #0
 8005982:	f7fa fe49 	bl	8000618 <__aeabi_dmul>
 8005986:	4b2e      	ldr	r3, [pc, #184]	; (8005a40 <_dtoa_r+0x648>)
 8005988:	ec41 0b19 	vmov	d9, r0, r1
 800598c:	2200      	movs	r2, #0
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fe41 	bl	8000618 <__aeabi_dmul>
 8005996:	4680      	mov	r8, r0
 8005998:	4689      	mov	r9, r1
 800599a:	e7c5      	b.n	8005928 <_dtoa_r+0x530>
 800599c:	ec51 0b17 	vmov	r0, r1, d7
 80059a0:	f7fa fe3a 	bl	8000618 <__aeabi_dmul>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	9d00      	ldr	r5, [sp, #0]
 80059a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80059aa:	ec41 0b19 	vmov	d9, r0, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	f7fb f8e1 	bl	8000b78 <__aeabi_d2iz>
 80059b6:	4606      	mov	r6, r0
 80059b8:	f7fa fdc4 	bl	8000544 <__aeabi_i2d>
 80059bc:	3630      	adds	r6, #48	; 0x30
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4640      	mov	r0, r8
 80059c4:	4649      	mov	r1, r9
 80059c6:	f7fa fc6f 	bl	80002a8 <__aeabi_dsub>
 80059ca:	f805 6b01 	strb.w	r6, [r5], #1
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	429d      	cmp	r5, r3
 80059d2:	4680      	mov	r8, r0
 80059d4:	4689      	mov	r9, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	d124      	bne.n	8005a26 <_dtoa_r+0x62e>
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <_dtoa_r+0x654>)
 80059de:	ec51 0b19 	vmov	r0, r1, d9
 80059e2:	f7fa fc63 	bl	80002ac <__adddf3>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	f7fb f8a3 	bl	8000b38 <__aeabi_dcmpgt>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d173      	bne.n	8005ade <_dtoa_r+0x6e6>
 80059f6:	ec53 2b19 	vmov	r2, r3, d9
 80059fa:	4914      	ldr	r1, [pc, #80]	; (8005a4c <_dtoa_r+0x654>)
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7fa fc53 	bl	80002a8 <__aeabi_dsub>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4640      	mov	r0, r8
 8005a08:	4649      	mov	r1, r9
 8005a0a:	f7fb f877 	bl	8000afc <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f43f af2f 	beq.w	8005872 <_dtoa_r+0x47a>
 8005a14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005a16:	1e6b      	subs	r3, r5, #1
 8005a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d0f8      	beq.n	8005a14 <_dtoa_r+0x61c>
 8005a22:	46bb      	mov	fp, r7
 8005a24:	e04a      	b.n	8005abc <_dtoa_r+0x6c4>
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <_dtoa_r+0x648>)
 8005a28:	f7fa fdf6 	bl	8000618 <__aeabi_dmul>
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4689      	mov	r9, r1
 8005a30:	e7bd      	b.n	80059ae <_dtoa_r+0x5b6>
 8005a32:	bf00      	nop
 8005a34:	08008ac8 	.word	0x08008ac8
 8005a38:	08008aa0 	.word	0x08008aa0
 8005a3c:	3ff00000 	.word	0x3ff00000
 8005a40:	40240000 	.word	0x40240000
 8005a44:	401c0000 	.word	0x401c0000
 8005a48:	40140000 	.word	0x40140000
 8005a4c:	3fe00000 	.word	0x3fe00000
 8005a50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a54:	9d00      	ldr	r5, [sp, #0]
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	f7fa ff05 	bl	800086c <__aeabi_ddiv>
 8005a62:	f7fb f889 	bl	8000b78 <__aeabi_d2iz>
 8005a66:	9001      	str	r0, [sp, #4]
 8005a68:	f7fa fd6c 	bl	8000544 <__aeabi_i2d>
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	f7fa fdd2 	bl	8000618 <__aeabi_dmul>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	f7fa fc14 	bl	80002a8 <__aeabi_dsub>
 8005a80:	9e01      	ldr	r6, [sp, #4]
 8005a82:	9f04      	ldr	r7, [sp, #16]
 8005a84:	3630      	adds	r6, #48	; 0x30
 8005a86:	f805 6b01 	strb.w	r6, [r5], #1
 8005a8a:	9e00      	ldr	r6, [sp, #0]
 8005a8c:	1bae      	subs	r6, r5, r6
 8005a8e:	42b7      	cmp	r7, r6
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	d134      	bne.n	8005b00 <_dtoa_r+0x708>
 8005a96:	f7fa fc09 	bl	80002ac <__adddf3>
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460f      	mov	r7, r1
 8005aa2:	f7fb f849 	bl	8000b38 <__aeabi_dcmpgt>
 8005aa6:	b9c8      	cbnz	r0, 8005adc <_dtoa_r+0x6e4>
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	4630      	mov	r0, r6
 8005aae:	4639      	mov	r1, r7
 8005ab0:	f7fb f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ab4:	b110      	cbz	r0, 8005abc <_dtoa_r+0x6c4>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	07db      	lsls	r3, r3, #31
 8005aba:	d40f      	bmi.n	8005adc <_dtoa_r+0x6e4>
 8005abc:	4651      	mov	r1, sl
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fbcc 	bl	800625c <_Bfree>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ac8:	702b      	strb	r3, [r5, #0]
 8005aca:	f10b 0301 	add.w	r3, fp, #1
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f43f ace2 	beq.w	800549c <_dtoa_r+0xa4>
 8005ad8:	601d      	str	r5, [r3, #0]
 8005ada:	e4df      	b.n	800549c <_dtoa_r+0xa4>
 8005adc:	465f      	mov	r7, fp
 8005ade:	462b      	mov	r3, r5
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ae6:	2a39      	cmp	r2, #57	; 0x39
 8005ae8:	d106      	bne.n	8005af8 <_dtoa_r+0x700>
 8005aea:	9a00      	ldr	r2, [sp, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1f7      	bne.n	8005ae0 <_dtoa_r+0x6e8>
 8005af0:	9900      	ldr	r1, [sp, #0]
 8005af2:	2230      	movs	r2, #48	; 0x30
 8005af4:	3701      	adds	r7, #1
 8005af6:	700a      	strb	r2, [r1, #0]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	3201      	adds	r2, #1
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e790      	b.n	8005a22 <_dtoa_r+0x62a>
 8005b00:	4ba3      	ldr	r3, [pc, #652]	; (8005d90 <_dtoa_r+0x998>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	f7fa fd88 	bl	8000618 <__aeabi_dmul>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	f7fa ffea 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d09e      	beq.n	8005a56 <_dtoa_r+0x65e>
 8005b18:	e7d0      	b.n	8005abc <_dtoa_r+0x6c4>
 8005b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	f000 80ca 	beq.w	8005cb6 <_dtoa_r+0x8be>
 8005b22:	9a07      	ldr	r2, [sp, #28]
 8005b24:	2a01      	cmp	r2, #1
 8005b26:	f300 80ad 	bgt.w	8005c84 <_dtoa_r+0x88c>
 8005b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	f000 80a5 	beq.w	8005c7c <_dtoa_r+0x884>
 8005b32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b36:	9e08      	ldr	r6, [sp, #32]
 8005b38:	9d05      	ldr	r5, [sp, #20]
 8005b3a:	9a05      	ldr	r2, [sp, #20]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	9205      	str	r2, [sp, #20]
 8005b40:	9a06      	ldr	r2, [sp, #24]
 8005b42:	2101      	movs	r1, #1
 8005b44:	441a      	add	r2, r3
 8005b46:	4620      	mov	r0, r4
 8005b48:	9206      	str	r2, [sp, #24]
 8005b4a:	f000 fc87 	bl	800645c <__i2b>
 8005b4e:	4607      	mov	r7, r0
 8005b50:	b165      	cbz	r5, 8005b6c <_dtoa_r+0x774>
 8005b52:	9b06      	ldr	r3, [sp, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dd09      	ble.n	8005b6c <_dtoa_r+0x774>
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	9a05      	ldr	r2, [sp, #20]
 8005b5c:	bfa8      	it	ge
 8005b5e:	462b      	movge	r3, r5
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	9205      	str	r2, [sp, #20]
 8005b64:	9a06      	ldr	r2, [sp, #24]
 8005b66:	1aed      	subs	r5, r5, r3
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	9306      	str	r3, [sp, #24]
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	b1f3      	cbz	r3, 8005bae <_dtoa_r+0x7b6>
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80a3 	beq.w	8005cbe <_dtoa_r+0x8c6>
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	dd10      	ble.n	8005b9e <_dtoa_r+0x7a6>
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4632      	mov	r2, r6
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 fd2b 	bl	80065dc <__pow5mult>
 8005b86:	4652      	mov	r2, sl
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fc7b 	bl	8006488 <__multiply>
 8005b92:	4651      	mov	r1, sl
 8005b94:	4680      	mov	r8, r0
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fb60 	bl	800625c <_Bfree>
 8005b9c:	46c2      	mov	sl, r8
 8005b9e:	9b08      	ldr	r3, [sp, #32]
 8005ba0:	1b9a      	subs	r2, r3, r6
 8005ba2:	d004      	beq.n	8005bae <_dtoa_r+0x7b6>
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fd18 	bl	80065dc <__pow5mult>
 8005bac:	4682      	mov	sl, r0
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 fc53 	bl	800645c <__i2b>
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	4606      	mov	r6, r0
 8005bbc:	f340 8081 	ble.w	8005cc2 <_dtoa_r+0x8ca>
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fd09 	bl	80065dc <__pow5mult>
 8005bca:	9b07      	ldr	r3, [sp, #28]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	4606      	mov	r6, r0
 8005bd0:	dd7a      	ble.n	8005cc8 <_dtoa_r+0x8d0>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	6933      	ldr	r3, [r6, #16]
 8005bd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005bdc:	6918      	ldr	r0, [r3, #16]
 8005bde:	f000 fbef 	bl	80063c0 <__hi0bits>
 8005be2:	f1c0 0020 	rsb	r0, r0, #32
 8005be6:	9b06      	ldr	r3, [sp, #24]
 8005be8:	4418      	add	r0, r3
 8005bea:	f010 001f 	ands.w	r0, r0, #31
 8005bee:	f000 8094 	beq.w	8005d1a <_dtoa_r+0x922>
 8005bf2:	f1c0 0320 	rsb	r3, r0, #32
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	f340 8085 	ble.w	8005d06 <_dtoa_r+0x90e>
 8005bfc:	9b05      	ldr	r3, [sp, #20]
 8005bfe:	f1c0 001c 	rsb	r0, r0, #28
 8005c02:	4403      	add	r3, r0
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	9b06      	ldr	r3, [sp, #24]
 8005c08:	4403      	add	r3, r0
 8005c0a:	4405      	add	r5, r0
 8005c0c:	9306      	str	r3, [sp, #24]
 8005c0e:	9b05      	ldr	r3, [sp, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd05      	ble.n	8005c20 <_dtoa_r+0x828>
 8005c14:	4651      	mov	r1, sl
 8005c16:	461a      	mov	r2, r3
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fd39 	bl	8006690 <__lshift>
 8005c1e:	4682      	mov	sl, r0
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd05      	ble.n	8005c32 <_dtoa_r+0x83a>
 8005c26:	4631      	mov	r1, r6
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fd30 	bl	8006690 <__lshift>
 8005c30:	4606      	mov	r6, r0
 8005c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d072      	beq.n	8005d1e <_dtoa_r+0x926>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	f000 fd94 	bl	8006768 <__mcmp>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	da6c      	bge.n	8005d1e <_dtoa_r+0x926>
 8005c44:	2300      	movs	r3, #0
 8005c46:	4651      	mov	r1, sl
 8005c48:	220a      	movs	r2, #10
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fb28 	bl	80062a0 <__multadd>
 8005c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c56:	4682      	mov	sl, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 81b0 	beq.w	8005fbe <_dtoa_r+0xbc6>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	4639      	mov	r1, r7
 8005c62:	220a      	movs	r2, #10
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 fb1b 	bl	80062a0 <__multadd>
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	4607      	mov	r7, r0
 8005c70:	f300 8096 	bgt.w	8005da0 <_dtoa_r+0x9a8>
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	dc59      	bgt.n	8005d2e <_dtoa_r+0x936>
 8005c7a:	e091      	b.n	8005da0 <_dtoa_r+0x9a8>
 8005c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c82:	e758      	b.n	8005b36 <_dtoa_r+0x73e>
 8005c84:	9b04      	ldr	r3, [sp, #16]
 8005c86:	1e5e      	subs	r6, r3, #1
 8005c88:	9b08      	ldr	r3, [sp, #32]
 8005c8a:	42b3      	cmp	r3, r6
 8005c8c:	bfbf      	itttt	lt
 8005c8e:	9b08      	ldrlt	r3, [sp, #32]
 8005c90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005c92:	9608      	strlt	r6, [sp, #32]
 8005c94:	1af3      	sublt	r3, r6, r3
 8005c96:	bfb4      	ite	lt
 8005c98:	18d2      	addlt	r2, r2, r3
 8005c9a:	1b9e      	subge	r6, r3, r6
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	bfbc      	itt	lt
 8005ca0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005ca2:	2600      	movlt	r6, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb7      	itett	lt
 8005ca8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005cac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005cb0:	1a9d      	sublt	r5, r3, r2
 8005cb2:	2300      	movlt	r3, #0
 8005cb4:	e741      	b.n	8005b3a <_dtoa_r+0x742>
 8005cb6:	9e08      	ldr	r6, [sp, #32]
 8005cb8:	9d05      	ldr	r5, [sp, #20]
 8005cba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005cbc:	e748      	b.n	8005b50 <_dtoa_r+0x758>
 8005cbe:	9a08      	ldr	r2, [sp, #32]
 8005cc0:	e770      	b.n	8005ba4 <_dtoa_r+0x7ac>
 8005cc2:	9b07      	ldr	r3, [sp, #28]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	dc19      	bgt.n	8005cfc <_dtoa_r+0x904>
 8005cc8:	9b02      	ldr	r3, [sp, #8]
 8005cca:	b9bb      	cbnz	r3, 8005cfc <_dtoa_r+0x904>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd2:	b99b      	cbnz	r3, 8005cfc <_dtoa_r+0x904>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	0d1b      	lsrs	r3, r3, #20
 8005cdc:	051b      	lsls	r3, r3, #20
 8005cde:	b183      	cbz	r3, 8005d02 <_dtoa_r+0x90a>
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	9306      	str	r3, [sp, #24]
 8005cec:	f04f 0801 	mov.w	r8, #1
 8005cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f47f af6f 	bne.w	8005bd6 <_dtoa_r+0x7de>
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e774      	b.n	8005be6 <_dtoa_r+0x7ee>
 8005cfc:	f04f 0800 	mov.w	r8, #0
 8005d00:	e7f6      	b.n	8005cf0 <_dtoa_r+0x8f8>
 8005d02:	4698      	mov	r8, r3
 8005d04:	e7f4      	b.n	8005cf0 <_dtoa_r+0x8f8>
 8005d06:	d082      	beq.n	8005c0e <_dtoa_r+0x816>
 8005d08:	9a05      	ldr	r2, [sp, #20]
 8005d0a:	331c      	adds	r3, #28
 8005d0c:	441a      	add	r2, r3
 8005d0e:	9205      	str	r2, [sp, #20]
 8005d10:	9a06      	ldr	r2, [sp, #24]
 8005d12:	441a      	add	r2, r3
 8005d14:	441d      	add	r5, r3
 8005d16:	9206      	str	r2, [sp, #24]
 8005d18:	e779      	b.n	8005c0e <_dtoa_r+0x816>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	e7f4      	b.n	8005d08 <_dtoa_r+0x910>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dc37      	bgt.n	8005d94 <_dtoa_r+0x99c>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	dd34      	ble.n	8005d94 <_dtoa_r+0x99c>
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	b963      	cbnz	r3, 8005d4c <_dtoa_r+0x954>
 8005d32:	4631      	mov	r1, r6
 8005d34:	2205      	movs	r2, #5
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 fab2 	bl	80062a0 <__multadd>
 8005d3c:	4601      	mov	r1, r0
 8005d3e:	4606      	mov	r6, r0
 8005d40:	4650      	mov	r0, sl
 8005d42:	f000 fd11 	bl	8006768 <__mcmp>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f73f adbb 	bgt.w	80058c2 <_dtoa_r+0x4ca>
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4e:	9d00      	ldr	r5, [sp, #0]
 8005d50:	ea6f 0b03 	mvn.w	fp, r3
 8005d54:	f04f 0800 	mov.w	r8, #0
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fa7e 	bl	800625c <_Bfree>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f43f aeab 	beq.w	8005abc <_dtoa_r+0x6c4>
 8005d66:	f1b8 0f00 	cmp.w	r8, #0
 8005d6a:	d005      	beq.n	8005d78 <_dtoa_r+0x980>
 8005d6c:	45b8      	cmp	r8, r7
 8005d6e:	d003      	beq.n	8005d78 <_dtoa_r+0x980>
 8005d70:	4641      	mov	r1, r8
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fa72 	bl	800625c <_Bfree>
 8005d78:	4639      	mov	r1, r7
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fa6e 	bl	800625c <_Bfree>
 8005d80:	e69c      	b.n	8005abc <_dtoa_r+0x6c4>
 8005d82:	2600      	movs	r6, #0
 8005d84:	4637      	mov	r7, r6
 8005d86:	e7e1      	b.n	8005d4c <_dtoa_r+0x954>
 8005d88:	46bb      	mov	fp, r7
 8005d8a:	4637      	mov	r7, r6
 8005d8c:	e599      	b.n	80058c2 <_dtoa_r+0x4ca>
 8005d8e:	bf00      	nop
 8005d90:	40240000 	.word	0x40240000
 8005d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80c8 	beq.w	8005f2c <_dtoa_r+0xb34>
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	dd05      	ble.n	8005db0 <_dtoa_r+0x9b8>
 8005da4:	4639      	mov	r1, r7
 8005da6:	462a      	mov	r2, r5
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fc71 	bl	8006690 <__lshift>
 8005dae:	4607      	mov	r7, r0
 8005db0:	f1b8 0f00 	cmp.w	r8, #0
 8005db4:	d05b      	beq.n	8005e6e <_dtoa_r+0xa76>
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 fa0f 	bl	80061dc <_Balloc>
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	b928      	cbnz	r0, 8005dce <_dtoa_r+0x9d6>
 8005dc2:	4b83      	ldr	r3, [pc, #524]	; (8005fd0 <_dtoa_r+0xbd8>)
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005dca:	f7ff bb2e 	b.w	800542a <_dtoa_r+0x32>
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	3202      	adds	r2, #2
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	f107 010c 	add.w	r1, r7, #12
 8005dd8:	300c      	adds	r0, #12
 8005dda:	f002 f94d 	bl	8008078 <memcpy>
 8005dde:	2201      	movs	r2, #1
 8005de0:	4629      	mov	r1, r5
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 fc54 	bl	8006690 <__lshift>
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005df2:	4413      	add	r3, r2
 8005df4:	9308      	str	r3, [sp, #32]
 8005df6:	9b02      	ldr	r3, [sp, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	46b8      	mov	r8, r7
 8005dfe:	9306      	str	r3, [sp, #24]
 8005e00:	4607      	mov	r7, r0
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	4631      	mov	r1, r6
 8005e06:	3b01      	subs	r3, #1
 8005e08:	4650      	mov	r0, sl
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	f7ff fa6c 	bl	80052e8 <quorem>
 8005e10:	4641      	mov	r1, r8
 8005e12:	9002      	str	r0, [sp, #8]
 8005e14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f000 fca5 	bl	8006768 <__mcmp>
 8005e1e:	463a      	mov	r2, r7
 8005e20:	9005      	str	r0, [sp, #20]
 8005e22:	4631      	mov	r1, r6
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 fcbb 	bl	80067a0 <__mdiff>
 8005e2a:	68c2      	ldr	r2, [r0, #12]
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	bb02      	cbnz	r2, 8005e72 <_dtoa_r+0xa7a>
 8005e30:	4601      	mov	r1, r0
 8005e32:	4650      	mov	r0, sl
 8005e34:	f000 fc98 	bl	8006768 <__mcmp>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e40:	f000 fa0c 	bl	800625c <_Bfree>
 8005e44:	9b07      	ldr	r3, [sp, #28]
 8005e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e48:	9d04      	ldr	r5, [sp, #16]
 8005e4a:	ea43 0102 	orr.w	r1, r3, r2
 8005e4e:	9b06      	ldr	r3, [sp, #24]
 8005e50:	4319      	orrs	r1, r3
 8005e52:	d110      	bne.n	8005e76 <_dtoa_r+0xa7e>
 8005e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e58:	d029      	beq.n	8005eae <_dtoa_r+0xab6>
 8005e5a:	9b05      	ldr	r3, [sp, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dd02      	ble.n	8005e66 <_dtoa_r+0xa6e>
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	f883 9000 	strb.w	r9, [r3]
 8005e6c:	e774      	b.n	8005d58 <_dtoa_r+0x960>
 8005e6e:	4638      	mov	r0, r7
 8005e70:	e7ba      	b.n	8005de8 <_dtoa_r+0x9f0>
 8005e72:	2201      	movs	r2, #1
 8005e74:	e7e1      	b.n	8005e3a <_dtoa_r+0xa42>
 8005e76:	9b05      	ldr	r3, [sp, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db04      	blt.n	8005e86 <_dtoa_r+0xa8e>
 8005e7c:	9907      	ldr	r1, [sp, #28]
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	9906      	ldr	r1, [sp, #24]
 8005e82:	430b      	orrs	r3, r1
 8005e84:	d120      	bne.n	8005ec8 <_dtoa_r+0xad0>
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	dded      	ble.n	8005e66 <_dtoa_r+0xa6e>
 8005e8a:	4651      	mov	r1, sl
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fbfe 	bl	8006690 <__lshift>
 8005e94:	4631      	mov	r1, r6
 8005e96:	4682      	mov	sl, r0
 8005e98:	f000 fc66 	bl	8006768 <__mcmp>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	dc03      	bgt.n	8005ea8 <_dtoa_r+0xab0>
 8005ea0:	d1e1      	bne.n	8005e66 <_dtoa_r+0xa6e>
 8005ea2:	f019 0f01 	tst.w	r9, #1
 8005ea6:	d0de      	beq.n	8005e66 <_dtoa_r+0xa6e>
 8005ea8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005eac:	d1d8      	bne.n	8005e60 <_dtoa_r+0xa68>
 8005eae:	9a01      	ldr	r2, [sp, #4]
 8005eb0:	2339      	movs	r3, #57	; 0x39
 8005eb2:	7013      	strb	r3, [r2, #0]
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ebe:	2a39      	cmp	r2, #57	; 0x39
 8005ec0:	d06c      	beq.n	8005f9c <_dtoa_r+0xba4>
 8005ec2:	3201      	adds	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e747      	b.n	8005d58 <_dtoa_r+0x960>
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	dd07      	ble.n	8005edc <_dtoa_r+0xae4>
 8005ecc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ed0:	d0ed      	beq.n	8005eae <_dtoa_r+0xab6>
 8005ed2:	9a01      	ldr	r2, [sp, #4]
 8005ed4:	f109 0301 	add.w	r3, r9, #1
 8005ed8:	7013      	strb	r3, [r2, #0]
 8005eda:	e73d      	b.n	8005d58 <_dtoa_r+0x960>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	9a08      	ldr	r2, [sp, #32]
 8005ee0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d043      	beq.n	8005f70 <_dtoa_r+0xb78>
 8005ee8:	4651      	mov	r1, sl
 8005eea:	2300      	movs	r3, #0
 8005eec:	220a      	movs	r2, #10
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 f9d6 	bl	80062a0 <__multadd>
 8005ef4:	45b8      	cmp	r8, r7
 8005ef6:	4682      	mov	sl, r0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	f04f 020a 	mov.w	r2, #10
 8005f00:	4641      	mov	r1, r8
 8005f02:	4620      	mov	r0, r4
 8005f04:	d107      	bne.n	8005f16 <_dtoa_r+0xb1e>
 8005f06:	f000 f9cb 	bl	80062a0 <__multadd>
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	3301      	adds	r3, #1
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	e775      	b.n	8005e02 <_dtoa_r+0xa0a>
 8005f16:	f000 f9c3 	bl	80062a0 <__multadd>
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	220a      	movs	r2, #10
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f9bc 	bl	80062a0 <__multadd>
 8005f28:	4607      	mov	r7, r0
 8005f2a:	e7f0      	b.n	8005f0e <_dtoa_r+0xb16>
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	9d00      	ldr	r5, [sp, #0]
 8005f32:	4631      	mov	r1, r6
 8005f34:	4650      	mov	r0, sl
 8005f36:	f7ff f9d7 	bl	80052e8 <quorem>
 8005f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	f805 9b01 	strb.w	r9, [r5], #1
 8005f44:	1aea      	subs	r2, r5, r3
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	dd07      	ble.n	8005f5c <_dtoa_r+0xb64>
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	2300      	movs	r3, #0
 8005f50:	220a      	movs	r2, #10
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f9a4 	bl	80062a0 <__multadd>
 8005f58:	4682      	mov	sl, r0
 8005f5a:	e7ea      	b.n	8005f32 <_dtoa_r+0xb3a>
 8005f5c:	9b01      	ldr	r3, [sp, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bfc8      	it	gt
 8005f62:	461d      	movgt	r5, r3
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	bfd8      	it	le
 8005f68:	2501      	movle	r5, #1
 8005f6a:	441d      	add	r5, r3
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	4651      	mov	r1, sl
 8005f72:	2201      	movs	r2, #1
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 fb8b 	bl	8006690 <__lshift>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	f000 fbf3 	bl	8006768 <__mcmp>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dc96      	bgt.n	8005eb4 <_dtoa_r+0xabc>
 8005f86:	d102      	bne.n	8005f8e <_dtoa_r+0xb96>
 8005f88:	f019 0f01 	tst.w	r9, #1
 8005f8c:	d192      	bne.n	8005eb4 <_dtoa_r+0xabc>
 8005f8e:	462b      	mov	r3, r5
 8005f90:	461d      	mov	r5, r3
 8005f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f96:	2a30      	cmp	r2, #48	; 0x30
 8005f98:	d0fa      	beq.n	8005f90 <_dtoa_r+0xb98>
 8005f9a:	e6dd      	b.n	8005d58 <_dtoa_r+0x960>
 8005f9c:	9a00      	ldr	r2, [sp, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d189      	bne.n	8005eb6 <_dtoa_r+0xabe>
 8005fa2:	f10b 0b01 	add.w	fp, fp, #1
 8005fa6:	2331      	movs	r3, #49	; 0x31
 8005fa8:	e796      	b.n	8005ed8 <_dtoa_r+0xae0>
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <_dtoa_r+0xbdc>)
 8005fac:	f7ff ba99 	b.w	80054e2 <_dtoa_r+0xea>
 8005fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f47f aa6d 	bne.w	8005492 <_dtoa_r+0x9a>
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <_dtoa_r+0xbe0>)
 8005fba:	f7ff ba92 	b.w	80054e2 <_dtoa_r+0xea>
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dcb5      	bgt.n	8005f30 <_dtoa_r+0xb38>
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	f73f aeb1 	bgt.w	8005d2e <_dtoa_r+0x936>
 8005fcc:	e7b0      	b.n	8005f30 <_dtoa_r+0xb38>
 8005fce:	bf00      	nop
 8005fd0:	08008a35 	.word	0x08008a35
 8005fd4:	08008990 	.word	0x08008990
 8005fd8:	080089b9 	.word	0x080089b9

08005fdc <_free_r>:
 8005fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d044      	beq.n	800606c <_free_r+0x90>
 8005fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe6:	9001      	str	r0, [sp, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f1a1 0404 	sub.w	r4, r1, #4
 8005fee:	bfb8      	it	lt
 8005ff0:	18e4      	addlt	r4, r4, r3
 8005ff2:	f000 f8e7 	bl	80061c4 <__malloc_lock>
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <_free_r+0x94>)
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	b933      	cbnz	r3, 800600c <_free_r+0x30>
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	6014      	str	r4, [r2, #0]
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006008:	f000 b8e2 	b.w	80061d0 <__malloc_unlock>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d908      	bls.n	8006022 <_free_r+0x46>
 8006010:	6825      	ldr	r5, [r4, #0]
 8006012:	1961      	adds	r1, r4, r5
 8006014:	428b      	cmp	r3, r1
 8006016:	bf01      	itttt	eq
 8006018:	6819      	ldreq	r1, [r3, #0]
 800601a:	685b      	ldreq	r3, [r3, #4]
 800601c:	1949      	addeq	r1, r1, r5
 800601e:	6021      	streq	r1, [r4, #0]
 8006020:	e7ed      	b.n	8005ffe <_free_r+0x22>
 8006022:	461a      	mov	r2, r3
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b10b      	cbz	r3, 800602c <_free_r+0x50>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x46>
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	1855      	adds	r5, r2, r1
 8006030:	42a5      	cmp	r5, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x70>
 8006034:	6824      	ldr	r4, [r4, #0]
 8006036:	4421      	add	r1, r4
 8006038:	1854      	adds	r4, r2, r1
 800603a:	42a3      	cmp	r3, r4
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	d1e0      	bne.n	8006002 <_free_r+0x26>
 8006040:	681c      	ldr	r4, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	6053      	str	r3, [r2, #4]
 8006046:	440c      	add	r4, r1
 8006048:	6014      	str	r4, [r2, #0]
 800604a:	e7da      	b.n	8006002 <_free_r+0x26>
 800604c:	d902      	bls.n	8006054 <_free_r+0x78>
 800604e:	230c      	movs	r3, #12
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	e7d6      	b.n	8006002 <_free_r+0x26>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf04      	itt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1949      	addeq	r1, r1, r5
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	6054      	str	r4, [r2, #4]
 800606a:	e7ca      	b.n	8006002 <_free_r+0x26>
 800606c:	b003      	add	sp, #12
 800606e:	bd30      	pop	{r4, r5, pc}
 8006070:	200004fc 	.word	0x200004fc

08006074 <malloc>:
 8006074:	4b02      	ldr	r3, [pc, #8]	; (8006080 <malloc+0xc>)
 8006076:	4601      	mov	r1, r0
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f000 b823 	b.w	80060c4 <_malloc_r>
 800607e:	bf00      	nop
 8006080:	20000064 	.word	0x20000064

08006084 <sbrk_aligned>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4e0e      	ldr	r6, [pc, #56]	; (80060c0 <sbrk_aligned+0x3c>)
 8006088:	460c      	mov	r4, r1
 800608a:	6831      	ldr	r1, [r6, #0]
 800608c:	4605      	mov	r5, r0
 800608e:	b911      	cbnz	r1, 8006096 <sbrk_aligned+0x12>
 8006090:	f001 ffe2 	bl	8008058 <_sbrk_r>
 8006094:	6030      	str	r0, [r6, #0]
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f001 ffdd 	bl	8008058 <_sbrk_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d00a      	beq.n	80060b8 <sbrk_aligned+0x34>
 80060a2:	1cc4      	adds	r4, r0, #3
 80060a4:	f024 0403 	bic.w	r4, r4, #3
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d007      	beq.n	80060bc <sbrk_aligned+0x38>
 80060ac:	1a21      	subs	r1, r4, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	f001 ffd2 	bl	8008058 <_sbrk_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d101      	bne.n	80060bc <sbrk_aligned+0x38>
 80060b8:	f04f 34ff 	mov.w	r4, #4294967295
 80060bc:	4620      	mov	r0, r4
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	20000500 	.word	0x20000500

080060c4 <_malloc_r>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	1ccd      	adds	r5, r1, #3
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	4607      	mov	r7, r0
 80060da:	db01      	blt.n	80060e0 <_malloc_r+0x1c>
 80060dc:	42a9      	cmp	r1, r5
 80060de:	d905      	bls.n	80060ec <_malloc_r+0x28>
 80060e0:	230c      	movs	r3, #12
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	2600      	movs	r6, #0
 80060e6:	4630      	mov	r0, r6
 80060e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061c0 <_malloc_r+0xfc>
 80060f0:	f000 f868 	bl	80061c4 <__malloc_lock>
 80060f4:	f8d8 3000 	ldr.w	r3, [r8]
 80060f8:	461c      	mov	r4, r3
 80060fa:	bb5c      	cbnz	r4, 8006154 <_malloc_r+0x90>
 80060fc:	4629      	mov	r1, r5
 80060fe:	4638      	mov	r0, r7
 8006100:	f7ff ffc0 	bl	8006084 <sbrk_aligned>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	4604      	mov	r4, r0
 8006108:	d155      	bne.n	80061b6 <_malloc_r+0xf2>
 800610a:	f8d8 4000 	ldr.w	r4, [r8]
 800610e:	4626      	mov	r6, r4
 8006110:	2e00      	cmp	r6, #0
 8006112:	d145      	bne.n	80061a0 <_malloc_r+0xdc>
 8006114:	2c00      	cmp	r4, #0
 8006116:	d048      	beq.n	80061aa <_malloc_r+0xe6>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	4631      	mov	r1, r6
 800611c:	4638      	mov	r0, r7
 800611e:	eb04 0903 	add.w	r9, r4, r3
 8006122:	f001 ff99 	bl	8008058 <_sbrk_r>
 8006126:	4581      	cmp	r9, r0
 8006128:	d13f      	bne.n	80061aa <_malloc_r+0xe6>
 800612a:	6821      	ldr	r1, [r4, #0]
 800612c:	1a6d      	subs	r5, r5, r1
 800612e:	4629      	mov	r1, r5
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff ffa7 	bl	8006084 <sbrk_aligned>
 8006136:	3001      	adds	r0, #1
 8006138:	d037      	beq.n	80061aa <_malloc_r+0xe6>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	442b      	add	r3, r5
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	f8d8 3000 	ldr.w	r3, [r8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d038      	beq.n	80061ba <_malloc_r+0xf6>
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	42a2      	cmp	r2, r4
 800614c:	d12b      	bne.n	80061a6 <_malloc_r+0xe2>
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	e00f      	b.n	8006174 <_malloc_r+0xb0>
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	1b52      	subs	r2, r2, r5
 8006158:	d41f      	bmi.n	800619a <_malloc_r+0xd6>
 800615a:	2a0b      	cmp	r2, #11
 800615c:	d917      	bls.n	800618e <_malloc_r+0xca>
 800615e:	1961      	adds	r1, r4, r5
 8006160:	42a3      	cmp	r3, r4
 8006162:	6025      	str	r5, [r4, #0]
 8006164:	bf18      	it	ne
 8006166:	6059      	strne	r1, [r3, #4]
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	bf08      	it	eq
 800616c:	f8c8 1000 	streq.w	r1, [r8]
 8006170:	5162      	str	r2, [r4, r5]
 8006172:	604b      	str	r3, [r1, #4]
 8006174:	4638      	mov	r0, r7
 8006176:	f104 060b 	add.w	r6, r4, #11
 800617a:	f000 f829 	bl	80061d0 <__malloc_unlock>
 800617e:	f026 0607 	bic.w	r6, r6, #7
 8006182:	1d23      	adds	r3, r4, #4
 8006184:	1af2      	subs	r2, r6, r3
 8006186:	d0ae      	beq.n	80060e6 <_malloc_r+0x22>
 8006188:	1b9b      	subs	r3, r3, r6
 800618a:	50a3      	str	r3, [r4, r2]
 800618c:	e7ab      	b.n	80060e6 <_malloc_r+0x22>
 800618e:	42a3      	cmp	r3, r4
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	d1dd      	bne.n	8006150 <_malloc_r+0x8c>
 8006194:	f8c8 2000 	str.w	r2, [r8]
 8006198:	e7ec      	b.n	8006174 <_malloc_r+0xb0>
 800619a:	4623      	mov	r3, r4
 800619c:	6864      	ldr	r4, [r4, #4]
 800619e:	e7ac      	b.n	80060fa <_malloc_r+0x36>
 80061a0:	4634      	mov	r4, r6
 80061a2:	6876      	ldr	r6, [r6, #4]
 80061a4:	e7b4      	b.n	8006110 <_malloc_r+0x4c>
 80061a6:	4613      	mov	r3, r2
 80061a8:	e7cc      	b.n	8006144 <_malloc_r+0x80>
 80061aa:	230c      	movs	r3, #12
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	4638      	mov	r0, r7
 80061b0:	f000 f80e 	bl	80061d0 <__malloc_unlock>
 80061b4:	e797      	b.n	80060e6 <_malloc_r+0x22>
 80061b6:	6025      	str	r5, [r4, #0]
 80061b8:	e7dc      	b.n	8006174 <_malloc_r+0xb0>
 80061ba:	605b      	str	r3, [r3, #4]
 80061bc:	deff      	udf	#255	; 0xff
 80061be:	bf00      	nop
 80061c0:	200004fc 	.word	0x200004fc

080061c4 <__malloc_lock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__malloc_lock+0x8>)
 80061c6:	f7ff b886 	b.w	80052d6 <__retarget_lock_acquire_recursive>
 80061ca:	bf00      	nop
 80061cc:	200004f8 	.word	0x200004f8

080061d0 <__malloc_unlock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__malloc_unlock+0x8>)
 80061d2:	f7ff b881 	b.w	80052d8 <__retarget_lock_release_recursive>
 80061d6:	bf00      	nop
 80061d8:	200004f8 	.word	0x200004f8

080061dc <_Balloc>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	69c6      	ldr	r6, [r0, #28]
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
 80061e4:	b976      	cbnz	r6, 8006204 <_Balloc+0x28>
 80061e6:	2010      	movs	r0, #16
 80061e8:	f7ff ff44 	bl	8006074 <malloc>
 80061ec:	4602      	mov	r2, r0
 80061ee:	61e0      	str	r0, [r4, #28]
 80061f0:	b920      	cbnz	r0, 80061fc <_Balloc+0x20>
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <_Balloc+0x78>)
 80061f4:	4818      	ldr	r0, [pc, #96]	; (8006258 <_Balloc+0x7c>)
 80061f6:	216b      	movs	r1, #107	; 0x6b
 80061f8:	f001 ff56 	bl	80080a8 <__assert_func>
 80061fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006200:	6006      	str	r6, [r0, #0]
 8006202:	60c6      	str	r6, [r0, #12]
 8006204:	69e6      	ldr	r6, [r4, #28]
 8006206:	68f3      	ldr	r3, [r6, #12]
 8006208:	b183      	cbz	r3, 800622c <_Balloc+0x50>
 800620a:	69e3      	ldr	r3, [r4, #28]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006212:	b9b8      	cbnz	r0, 8006244 <_Balloc+0x68>
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f605 	lsl.w	r6, r1, r5
 800621a:	1d72      	adds	r2, r6, #5
 800621c:	0092      	lsls	r2, r2, #2
 800621e:	4620      	mov	r0, r4
 8006220:	f001 ff60 	bl	80080e4 <_calloc_r>
 8006224:	b160      	cbz	r0, 8006240 <_Balloc+0x64>
 8006226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800622a:	e00e      	b.n	800624a <_Balloc+0x6e>
 800622c:	2221      	movs	r2, #33	; 0x21
 800622e:	2104      	movs	r1, #4
 8006230:	4620      	mov	r0, r4
 8006232:	f001 ff57 	bl	80080e4 <_calloc_r>
 8006236:	69e3      	ldr	r3, [r4, #28]
 8006238:	60f0      	str	r0, [r6, #12]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e4      	bne.n	800620a <_Balloc+0x2e>
 8006240:	2000      	movs	r0, #0
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	6802      	ldr	r2, [r0, #0]
 8006246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800624a:	2300      	movs	r3, #0
 800624c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006250:	e7f7      	b.n	8006242 <_Balloc+0x66>
 8006252:	bf00      	nop
 8006254:	080089c6 	.word	0x080089c6
 8006258:	08008a46 	.word	0x08008a46

0800625c <_Bfree>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	69c6      	ldr	r6, [r0, #28]
 8006260:	4605      	mov	r5, r0
 8006262:	460c      	mov	r4, r1
 8006264:	b976      	cbnz	r6, 8006284 <_Bfree+0x28>
 8006266:	2010      	movs	r0, #16
 8006268:	f7ff ff04 	bl	8006074 <malloc>
 800626c:	4602      	mov	r2, r0
 800626e:	61e8      	str	r0, [r5, #28]
 8006270:	b920      	cbnz	r0, 800627c <_Bfree+0x20>
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <_Bfree+0x3c>)
 8006274:	4809      	ldr	r0, [pc, #36]	; (800629c <_Bfree+0x40>)
 8006276:	218f      	movs	r1, #143	; 0x8f
 8006278:	f001 ff16 	bl	80080a8 <__assert_func>
 800627c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006280:	6006      	str	r6, [r0, #0]
 8006282:	60c6      	str	r6, [r0, #12]
 8006284:	b13c      	cbz	r4, 8006296 <_Bfree+0x3a>
 8006286:	69eb      	ldr	r3, [r5, #28]
 8006288:	6862      	ldr	r2, [r4, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006290:	6021      	str	r1, [r4, #0]
 8006292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	080089c6 	.word	0x080089c6
 800629c:	08008a46 	.word	0x08008a46

080062a0 <__multadd>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	690d      	ldr	r5, [r1, #16]
 80062a6:	4607      	mov	r7, r0
 80062a8:	460c      	mov	r4, r1
 80062aa:	461e      	mov	r6, r3
 80062ac:	f101 0c14 	add.w	ip, r1, #20
 80062b0:	2000      	movs	r0, #0
 80062b2:	f8dc 3000 	ldr.w	r3, [ip]
 80062b6:	b299      	uxth	r1, r3
 80062b8:	fb02 6101 	mla	r1, r2, r1, r6
 80062bc:	0c1e      	lsrs	r6, r3, #16
 80062be:	0c0b      	lsrs	r3, r1, #16
 80062c0:	fb02 3306 	mla	r3, r2, r6, r3
 80062c4:	b289      	uxth	r1, r1
 80062c6:	3001      	adds	r0, #1
 80062c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062cc:	4285      	cmp	r5, r0
 80062ce:	f84c 1b04 	str.w	r1, [ip], #4
 80062d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062d6:	dcec      	bgt.n	80062b2 <__multadd+0x12>
 80062d8:	b30e      	cbz	r6, 800631e <__multadd+0x7e>
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	42ab      	cmp	r3, r5
 80062de:	dc19      	bgt.n	8006314 <__multadd+0x74>
 80062e0:	6861      	ldr	r1, [r4, #4]
 80062e2:	4638      	mov	r0, r7
 80062e4:	3101      	adds	r1, #1
 80062e6:	f7ff ff79 	bl	80061dc <_Balloc>
 80062ea:	4680      	mov	r8, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__multadd+0x5a>
 80062ee:	4602      	mov	r2, r0
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <__multadd+0x84>)
 80062f2:	480d      	ldr	r0, [pc, #52]	; (8006328 <__multadd+0x88>)
 80062f4:	21ba      	movs	r1, #186	; 0xba
 80062f6:	f001 fed7 	bl	80080a8 <__assert_func>
 80062fa:	6922      	ldr	r2, [r4, #16]
 80062fc:	3202      	adds	r2, #2
 80062fe:	f104 010c 	add.w	r1, r4, #12
 8006302:	0092      	lsls	r2, r2, #2
 8006304:	300c      	adds	r0, #12
 8006306:	f001 feb7 	bl	8008078 <memcpy>
 800630a:	4621      	mov	r1, r4
 800630c:	4638      	mov	r0, r7
 800630e:	f7ff ffa5 	bl	800625c <_Bfree>
 8006312:	4644      	mov	r4, r8
 8006314:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006318:	3501      	adds	r5, #1
 800631a:	615e      	str	r6, [r3, #20]
 800631c:	6125      	str	r5, [r4, #16]
 800631e:	4620      	mov	r0, r4
 8006320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006324:	08008a35 	.word	0x08008a35
 8006328:	08008a46 	.word	0x08008a46

0800632c <__s2b>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	4615      	mov	r5, r2
 8006334:	461f      	mov	r7, r3
 8006336:	2209      	movs	r2, #9
 8006338:	3308      	adds	r3, #8
 800633a:	4606      	mov	r6, r0
 800633c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006340:	2100      	movs	r1, #0
 8006342:	2201      	movs	r2, #1
 8006344:	429a      	cmp	r2, r3
 8006346:	db09      	blt.n	800635c <__s2b+0x30>
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ff47 	bl	80061dc <_Balloc>
 800634e:	b940      	cbnz	r0, 8006362 <__s2b+0x36>
 8006350:	4602      	mov	r2, r0
 8006352:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <__s2b+0x8c>)
 8006354:	4819      	ldr	r0, [pc, #100]	; (80063bc <__s2b+0x90>)
 8006356:	21d3      	movs	r1, #211	; 0xd3
 8006358:	f001 fea6 	bl	80080a8 <__assert_func>
 800635c:	0052      	lsls	r2, r2, #1
 800635e:	3101      	adds	r1, #1
 8006360:	e7f0      	b.n	8006344 <__s2b+0x18>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	6143      	str	r3, [r0, #20]
 8006366:	2d09      	cmp	r5, #9
 8006368:	f04f 0301 	mov.w	r3, #1
 800636c:	6103      	str	r3, [r0, #16]
 800636e:	dd16      	ble.n	800639e <__s2b+0x72>
 8006370:	f104 0909 	add.w	r9, r4, #9
 8006374:	46c8      	mov	r8, r9
 8006376:	442c      	add	r4, r5
 8006378:	f818 3b01 	ldrb.w	r3, [r8], #1
 800637c:	4601      	mov	r1, r0
 800637e:	3b30      	subs	r3, #48	; 0x30
 8006380:	220a      	movs	r2, #10
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ff8c 	bl	80062a0 <__multadd>
 8006388:	45a0      	cmp	r8, r4
 800638a:	d1f5      	bne.n	8006378 <__s2b+0x4c>
 800638c:	f1a5 0408 	sub.w	r4, r5, #8
 8006390:	444c      	add	r4, r9
 8006392:	1b2d      	subs	r5, r5, r4
 8006394:	1963      	adds	r3, r4, r5
 8006396:	42bb      	cmp	r3, r7
 8006398:	db04      	blt.n	80063a4 <__s2b+0x78>
 800639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639e:	340a      	adds	r4, #10
 80063a0:	2509      	movs	r5, #9
 80063a2:	e7f6      	b.n	8006392 <__s2b+0x66>
 80063a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063a8:	4601      	mov	r1, r0
 80063aa:	3b30      	subs	r3, #48	; 0x30
 80063ac:	220a      	movs	r2, #10
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ff76 	bl	80062a0 <__multadd>
 80063b4:	e7ee      	b.n	8006394 <__s2b+0x68>
 80063b6:	bf00      	nop
 80063b8:	08008a35 	.word	0x08008a35
 80063bc:	08008a46 	.word	0x08008a46

080063c0 <__hi0bits>:
 80063c0:	0c03      	lsrs	r3, r0, #16
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	b9d3      	cbnz	r3, 80063fc <__hi0bits+0x3c>
 80063c6:	0400      	lsls	r0, r0, #16
 80063c8:	2310      	movs	r3, #16
 80063ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063ce:	bf04      	itt	eq
 80063d0:	0200      	lsleq	r0, r0, #8
 80063d2:	3308      	addeq	r3, #8
 80063d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063d8:	bf04      	itt	eq
 80063da:	0100      	lsleq	r0, r0, #4
 80063dc:	3304      	addeq	r3, #4
 80063de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063e2:	bf04      	itt	eq
 80063e4:	0080      	lsleq	r0, r0, #2
 80063e6:	3302      	addeq	r3, #2
 80063e8:	2800      	cmp	r0, #0
 80063ea:	db05      	blt.n	80063f8 <__hi0bits+0x38>
 80063ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063f0:	f103 0301 	add.w	r3, r3, #1
 80063f4:	bf08      	it	eq
 80063f6:	2320      	moveq	r3, #32
 80063f8:	4618      	mov	r0, r3
 80063fa:	4770      	bx	lr
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7e4      	b.n	80063ca <__hi0bits+0xa>

08006400 <__lo0bits>:
 8006400:	6803      	ldr	r3, [r0, #0]
 8006402:	f013 0207 	ands.w	r2, r3, #7
 8006406:	d00c      	beq.n	8006422 <__lo0bits+0x22>
 8006408:	07d9      	lsls	r1, r3, #31
 800640a:	d422      	bmi.n	8006452 <__lo0bits+0x52>
 800640c:	079a      	lsls	r2, r3, #30
 800640e:	bf49      	itett	mi
 8006410:	085b      	lsrmi	r3, r3, #1
 8006412:	089b      	lsrpl	r3, r3, #2
 8006414:	6003      	strmi	r3, [r0, #0]
 8006416:	2201      	movmi	r2, #1
 8006418:	bf5c      	itt	pl
 800641a:	6003      	strpl	r3, [r0, #0]
 800641c:	2202      	movpl	r2, #2
 800641e:	4610      	mov	r0, r2
 8006420:	4770      	bx	lr
 8006422:	b299      	uxth	r1, r3
 8006424:	b909      	cbnz	r1, 800642a <__lo0bits+0x2a>
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	2210      	movs	r2, #16
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	b909      	cbnz	r1, 8006432 <__lo0bits+0x32>
 800642e:	3208      	adds	r2, #8
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	0719      	lsls	r1, r3, #28
 8006434:	bf04      	itt	eq
 8006436:	091b      	lsreq	r3, r3, #4
 8006438:	3204      	addeq	r2, #4
 800643a:	0799      	lsls	r1, r3, #30
 800643c:	bf04      	itt	eq
 800643e:	089b      	lsreq	r3, r3, #2
 8006440:	3202      	addeq	r2, #2
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	d403      	bmi.n	800644e <__lo0bits+0x4e>
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f102 0201 	add.w	r2, r2, #1
 800644c:	d003      	beq.n	8006456 <__lo0bits+0x56>
 800644e:	6003      	str	r3, [r0, #0]
 8006450:	e7e5      	b.n	800641e <__lo0bits+0x1e>
 8006452:	2200      	movs	r2, #0
 8006454:	e7e3      	b.n	800641e <__lo0bits+0x1e>
 8006456:	2220      	movs	r2, #32
 8006458:	e7e1      	b.n	800641e <__lo0bits+0x1e>
	...

0800645c <__i2b>:
 800645c:	b510      	push	{r4, lr}
 800645e:	460c      	mov	r4, r1
 8006460:	2101      	movs	r1, #1
 8006462:	f7ff febb 	bl	80061dc <_Balloc>
 8006466:	4602      	mov	r2, r0
 8006468:	b928      	cbnz	r0, 8006476 <__i2b+0x1a>
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <__i2b+0x24>)
 800646c:	4805      	ldr	r0, [pc, #20]	; (8006484 <__i2b+0x28>)
 800646e:	f240 1145 	movw	r1, #325	; 0x145
 8006472:	f001 fe19 	bl	80080a8 <__assert_func>
 8006476:	2301      	movs	r3, #1
 8006478:	6144      	str	r4, [r0, #20]
 800647a:	6103      	str	r3, [r0, #16]
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	08008a35 	.word	0x08008a35
 8006484:	08008a46 	.word	0x08008a46

08006488 <__multiply>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4691      	mov	r9, r2
 800648e:	690a      	ldr	r2, [r1, #16]
 8006490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	bfb8      	it	lt
 8006498:	460b      	movlt	r3, r1
 800649a:	460c      	mov	r4, r1
 800649c:	bfbc      	itt	lt
 800649e:	464c      	movlt	r4, r9
 80064a0:	4699      	movlt	r9, r3
 80064a2:	6927      	ldr	r7, [r4, #16]
 80064a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064a8:	68a3      	ldr	r3, [r4, #8]
 80064aa:	6861      	ldr	r1, [r4, #4]
 80064ac:	eb07 060a 	add.w	r6, r7, sl
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	b085      	sub	sp, #20
 80064b4:	bfb8      	it	lt
 80064b6:	3101      	addlt	r1, #1
 80064b8:	f7ff fe90 	bl	80061dc <_Balloc>
 80064bc:	b930      	cbnz	r0, 80064cc <__multiply+0x44>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b44      	ldr	r3, [pc, #272]	; (80065d4 <__multiply+0x14c>)
 80064c2:	4845      	ldr	r0, [pc, #276]	; (80065d8 <__multiply+0x150>)
 80064c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80064c8:	f001 fdee 	bl	80080a8 <__assert_func>
 80064cc:	f100 0514 	add.w	r5, r0, #20
 80064d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064d4:	462b      	mov	r3, r5
 80064d6:	2200      	movs	r2, #0
 80064d8:	4543      	cmp	r3, r8
 80064da:	d321      	bcc.n	8006520 <__multiply+0x98>
 80064dc:	f104 0314 	add.w	r3, r4, #20
 80064e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064e4:	f109 0314 	add.w	r3, r9, #20
 80064e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064ec:	9202      	str	r2, [sp, #8]
 80064ee:	1b3a      	subs	r2, r7, r4
 80064f0:	3a15      	subs	r2, #21
 80064f2:	f022 0203 	bic.w	r2, r2, #3
 80064f6:	3204      	adds	r2, #4
 80064f8:	f104 0115 	add.w	r1, r4, #21
 80064fc:	428f      	cmp	r7, r1
 80064fe:	bf38      	it	cc
 8006500:	2204      	movcc	r2, #4
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9a02      	ldr	r2, [sp, #8]
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d80c      	bhi.n	8006526 <__multiply+0x9e>
 800650c:	2e00      	cmp	r6, #0
 800650e:	dd03      	ble.n	8006518 <__multiply+0x90>
 8006510:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006514:	2b00      	cmp	r3, #0
 8006516:	d05b      	beq.n	80065d0 <__multiply+0x148>
 8006518:	6106      	str	r6, [r0, #16]
 800651a:	b005      	add	sp, #20
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	f843 2b04 	str.w	r2, [r3], #4
 8006524:	e7d8      	b.n	80064d8 <__multiply+0x50>
 8006526:	f8b3 a000 	ldrh.w	sl, [r3]
 800652a:	f1ba 0f00 	cmp.w	sl, #0
 800652e:	d024      	beq.n	800657a <__multiply+0xf2>
 8006530:	f104 0e14 	add.w	lr, r4, #20
 8006534:	46a9      	mov	r9, r5
 8006536:	f04f 0c00 	mov.w	ip, #0
 800653a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800653e:	f8d9 1000 	ldr.w	r1, [r9]
 8006542:	fa1f fb82 	uxth.w	fp, r2
 8006546:	b289      	uxth	r1, r1
 8006548:	fb0a 110b 	mla	r1, sl, fp, r1
 800654c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006550:	f8d9 2000 	ldr.w	r2, [r9]
 8006554:	4461      	add	r1, ip
 8006556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800655a:	fb0a c20b 	mla	r2, sl, fp, ip
 800655e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006562:	b289      	uxth	r1, r1
 8006564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006568:	4577      	cmp	r7, lr
 800656a:	f849 1b04 	str.w	r1, [r9], #4
 800656e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006572:	d8e2      	bhi.n	800653a <__multiply+0xb2>
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	f845 c002 	str.w	ip, [r5, r2]
 800657a:	9a03      	ldr	r2, [sp, #12]
 800657c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006580:	3304      	adds	r3, #4
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	d021      	beq.n	80065cc <__multiply+0x144>
 8006588:	6829      	ldr	r1, [r5, #0]
 800658a:	f104 0c14 	add.w	ip, r4, #20
 800658e:	46ae      	mov	lr, r5
 8006590:	f04f 0a00 	mov.w	sl, #0
 8006594:	f8bc b000 	ldrh.w	fp, [ip]
 8006598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800659c:	fb09 220b 	mla	r2, r9, fp, r2
 80065a0:	4452      	add	r2, sl
 80065a2:	b289      	uxth	r1, r1
 80065a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065a8:	f84e 1b04 	str.w	r1, [lr], #4
 80065ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065b4:	f8be 1000 	ldrh.w	r1, [lr]
 80065b8:	fb09 110a 	mla	r1, r9, sl, r1
 80065bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80065c0:	4567      	cmp	r7, ip
 80065c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065c6:	d8e5      	bhi.n	8006594 <__multiply+0x10c>
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	50a9      	str	r1, [r5, r2]
 80065cc:	3504      	adds	r5, #4
 80065ce:	e799      	b.n	8006504 <__multiply+0x7c>
 80065d0:	3e01      	subs	r6, #1
 80065d2:	e79b      	b.n	800650c <__multiply+0x84>
 80065d4:	08008a35 	.word	0x08008a35
 80065d8:	08008a46 	.word	0x08008a46

080065dc <__pow5mult>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	4615      	mov	r5, r2
 80065e2:	f012 0203 	ands.w	r2, r2, #3
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	d007      	beq.n	80065fc <__pow5mult+0x20>
 80065ec:	4c25      	ldr	r4, [pc, #148]	; (8006684 <__pow5mult+0xa8>)
 80065ee:	3a01      	subs	r2, #1
 80065f0:	2300      	movs	r3, #0
 80065f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065f6:	f7ff fe53 	bl	80062a0 <__multadd>
 80065fa:	4607      	mov	r7, r0
 80065fc:	10ad      	asrs	r5, r5, #2
 80065fe:	d03d      	beq.n	800667c <__pow5mult+0xa0>
 8006600:	69f4      	ldr	r4, [r6, #28]
 8006602:	b97c      	cbnz	r4, 8006624 <__pow5mult+0x48>
 8006604:	2010      	movs	r0, #16
 8006606:	f7ff fd35 	bl	8006074 <malloc>
 800660a:	4602      	mov	r2, r0
 800660c:	61f0      	str	r0, [r6, #28]
 800660e:	b928      	cbnz	r0, 800661c <__pow5mult+0x40>
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <__pow5mult+0xac>)
 8006612:	481e      	ldr	r0, [pc, #120]	; (800668c <__pow5mult+0xb0>)
 8006614:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006618:	f001 fd46 	bl	80080a8 <__assert_func>
 800661c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006620:	6004      	str	r4, [r0, #0]
 8006622:	60c4      	str	r4, [r0, #12]
 8006624:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800662c:	b94c      	cbnz	r4, 8006642 <__pow5mult+0x66>
 800662e:	f240 2171 	movw	r1, #625	; 0x271
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ff12 	bl	800645c <__i2b>
 8006638:	2300      	movs	r3, #0
 800663a:	f8c8 0008 	str.w	r0, [r8, #8]
 800663e:	4604      	mov	r4, r0
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	07eb      	lsls	r3, r5, #31
 8006648:	d50a      	bpl.n	8006660 <__pow5mult+0x84>
 800664a:	4639      	mov	r1, r7
 800664c:	4622      	mov	r2, r4
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff1a 	bl	8006488 <__multiply>
 8006654:	4639      	mov	r1, r7
 8006656:	4680      	mov	r8, r0
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff fdff 	bl	800625c <_Bfree>
 800665e:	4647      	mov	r7, r8
 8006660:	106d      	asrs	r5, r5, #1
 8006662:	d00b      	beq.n	800667c <__pow5mult+0xa0>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	b938      	cbnz	r0, 8006678 <__pow5mult+0x9c>
 8006668:	4622      	mov	r2, r4
 800666a:	4621      	mov	r1, r4
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ff0b 	bl	8006488 <__multiply>
 8006672:	6020      	str	r0, [r4, #0]
 8006674:	f8c0 9000 	str.w	r9, [r0]
 8006678:	4604      	mov	r4, r0
 800667a:	e7e4      	b.n	8006646 <__pow5mult+0x6a>
 800667c:	4638      	mov	r0, r7
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	bf00      	nop
 8006684:	08008b90 	.word	0x08008b90
 8006688:	080089c6 	.word	0x080089c6
 800668c:	08008a46 	.word	0x08008a46

08006690 <__lshift>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	6849      	ldr	r1, [r1, #4]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	4607      	mov	r7, r0
 80066a2:	4691      	mov	r9, r2
 80066a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a8:	f108 0601 	add.w	r6, r8, #1
 80066ac:	42b3      	cmp	r3, r6
 80066ae:	db0b      	blt.n	80066c8 <__lshift+0x38>
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff fd93 	bl	80061dc <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b948      	cbnz	r0, 80066ce <__lshift+0x3e>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b28      	ldr	r3, [pc, #160]	; (8006760 <__lshift+0xd0>)
 80066be:	4829      	ldr	r0, [pc, #164]	; (8006764 <__lshift+0xd4>)
 80066c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80066c4:	f001 fcf0 	bl	80080a8 <__assert_func>
 80066c8:	3101      	adds	r1, #1
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	e7ee      	b.n	80066ac <__lshift+0x1c>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f100 0114 	add.w	r1, r0, #20
 80066d4:	f100 0210 	add.w	r2, r0, #16
 80066d8:	4618      	mov	r0, r3
 80066da:	4553      	cmp	r3, sl
 80066dc:	db33      	blt.n	8006746 <__lshift+0xb6>
 80066de:	6920      	ldr	r0, [r4, #16]
 80066e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e4:	f104 0314 	add.w	r3, r4, #20
 80066e8:	f019 091f 	ands.w	r9, r9, #31
 80066ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066f4:	d02b      	beq.n	800674e <__lshift+0xbe>
 80066f6:	f1c9 0e20 	rsb	lr, r9, #32
 80066fa:	468a      	mov	sl, r1
 80066fc:	2200      	movs	r2, #0
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	fa00 f009 	lsl.w	r0, r0, r9
 8006704:	4310      	orrs	r0, r2
 8006706:	f84a 0b04 	str.w	r0, [sl], #4
 800670a:	f853 2b04 	ldr.w	r2, [r3], #4
 800670e:	459c      	cmp	ip, r3
 8006710:	fa22 f20e 	lsr.w	r2, r2, lr
 8006714:	d8f3      	bhi.n	80066fe <__lshift+0x6e>
 8006716:	ebac 0304 	sub.w	r3, ip, r4
 800671a:	3b15      	subs	r3, #21
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	3304      	adds	r3, #4
 8006722:	f104 0015 	add.w	r0, r4, #21
 8006726:	4584      	cmp	ip, r0
 8006728:	bf38      	it	cc
 800672a:	2304      	movcc	r3, #4
 800672c:	50ca      	str	r2, [r1, r3]
 800672e:	b10a      	cbz	r2, 8006734 <__lshift+0xa4>
 8006730:	f108 0602 	add.w	r6, r8, #2
 8006734:	3e01      	subs	r6, #1
 8006736:	4638      	mov	r0, r7
 8006738:	612e      	str	r6, [r5, #16]
 800673a:	4621      	mov	r1, r4
 800673c:	f7ff fd8e 	bl	800625c <_Bfree>
 8006740:	4628      	mov	r0, r5
 8006742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006746:	f842 0f04 	str.w	r0, [r2, #4]!
 800674a:	3301      	adds	r3, #1
 800674c:	e7c5      	b.n	80066da <__lshift+0x4a>
 800674e:	3904      	subs	r1, #4
 8006750:	f853 2b04 	ldr.w	r2, [r3], #4
 8006754:	f841 2f04 	str.w	r2, [r1, #4]!
 8006758:	459c      	cmp	ip, r3
 800675a:	d8f9      	bhi.n	8006750 <__lshift+0xc0>
 800675c:	e7ea      	b.n	8006734 <__lshift+0xa4>
 800675e:	bf00      	nop
 8006760:	08008a35 	.word	0x08008a35
 8006764:	08008a46 	.word	0x08008a46

08006768 <__mcmp>:
 8006768:	b530      	push	{r4, r5, lr}
 800676a:	6902      	ldr	r2, [r0, #16]
 800676c:	690c      	ldr	r4, [r1, #16]
 800676e:	1b12      	subs	r2, r2, r4
 8006770:	d10e      	bne.n	8006790 <__mcmp+0x28>
 8006772:	f100 0314 	add.w	r3, r0, #20
 8006776:	3114      	adds	r1, #20
 8006778:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800677c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006780:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006784:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006788:	42a5      	cmp	r5, r4
 800678a:	d003      	beq.n	8006794 <__mcmp+0x2c>
 800678c:	d305      	bcc.n	800679a <__mcmp+0x32>
 800678e:	2201      	movs	r2, #1
 8006790:	4610      	mov	r0, r2
 8006792:	bd30      	pop	{r4, r5, pc}
 8006794:	4283      	cmp	r3, r0
 8006796:	d3f3      	bcc.n	8006780 <__mcmp+0x18>
 8006798:	e7fa      	b.n	8006790 <__mcmp+0x28>
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	e7f7      	b.n	8006790 <__mcmp+0x28>

080067a0 <__mdiff>:
 80067a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	4606      	mov	r6, r0
 80067a8:	4611      	mov	r1, r2
 80067aa:	4620      	mov	r0, r4
 80067ac:	4690      	mov	r8, r2
 80067ae:	f7ff ffdb 	bl	8006768 <__mcmp>
 80067b2:	1e05      	subs	r5, r0, #0
 80067b4:	d110      	bne.n	80067d8 <__mdiff+0x38>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff fd0f 	bl	80061dc <_Balloc>
 80067be:	b930      	cbnz	r0, 80067ce <__mdiff+0x2e>
 80067c0:	4b3a      	ldr	r3, [pc, #232]	; (80068ac <__mdiff+0x10c>)
 80067c2:	4602      	mov	r2, r0
 80067c4:	f240 2137 	movw	r1, #567	; 0x237
 80067c8:	4839      	ldr	r0, [pc, #228]	; (80068b0 <__mdiff+0x110>)
 80067ca:	f001 fc6d 	bl	80080a8 <__assert_func>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	bfa4      	itt	ge
 80067da:	4643      	movge	r3, r8
 80067dc:	46a0      	movge	r8, r4
 80067de:	4630      	mov	r0, r6
 80067e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067e4:	bfa6      	itte	ge
 80067e6:	461c      	movge	r4, r3
 80067e8:	2500      	movge	r5, #0
 80067ea:	2501      	movlt	r5, #1
 80067ec:	f7ff fcf6 	bl	80061dc <_Balloc>
 80067f0:	b920      	cbnz	r0, 80067fc <__mdiff+0x5c>
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <__mdiff+0x10c>)
 80067f4:	4602      	mov	r2, r0
 80067f6:	f240 2145 	movw	r1, #581	; 0x245
 80067fa:	e7e5      	b.n	80067c8 <__mdiff+0x28>
 80067fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006800:	6926      	ldr	r6, [r4, #16]
 8006802:	60c5      	str	r5, [r0, #12]
 8006804:	f104 0914 	add.w	r9, r4, #20
 8006808:	f108 0514 	add.w	r5, r8, #20
 800680c:	f100 0e14 	add.w	lr, r0, #20
 8006810:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006814:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006818:	f108 0210 	add.w	r2, r8, #16
 800681c:	46f2      	mov	sl, lr
 800681e:	2100      	movs	r1, #0
 8006820:	f859 3b04 	ldr.w	r3, [r9], #4
 8006824:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006828:	fa11 f88b 	uxtah	r8, r1, fp
 800682c:	b299      	uxth	r1, r3
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	eba8 0801 	sub.w	r8, r8, r1
 8006834:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006838:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800683c:	fa1f f888 	uxth.w	r8, r8
 8006840:	1419      	asrs	r1, r3, #16
 8006842:	454e      	cmp	r6, r9
 8006844:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006848:	f84a 3b04 	str.w	r3, [sl], #4
 800684c:	d8e8      	bhi.n	8006820 <__mdiff+0x80>
 800684e:	1b33      	subs	r3, r6, r4
 8006850:	3b15      	subs	r3, #21
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	3304      	adds	r3, #4
 8006858:	3415      	adds	r4, #21
 800685a:	42a6      	cmp	r6, r4
 800685c:	bf38      	it	cc
 800685e:	2304      	movcc	r3, #4
 8006860:	441d      	add	r5, r3
 8006862:	4473      	add	r3, lr
 8006864:	469e      	mov	lr, r3
 8006866:	462e      	mov	r6, r5
 8006868:	4566      	cmp	r6, ip
 800686a:	d30e      	bcc.n	800688a <__mdiff+0xea>
 800686c:	f10c 0203 	add.w	r2, ip, #3
 8006870:	1b52      	subs	r2, r2, r5
 8006872:	f022 0203 	bic.w	r2, r2, #3
 8006876:	3d03      	subs	r5, #3
 8006878:	45ac      	cmp	ip, r5
 800687a:	bf38      	it	cc
 800687c:	2200      	movcc	r2, #0
 800687e:	4413      	add	r3, r2
 8006880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006884:	b17a      	cbz	r2, 80068a6 <__mdiff+0x106>
 8006886:	6107      	str	r7, [r0, #16]
 8006888:	e7a4      	b.n	80067d4 <__mdiff+0x34>
 800688a:	f856 8b04 	ldr.w	r8, [r6], #4
 800688e:	fa11 f288 	uxtah	r2, r1, r8
 8006892:	1414      	asrs	r4, r2, #16
 8006894:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006898:	b292      	uxth	r2, r2
 800689a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800689e:	f84e 2b04 	str.w	r2, [lr], #4
 80068a2:	1421      	asrs	r1, r4, #16
 80068a4:	e7e0      	b.n	8006868 <__mdiff+0xc8>
 80068a6:	3f01      	subs	r7, #1
 80068a8:	e7ea      	b.n	8006880 <__mdiff+0xe0>
 80068aa:	bf00      	nop
 80068ac:	08008a35 	.word	0x08008a35
 80068b0:	08008a46 	.word	0x08008a46

080068b4 <__ulp>:
 80068b4:	b082      	sub	sp, #8
 80068b6:	ed8d 0b00 	vstr	d0, [sp]
 80068ba:	9a01      	ldr	r2, [sp, #4]
 80068bc:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <__ulp+0x48>)
 80068be:	4013      	ands	r3, r2
 80068c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc08      	bgt.n	80068da <__ulp+0x26>
 80068c8:	425b      	negs	r3, r3
 80068ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80068ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068d2:	da04      	bge.n	80068de <__ulp+0x2a>
 80068d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068d8:	4113      	asrs	r3, r2
 80068da:	2200      	movs	r2, #0
 80068dc:	e008      	b.n	80068f0 <__ulp+0x3c>
 80068de:	f1a2 0314 	sub.w	r3, r2, #20
 80068e2:	2b1e      	cmp	r3, #30
 80068e4:	bfda      	itte	le
 80068e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80068ea:	40da      	lsrle	r2, r3
 80068ec:	2201      	movgt	r2, #1
 80068ee:	2300      	movs	r3, #0
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	ec41 0b10 	vmov	d0, r0, r1
 80068f8:	b002      	add	sp, #8
 80068fa:	4770      	bx	lr
 80068fc:	7ff00000 	.word	0x7ff00000

08006900 <__b2d>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	6906      	ldr	r6, [r0, #16]
 8006906:	f100 0814 	add.w	r8, r0, #20
 800690a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800690e:	1f37      	subs	r7, r6, #4
 8006910:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006914:	4610      	mov	r0, r2
 8006916:	f7ff fd53 	bl	80063c0 <__hi0bits>
 800691a:	f1c0 0320 	rsb	r3, r0, #32
 800691e:	280a      	cmp	r0, #10
 8006920:	600b      	str	r3, [r1, #0]
 8006922:	491b      	ldr	r1, [pc, #108]	; (8006990 <__b2d+0x90>)
 8006924:	dc15      	bgt.n	8006952 <__b2d+0x52>
 8006926:	f1c0 0c0b 	rsb	ip, r0, #11
 800692a:	fa22 f30c 	lsr.w	r3, r2, ip
 800692e:	45b8      	cmp	r8, r7
 8006930:	ea43 0501 	orr.w	r5, r3, r1
 8006934:	bf34      	ite	cc
 8006936:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800693a:	2300      	movcs	r3, #0
 800693c:	3015      	adds	r0, #21
 800693e:	fa02 f000 	lsl.w	r0, r2, r0
 8006942:	fa23 f30c 	lsr.w	r3, r3, ip
 8006946:	4303      	orrs	r3, r0
 8006948:	461c      	mov	r4, r3
 800694a:	ec45 4b10 	vmov	d0, r4, r5
 800694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006952:	45b8      	cmp	r8, r7
 8006954:	bf3a      	itte	cc
 8006956:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800695a:	f1a6 0708 	subcc.w	r7, r6, #8
 800695e:	2300      	movcs	r3, #0
 8006960:	380b      	subs	r0, #11
 8006962:	d012      	beq.n	800698a <__b2d+0x8a>
 8006964:	f1c0 0120 	rsb	r1, r0, #32
 8006968:	fa23 f401 	lsr.w	r4, r3, r1
 800696c:	4082      	lsls	r2, r0
 800696e:	4322      	orrs	r2, r4
 8006970:	4547      	cmp	r7, r8
 8006972:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006976:	bf8c      	ite	hi
 8006978:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800697c:	2200      	movls	r2, #0
 800697e:	4083      	lsls	r3, r0
 8006980:	40ca      	lsrs	r2, r1
 8006982:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006986:	4313      	orrs	r3, r2
 8006988:	e7de      	b.n	8006948 <__b2d+0x48>
 800698a:	ea42 0501 	orr.w	r5, r2, r1
 800698e:	e7db      	b.n	8006948 <__b2d+0x48>
 8006990:	3ff00000 	.word	0x3ff00000

08006994 <__d2b>:
 8006994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006998:	460f      	mov	r7, r1
 800699a:	2101      	movs	r1, #1
 800699c:	ec59 8b10 	vmov	r8, r9, d0
 80069a0:	4616      	mov	r6, r2
 80069a2:	f7ff fc1b 	bl	80061dc <_Balloc>
 80069a6:	4604      	mov	r4, r0
 80069a8:	b930      	cbnz	r0, 80069b8 <__d2b+0x24>
 80069aa:	4602      	mov	r2, r0
 80069ac:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <__d2b+0xac>)
 80069ae:	4825      	ldr	r0, [pc, #148]	; (8006a44 <__d2b+0xb0>)
 80069b0:	f240 310f 	movw	r1, #783	; 0x30f
 80069b4:	f001 fb78 	bl	80080a8 <__assert_func>
 80069b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069c0:	bb2d      	cbnz	r5, 8006a0e <__d2b+0x7a>
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	f1b8 0300 	subs.w	r3, r8, #0
 80069c8:	d026      	beq.n	8006a18 <__d2b+0x84>
 80069ca:	4668      	mov	r0, sp
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f7ff fd17 	bl	8006400 <__lo0bits>
 80069d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069d6:	b1e8      	cbz	r0, 8006a14 <__d2b+0x80>
 80069d8:	f1c0 0320 	rsb	r3, r0, #32
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	430b      	orrs	r3, r1
 80069e2:	40c2      	lsrs	r2, r0
 80069e4:	6163      	str	r3, [r4, #20]
 80069e6:	9201      	str	r2, [sp, #4]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	61a3      	str	r3, [r4, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf14      	ite	ne
 80069f0:	2202      	movne	r2, #2
 80069f2:	2201      	moveq	r2, #1
 80069f4:	6122      	str	r2, [r4, #16]
 80069f6:	b1bd      	cbz	r5, 8006a28 <__d2b+0x94>
 80069f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069fc:	4405      	add	r5, r0
 80069fe:	603d      	str	r5, [r7, #0]
 8006a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a04:	6030      	str	r0, [r6, #0]
 8006a06:	4620      	mov	r0, r4
 8006a08:	b003      	add	sp, #12
 8006a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a12:	e7d6      	b.n	80069c2 <__d2b+0x2e>
 8006a14:	6161      	str	r1, [r4, #20]
 8006a16:	e7e7      	b.n	80069e8 <__d2b+0x54>
 8006a18:	a801      	add	r0, sp, #4
 8006a1a:	f7ff fcf1 	bl	8006400 <__lo0bits>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	6163      	str	r3, [r4, #20]
 8006a22:	3020      	adds	r0, #32
 8006a24:	2201      	movs	r2, #1
 8006a26:	e7e5      	b.n	80069f4 <__d2b+0x60>
 8006a28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a30:	6038      	str	r0, [r7, #0]
 8006a32:	6918      	ldr	r0, [r3, #16]
 8006a34:	f7ff fcc4 	bl	80063c0 <__hi0bits>
 8006a38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a3c:	e7e2      	b.n	8006a04 <__d2b+0x70>
 8006a3e:	bf00      	nop
 8006a40:	08008a35 	.word	0x08008a35
 8006a44:	08008a46 	.word	0x08008a46

08006a48 <__ratio>:
 8006a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4688      	mov	r8, r1
 8006a4e:	4669      	mov	r1, sp
 8006a50:	4681      	mov	r9, r0
 8006a52:	f7ff ff55 	bl	8006900 <__b2d>
 8006a56:	a901      	add	r1, sp, #4
 8006a58:	4640      	mov	r0, r8
 8006a5a:	ec55 4b10 	vmov	r4, r5, d0
 8006a5e:	f7ff ff4f 	bl	8006900 <__b2d>
 8006a62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a6a:	eba3 0c02 	sub.w	ip, r3, r2
 8006a6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006a78:	ec51 0b10 	vmov	r0, r1, d0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bfd6      	itet	le
 8006a80:	460a      	movle	r2, r1
 8006a82:	462a      	movgt	r2, r5
 8006a84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a88:	468b      	mov	fp, r1
 8006a8a:	462f      	mov	r7, r5
 8006a8c:	bfd4      	ite	le
 8006a8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006a92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a96:	4620      	mov	r0, r4
 8006a98:	ee10 2a10 	vmov	r2, s0
 8006a9c:	465b      	mov	r3, fp
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7f9 fee4 	bl	800086c <__aeabi_ddiv>
 8006aa4:	ec41 0b10 	vmov	d0, r0, r1
 8006aa8:	b003      	add	sp, #12
 8006aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006aae <__copybits>:
 8006aae:	3901      	subs	r1, #1
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	1149      	asrs	r1, r1, #5
 8006ab4:	6914      	ldr	r4, [r2, #16]
 8006ab6:	3101      	adds	r1, #1
 8006ab8:	f102 0314 	add.w	r3, r2, #20
 8006abc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ac4:	1f05      	subs	r5, r0, #4
 8006ac6:	42a3      	cmp	r3, r4
 8006ac8:	d30c      	bcc.n	8006ae4 <__copybits+0x36>
 8006aca:	1aa3      	subs	r3, r4, r2
 8006acc:	3b11      	subs	r3, #17
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	3211      	adds	r2, #17
 8006ad4:	42a2      	cmp	r2, r4
 8006ad6:	bf88      	it	hi
 8006ad8:	2300      	movhi	r3, #0
 8006ada:	4418      	add	r0, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	4288      	cmp	r0, r1
 8006ae0:	d305      	bcc.n	8006aee <__copybits+0x40>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ae8:	f845 6f04 	str.w	r6, [r5, #4]!
 8006aec:	e7eb      	b.n	8006ac6 <__copybits+0x18>
 8006aee:	f840 3b04 	str.w	r3, [r0], #4
 8006af2:	e7f4      	b.n	8006ade <__copybits+0x30>

08006af4 <__any_on>:
 8006af4:	f100 0214 	add.w	r2, r0, #20
 8006af8:	6900      	ldr	r0, [r0, #16]
 8006afa:	114b      	asrs	r3, r1, #5
 8006afc:	4298      	cmp	r0, r3
 8006afe:	b510      	push	{r4, lr}
 8006b00:	db11      	blt.n	8006b26 <__any_on+0x32>
 8006b02:	dd0a      	ble.n	8006b1a <__any_on+0x26>
 8006b04:	f011 011f 	ands.w	r1, r1, #31
 8006b08:	d007      	beq.n	8006b1a <__any_on+0x26>
 8006b0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b0e:	fa24 f001 	lsr.w	r0, r4, r1
 8006b12:	fa00 f101 	lsl.w	r1, r0, r1
 8006b16:	428c      	cmp	r4, r1
 8006b18:	d10b      	bne.n	8006b32 <__any_on+0x3e>
 8006b1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d803      	bhi.n	8006b2a <__any_on+0x36>
 8006b22:	2000      	movs	r0, #0
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	4603      	mov	r3, r0
 8006b28:	e7f7      	b.n	8006b1a <__any_on+0x26>
 8006b2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d0f5      	beq.n	8006b1e <__any_on+0x2a>
 8006b32:	2001      	movs	r0, #1
 8006b34:	e7f6      	b.n	8006b24 <__any_on+0x30>

08006b36 <sulp>:
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	ec45 4b10 	vmov	d0, r4, r5
 8006b40:	4616      	mov	r6, r2
 8006b42:	f7ff feb7 	bl	80068b4 <__ulp>
 8006b46:	ec51 0b10 	vmov	r0, r1, d0
 8006b4a:	b17e      	cbz	r6, 8006b6c <sulp+0x36>
 8006b4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd09      	ble.n	8006b6c <sulp+0x36>
 8006b58:	051b      	lsls	r3, r3, #20
 8006b5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b5e:	2400      	movs	r4, #0
 8006b60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	f7f9 fd56 	bl	8000618 <__aeabi_dmul>
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b70 <_strtod_l>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	ed2d 8b02 	vpush	{d8}
 8006b78:	b09b      	sub	sp, #108	; 0x6c
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b7e:	2200      	movs	r2, #0
 8006b80:	9216      	str	r2, [sp, #88]	; 0x58
 8006b82:	460d      	mov	r5, r1
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	f04f 0900 	mov.w	r9, #0
 8006b8c:	460a      	mov	r2, r1
 8006b8e:	9215      	str	r2, [sp, #84]	; 0x54
 8006b90:	7811      	ldrb	r1, [r2, #0]
 8006b92:	292b      	cmp	r1, #43	; 0x2b
 8006b94:	d04c      	beq.n	8006c30 <_strtod_l+0xc0>
 8006b96:	d83a      	bhi.n	8006c0e <_strtod_l+0x9e>
 8006b98:	290d      	cmp	r1, #13
 8006b9a:	d834      	bhi.n	8006c06 <_strtod_l+0x96>
 8006b9c:	2908      	cmp	r1, #8
 8006b9e:	d834      	bhi.n	8006c0a <_strtod_l+0x9a>
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d03d      	beq.n	8006c20 <_strtod_l+0xb0>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ba8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006baa:	7832      	ldrb	r2, [r6, #0]
 8006bac:	2a30      	cmp	r2, #48	; 0x30
 8006bae:	f040 80b4 	bne.w	8006d1a <_strtod_l+0x1aa>
 8006bb2:	7872      	ldrb	r2, [r6, #1]
 8006bb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006bb8:	2a58      	cmp	r2, #88	; 0x58
 8006bba:	d170      	bne.n	8006c9e <_strtod_l+0x12e>
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	ab16      	add	r3, sp, #88	; 0x58
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4a8e      	ldr	r2, [pc, #568]	; (8006e00 <_strtod_l+0x290>)
 8006bc8:	ab17      	add	r3, sp, #92	; 0x5c
 8006bca:	a915      	add	r1, sp, #84	; 0x54
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f001 fb07 	bl	80081e0 <__gethex>
 8006bd2:	f010 070f 	ands.w	r7, r0, #15
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	d005      	beq.n	8006be6 <_strtod_l+0x76>
 8006bda:	2f06      	cmp	r7, #6
 8006bdc:	d12a      	bne.n	8006c34 <_strtod_l+0xc4>
 8006bde:	3601      	adds	r6, #1
 8006be0:	2300      	movs	r3, #0
 8006be2:	9615      	str	r6, [sp, #84]	; 0x54
 8006be4:	930a      	str	r3, [sp, #40]	; 0x28
 8006be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 857f 	bne.w	80076ec <_strtod_l+0xb7c>
 8006bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf0:	b1db      	cbz	r3, 8006c2a <_strtod_l+0xba>
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bf8:	ec43 2b10 	vmov	d0, r2, r3
 8006bfc:	b01b      	add	sp, #108	; 0x6c
 8006bfe:	ecbd 8b02 	vpop	{d8}
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	2920      	cmp	r1, #32
 8006c08:	d1cc      	bne.n	8006ba4 <_strtod_l+0x34>
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	e7bf      	b.n	8006b8e <_strtod_l+0x1e>
 8006c0e:	292d      	cmp	r1, #45	; 0x2d
 8006c10:	d1c8      	bne.n	8006ba4 <_strtod_l+0x34>
 8006c12:	2101      	movs	r1, #1
 8006c14:	910a      	str	r1, [sp, #40]	; 0x28
 8006c16:	1c51      	adds	r1, r2, #1
 8006c18:	9115      	str	r1, [sp, #84]	; 0x54
 8006c1a:	7852      	ldrb	r2, [r2, #1]
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	d1c3      	bne.n	8006ba8 <_strtod_l+0x38>
 8006c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c22:	9515      	str	r5, [sp, #84]	; 0x54
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 855f 	bne.w	80076e8 <_strtod_l+0xb78>
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	e7e3      	b.n	8006bf8 <_strtod_l+0x88>
 8006c30:	2100      	movs	r1, #0
 8006c32:	e7ef      	b.n	8006c14 <_strtod_l+0xa4>
 8006c34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c36:	b13a      	cbz	r2, 8006c48 <_strtod_l+0xd8>
 8006c38:	2135      	movs	r1, #53	; 0x35
 8006c3a:	a818      	add	r0, sp, #96	; 0x60
 8006c3c:	f7ff ff37 	bl	8006aae <__copybits>
 8006c40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff fb0a 	bl	800625c <_Bfree>
 8006c48:	3f01      	subs	r7, #1
 8006c4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c4c:	2f04      	cmp	r7, #4
 8006c4e:	d806      	bhi.n	8006c5e <_strtod_l+0xee>
 8006c50:	e8df f007 	tbb	[pc, r7]
 8006c54:	201d0314 	.word	0x201d0314
 8006c58:	14          	.byte	0x14
 8006c59:	00          	.byte	0x00
 8006c5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006c5e:	05e9      	lsls	r1, r5, #23
 8006c60:	bf48      	it	mi
 8006c62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006c66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c6a:	0d1b      	lsrs	r3, r3, #20
 8006c6c:	051b      	lsls	r3, r3, #20
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1b9      	bne.n	8006be6 <_strtod_l+0x76>
 8006c72:	f7fe fb05 	bl	8005280 <__errno>
 8006c76:	2322      	movs	r3, #34	; 0x22
 8006c78:	6003      	str	r3, [r0, #0]
 8006c7a:	e7b4      	b.n	8006be6 <_strtod_l+0x76>
 8006c7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006c80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006c8c:	e7e7      	b.n	8006c5e <_strtod_l+0xee>
 8006c8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006e08 <_strtod_l+0x298>
 8006c92:	e7e4      	b.n	8006c5e <_strtod_l+0xee>
 8006c94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006c98:	f04f 38ff 	mov.w	r8, #4294967295
 8006c9c:	e7df      	b.n	8006c5e <_strtod_l+0xee>
 8006c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	9215      	str	r2, [sp, #84]	; 0x54
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	2b30      	cmp	r3, #48	; 0x30
 8006ca8:	d0f9      	beq.n	8006c9e <_strtod_l+0x12e>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d09b      	beq.n	8006be6 <_strtod_l+0x76>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f04f 0a00 	mov.w	sl, #0
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006cbe:	46d3      	mov	fp, sl
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006cc4:	7806      	ldrb	r6, [r0, #0]
 8006cc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006cca:	b2d9      	uxtb	r1, r3
 8006ccc:	2909      	cmp	r1, #9
 8006cce:	d926      	bls.n	8006d1e <_strtod_l+0x1ae>
 8006cd0:	494c      	ldr	r1, [pc, #304]	; (8006e04 <_strtod_l+0x294>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f001 f98c 	bl	8007ff0 <strncmp>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d030      	beq.n	8006d3e <_strtod_l+0x1ce>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4632      	mov	r2, r6
 8006ce0:	9005      	str	r0, [sp, #20]
 8006ce2:	465e      	mov	r6, fp
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2a65      	cmp	r2, #101	; 0x65
 8006ce8:	d001      	beq.n	8006cee <_strtod_l+0x17e>
 8006cea:	2a45      	cmp	r2, #69	; 0x45
 8006cec:	d113      	bne.n	8006d16 <_strtod_l+0x1a6>
 8006cee:	b91e      	cbnz	r6, 8006cf8 <_strtod_l+0x188>
 8006cf0:	9a04      	ldr	r2, [sp, #16]
 8006cf2:	4302      	orrs	r2, r0
 8006cf4:	d094      	beq.n	8006c20 <_strtod_l+0xb0>
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006cfa:	1c6a      	adds	r2, r5, #1
 8006cfc:	9215      	str	r2, [sp, #84]	; 0x54
 8006cfe:	786a      	ldrb	r2, [r5, #1]
 8006d00:	2a2b      	cmp	r2, #43	; 0x2b
 8006d02:	d074      	beq.n	8006dee <_strtod_l+0x27e>
 8006d04:	2a2d      	cmp	r2, #45	; 0x2d
 8006d06:	d078      	beq.n	8006dfa <_strtod_l+0x28a>
 8006d08:	f04f 0c00 	mov.w	ip, #0
 8006d0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d10:	2909      	cmp	r1, #9
 8006d12:	d97f      	bls.n	8006e14 <_strtod_l+0x2a4>
 8006d14:	9515      	str	r5, [sp, #84]	; 0x54
 8006d16:	2700      	movs	r7, #0
 8006d18:	e09e      	b.n	8006e58 <_strtod_l+0x2e8>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e7c8      	b.n	8006cb0 <_strtod_l+0x140>
 8006d1e:	f1bb 0f08 	cmp.w	fp, #8
 8006d22:	bfd8      	it	le
 8006d24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006d26:	f100 0001 	add.w	r0, r0, #1
 8006d2a:	bfda      	itte	le
 8006d2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d30:	9309      	strle	r3, [sp, #36]	; 0x24
 8006d32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006d36:	f10b 0b01 	add.w	fp, fp, #1
 8006d3a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d3c:	e7c1      	b.n	8006cc2 <_strtod_l+0x152>
 8006d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	9215      	str	r2, [sp, #84]	; 0x54
 8006d44:	785a      	ldrb	r2, [r3, #1]
 8006d46:	f1bb 0f00 	cmp.w	fp, #0
 8006d4a:	d037      	beq.n	8006dbc <_strtod_l+0x24c>
 8006d4c:	9005      	str	r0, [sp, #20]
 8006d4e:	465e      	mov	r6, fp
 8006d50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d54:	2b09      	cmp	r3, #9
 8006d56:	d912      	bls.n	8006d7e <_strtod_l+0x20e>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7c4      	b.n	8006ce6 <_strtod_l+0x176>
 8006d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	9215      	str	r2, [sp, #84]	; 0x54
 8006d62:	785a      	ldrb	r2, [r3, #1]
 8006d64:	3001      	adds	r0, #1
 8006d66:	2a30      	cmp	r2, #48	; 0x30
 8006d68:	d0f8      	beq.n	8006d5c <_strtod_l+0x1ec>
 8006d6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	f200 84c1 	bhi.w	80076f6 <_strtod_l+0xb86>
 8006d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d76:	9005      	str	r0, [sp, #20]
 8006d78:	2000      	movs	r0, #0
 8006d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	3a30      	subs	r2, #48	; 0x30
 8006d80:	f100 0301 	add.w	r3, r0, #1
 8006d84:	d014      	beq.n	8006db0 <_strtod_l+0x240>
 8006d86:	9905      	ldr	r1, [sp, #20]
 8006d88:	4419      	add	r1, r3
 8006d8a:	9105      	str	r1, [sp, #20]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	eb00 0c06 	add.w	ip, r0, r6
 8006d92:	210a      	movs	r1, #10
 8006d94:	4563      	cmp	r3, ip
 8006d96:	d113      	bne.n	8006dc0 <_strtod_l+0x250>
 8006d98:	1833      	adds	r3, r6, r0
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	f106 0601 	add.w	r6, r6, #1
 8006da0:	4406      	add	r6, r0
 8006da2:	dc1a      	bgt.n	8006dda <_strtod_l+0x26a>
 8006da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006da6:	230a      	movs	r3, #10
 8006da8:	fb03 2301 	mla	r3, r3, r1, r2
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	2300      	movs	r3, #0
 8006db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006db2:	1c51      	adds	r1, r2, #1
 8006db4:	9115      	str	r1, [sp, #84]	; 0x54
 8006db6:	7852      	ldrb	r2, [r2, #1]
 8006db8:	4618      	mov	r0, r3
 8006dba:	e7c9      	b.n	8006d50 <_strtod_l+0x1e0>
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	e7d2      	b.n	8006d66 <_strtod_l+0x1f6>
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	f103 0301 	add.w	r3, r3, #1
 8006dc6:	dc03      	bgt.n	8006dd0 <_strtod_l+0x260>
 8006dc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dca:	434f      	muls	r7, r1
 8006dcc:	9709      	str	r7, [sp, #36]	; 0x24
 8006dce:	e7e1      	b.n	8006d94 <_strtod_l+0x224>
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	bfd8      	it	le
 8006dd4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006dd8:	e7dc      	b.n	8006d94 <_strtod_l+0x224>
 8006dda:	2e10      	cmp	r6, #16
 8006ddc:	bfdc      	itt	le
 8006dde:	230a      	movle	r3, #10
 8006de0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006de4:	e7e3      	b.n	8006dae <_strtod_l+0x23e>
 8006de6:	2300      	movs	r3, #0
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	2301      	movs	r3, #1
 8006dec:	e780      	b.n	8006cf0 <_strtod_l+0x180>
 8006dee:	f04f 0c00 	mov.w	ip, #0
 8006df2:	1caa      	adds	r2, r5, #2
 8006df4:	9215      	str	r2, [sp, #84]	; 0x54
 8006df6:	78aa      	ldrb	r2, [r5, #2]
 8006df8:	e788      	b.n	8006d0c <_strtod_l+0x19c>
 8006dfa:	f04f 0c01 	mov.w	ip, #1
 8006dfe:	e7f8      	b.n	8006df2 <_strtod_l+0x282>
 8006e00:	08008ba0 	.word	0x08008ba0
 8006e04:	08008b9c 	.word	0x08008b9c
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e0e:	1c51      	adds	r1, r2, #1
 8006e10:	9115      	str	r1, [sp, #84]	; 0x54
 8006e12:	7852      	ldrb	r2, [r2, #1]
 8006e14:	2a30      	cmp	r2, #48	; 0x30
 8006e16:	d0f9      	beq.n	8006e0c <_strtod_l+0x29c>
 8006e18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e1c:	2908      	cmp	r1, #8
 8006e1e:	f63f af7a 	bhi.w	8006d16 <_strtod_l+0x1a6>
 8006e22:	3a30      	subs	r2, #48	; 0x30
 8006e24:	9208      	str	r2, [sp, #32]
 8006e26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e28:	920c      	str	r2, [sp, #48]	; 0x30
 8006e2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e2c:	1c57      	adds	r7, r2, #1
 8006e2e:	9715      	str	r7, [sp, #84]	; 0x54
 8006e30:	7852      	ldrb	r2, [r2, #1]
 8006e32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e36:	f1be 0f09 	cmp.w	lr, #9
 8006e3a:	d938      	bls.n	8006eae <_strtod_l+0x33e>
 8006e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e3e:	1a7f      	subs	r7, r7, r1
 8006e40:	2f08      	cmp	r7, #8
 8006e42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006e46:	dc03      	bgt.n	8006e50 <_strtod_l+0x2e0>
 8006e48:	9908      	ldr	r1, [sp, #32]
 8006e4a:	428f      	cmp	r7, r1
 8006e4c:	bfa8      	it	ge
 8006e4e:	460f      	movge	r7, r1
 8006e50:	f1bc 0f00 	cmp.w	ip, #0
 8006e54:	d000      	beq.n	8006e58 <_strtod_l+0x2e8>
 8006e56:	427f      	negs	r7, r7
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	d14f      	bne.n	8006efc <_strtod_l+0x38c>
 8006e5c:	9904      	ldr	r1, [sp, #16]
 8006e5e:	4301      	orrs	r1, r0
 8006e60:	f47f aec1 	bne.w	8006be6 <_strtod_l+0x76>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f47f aedb 	bne.w	8006c20 <_strtod_l+0xb0>
 8006e6a:	2a69      	cmp	r2, #105	; 0x69
 8006e6c:	d029      	beq.n	8006ec2 <_strtod_l+0x352>
 8006e6e:	dc26      	bgt.n	8006ebe <_strtod_l+0x34e>
 8006e70:	2a49      	cmp	r2, #73	; 0x49
 8006e72:	d026      	beq.n	8006ec2 <_strtod_l+0x352>
 8006e74:	2a4e      	cmp	r2, #78	; 0x4e
 8006e76:	f47f aed3 	bne.w	8006c20 <_strtod_l+0xb0>
 8006e7a:	499b      	ldr	r1, [pc, #620]	; (80070e8 <_strtod_l+0x578>)
 8006e7c:	a815      	add	r0, sp, #84	; 0x54
 8006e7e:	f001 fbef 	bl	8008660 <__match>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f aecc 	beq.w	8006c20 <_strtod_l+0xb0>
 8006e88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b28      	cmp	r3, #40	; 0x28
 8006e8e:	d12f      	bne.n	8006ef0 <_strtod_l+0x380>
 8006e90:	4996      	ldr	r1, [pc, #600]	; (80070ec <_strtod_l+0x57c>)
 8006e92:	aa18      	add	r2, sp, #96	; 0x60
 8006e94:	a815      	add	r0, sp, #84	; 0x54
 8006e96:	f001 fbf7 	bl	8008688 <__hexnan>
 8006e9a:	2805      	cmp	r0, #5
 8006e9c:	d128      	bne.n	8006ef0 <_strtod_l+0x380>
 8006e9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ea4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006ea8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006eac:	e69b      	b.n	8006be6 <_strtod_l+0x76>
 8006eae:	9f08      	ldr	r7, [sp, #32]
 8006eb0:	210a      	movs	r1, #10
 8006eb2:	fb01 2107 	mla	r1, r1, r7, r2
 8006eb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006eba:	9208      	str	r2, [sp, #32]
 8006ebc:	e7b5      	b.n	8006e2a <_strtod_l+0x2ba>
 8006ebe:	2a6e      	cmp	r2, #110	; 0x6e
 8006ec0:	e7d9      	b.n	8006e76 <_strtod_l+0x306>
 8006ec2:	498b      	ldr	r1, [pc, #556]	; (80070f0 <_strtod_l+0x580>)
 8006ec4:	a815      	add	r0, sp, #84	; 0x54
 8006ec6:	f001 fbcb 	bl	8008660 <__match>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	f43f aea8 	beq.w	8006c20 <_strtod_l+0xb0>
 8006ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ed2:	4988      	ldr	r1, [pc, #544]	; (80070f4 <_strtod_l+0x584>)
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	a815      	add	r0, sp, #84	; 0x54
 8006ed8:	9315      	str	r3, [sp, #84]	; 0x54
 8006eda:	f001 fbc1 	bl	8008660 <__match>
 8006ede:	b910      	cbnz	r0, 8006ee6 <_strtod_l+0x376>
 8006ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	9315      	str	r3, [sp, #84]	; 0x54
 8006ee6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007104 <_strtod_l+0x594>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	e67a      	b.n	8006be6 <_strtod_l+0x76>
 8006ef0:	4881      	ldr	r0, [pc, #516]	; (80070f8 <_strtod_l+0x588>)
 8006ef2:	f001 f8d1 	bl	8008098 <nan>
 8006ef6:	ec59 8b10 	vmov	r8, r9, d0
 8006efa:	e674      	b.n	8006be6 <_strtod_l+0x76>
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f00:	1afb      	subs	r3, r7, r3
 8006f02:	f1bb 0f00 	cmp.w	fp, #0
 8006f06:	bf08      	it	eq
 8006f08:	46b3      	moveq	fp, r6
 8006f0a:	2e10      	cmp	r6, #16
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	4635      	mov	r5, r6
 8006f10:	bfa8      	it	ge
 8006f12:	2510      	movge	r5, #16
 8006f14:	f7f9 fb06 	bl	8000524 <__aeabi_ui2d>
 8006f18:	2e09      	cmp	r6, #9
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	4689      	mov	r9, r1
 8006f1e:	dd13      	ble.n	8006f48 <_strtod_l+0x3d8>
 8006f20:	4b76      	ldr	r3, [pc, #472]	; (80070fc <_strtod_l+0x58c>)
 8006f22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f2a:	f7f9 fb75 	bl	8000618 <__aeabi_dmul>
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4650      	mov	r0, sl
 8006f32:	4689      	mov	r9, r1
 8006f34:	f7f9 faf6 	bl	8000524 <__aeabi_ui2d>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	4649      	mov	r1, r9
 8006f40:	f7f9 f9b4 	bl	80002ac <__adddf3>
 8006f44:	4680      	mov	r8, r0
 8006f46:	4689      	mov	r9, r1
 8006f48:	2e0f      	cmp	r6, #15
 8006f4a:	dc38      	bgt.n	8006fbe <_strtod_l+0x44e>
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f43f ae49 	beq.w	8006be6 <_strtod_l+0x76>
 8006f54:	dd24      	ble.n	8006fa0 <_strtod_l+0x430>
 8006f56:	2b16      	cmp	r3, #22
 8006f58:	dc0b      	bgt.n	8006f72 <_strtod_l+0x402>
 8006f5a:	4968      	ldr	r1, [pc, #416]	; (80070fc <_strtod_l+0x58c>)
 8006f5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	f7f9 fb56 	bl	8000618 <__aeabi_dmul>
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	e639      	b.n	8006be6 <_strtod_l+0x76>
 8006f72:	9a08      	ldr	r2, [sp, #32]
 8006f74:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	db20      	blt.n	8006fbe <_strtod_l+0x44e>
 8006f7c:	4c5f      	ldr	r4, [pc, #380]	; (80070fc <_strtod_l+0x58c>)
 8006f7e:	f1c6 060f 	rsb	r6, r6, #15
 8006f82:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006f86:	4642      	mov	r2, r8
 8006f88:	464b      	mov	r3, r9
 8006f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8e:	f7f9 fb43 	bl	8000618 <__aeabi_dmul>
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	1b9e      	subs	r6, r3, r6
 8006f96:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006f9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f9e:	e7e3      	b.n	8006f68 <_strtod_l+0x3f8>
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	3316      	adds	r3, #22
 8006fa4:	db0b      	blt.n	8006fbe <_strtod_l+0x44e>
 8006fa6:	9b05      	ldr	r3, [sp, #20]
 8006fa8:	1bdf      	subs	r7, r3, r7
 8006faa:	4b54      	ldr	r3, [pc, #336]	; (80070fc <_strtod_l+0x58c>)
 8006fac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	f7f9 fc58 	bl	800086c <__aeabi_ddiv>
 8006fbc:	e7d6      	b.n	8006f6c <_strtod_l+0x3fc>
 8006fbe:	9b08      	ldr	r3, [sp, #32]
 8006fc0:	1b75      	subs	r5, r6, r5
 8006fc2:	441d      	add	r5, r3
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	dd70      	ble.n	80070aa <_strtod_l+0x53a>
 8006fc8:	f015 030f 	ands.w	r3, r5, #15
 8006fcc:	d00a      	beq.n	8006fe4 <_strtod_l+0x474>
 8006fce:	494b      	ldr	r1, [pc, #300]	; (80070fc <_strtod_l+0x58c>)
 8006fd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fdc:	f7f9 fb1c 	bl	8000618 <__aeabi_dmul>
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4689      	mov	r9, r1
 8006fe4:	f035 050f 	bics.w	r5, r5, #15
 8006fe8:	d04d      	beq.n	8007086 <_strtod_l+0x516>
 8006fea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006fee:	dd22      	ble.n	8007036 <_strtod_l+0x4c6>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	46ab      	mov	fp, r5
 8006ff4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ff6:	9505      	str	r5, [sp, #20]
 8006ff8:	2322      	movs	r3, #34	; 0x22
 8006ffa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007104 <_strtod_l+0x594>
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	f04f 0800 	mov.w	r8, #0
 8007004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	f43f aded 	beq.w	8006be6 <_strtod_l+0x76>
 800700c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800700e:	4620      	mov	r0, r4
 8007010:	f7ff f924 	bl	800625c <_Bfree>
 8007014:	9905      	ldr	r1, [sp, #20]
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff f920 	bl	800625c <_Bfree>
 800701c:	4659      	mov	r1, fp
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff f91c 	bl	800625c <_Bfree>
 8007024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007026:	4620      	mov	r0, r4
 8007028:	f7ff f918 	bl	800625c <_Bfree>
 800702c:	4629      	mov	r1, r5
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff f914 	bl	800625c <_Bfree>
 8007034:	e5d7      	b.n	8006be6 <_strtod_l+0x76>
 8007036:	4b32      	ldr	r3, [pc, #200]	; (8007100 <_strtod_l+0x590>)
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	112d      	asrs	r5, r5, #4
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	469a      	mov	sl, r3
 8007044:	2d01      	cmp	r5, #1
 8007046:	dc21      	bgt.n	800708c <_strtod_l+0x51c>
 8007048:	b10b      	cbz	r3, 800704e <_strtod_l+0x4de>
 800704a:	4680      	mov	r8, r0
 800704c:	4689      	mov	r9, r1
 800704e:	492c      	ldr	r1, [pc, #176]	; (8007100 <_strtod_l+0x590>)
 8007050:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007054:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007060:	f7f9 fada 	bl	8000618 <__aeabi_dmul>
 8007064:	4b27      	ldr	r3, [pc, #156]	; (8007104 <_strtod_l+0x594>)
 8007066:	460a      	mov	r2, r1
 8007068:	400b      	ands	r3, r1
 800706a:	4927      	ldr	r1, [pc, #156]	; (8007108 <_strtod_l+0x598>)
 800706c:	428b      	cmp	r3, r1
 800706e:	4680      	mov	r8, r0
 8007070:	d8be      	bhi.n	8006ff0 <_strtod_l+0x480>
 8007072:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007076:	428b      	cmp	r3, r1
 8007078:	bf86      	itte	hi
 800707a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800710c <_strtod_l+0x59c>
 800707e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007082:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007086:	2300      	movs	r3, #0
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	e07b      	b.n	8007184 <_strtod_l+0x614>
 800708c:	07ea      	lsls	r2, r5, #31
 800708e:	d505      	bpl.n	800709c <_strtod_l+0x52c>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 fabf 	bl	8000618 <__aeabi_dmul>
 800709a:	2301      	movs	r3, #1
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	3208      	adds	r2, #8
 80070a0:	f10a 0a01 	add.w	sl, sl, #1
 80070a4:	106d      	asrs	r5, r5, #1
 80070a6:	9204      	str	r2, [sp, #16]
 80070a8:	e7cc      	b.n	8007044 <_strtod_l+0x4d4>
 80070aa:	d0ec      	beq.n	8007086 <_strtod_l+0x516>
 80070ac:	426d      	negs	r5, r5
 80070ae:	f015 020f 	ands.w	r2, r5, #15
 80070b2:	d00a      	beq.n	80070ca <_strtod_l+0x55a>
 80070b4:	4b11      	ldr	r3, [pc, #68]	; (80070fc <_strtod_l+0x58c>)
 80070b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 fbd3 	bl	800086c <__aeabi_ddiv>
 80070c6:	4680      	mov	r8, r0
 80070c8:	4689      	mov	r9, r1
 80070ca:	112d      	asrs	r5, r5, #4
 80070cc:	d0db      	beq.n	8007086 <_strtod_l+0x516>
 80070ce:	2d1f      	cmp	r5, #31
 80070d0:	dd1e      	ble.n	8007110 <_strtod_l+0x5a0>
 80070d2:	2500      	movs	r5, #0
 80070d4:	46ab      	mov	fp, r5
 80070d6:	9509      	str	r5, [sp, #36]	; 0x24
 80070d8:	9505      	str	r5, [sp, #20]
 80070da:	2322      	movs	r3, #34	; 0x22
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	f04f 0900 	mov.w	r9, #0
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	e78d      	b.n	8007004 <_strtod_l+0x494>
 80070e8:	0800898d 	.word	0x0800898d
 80070ec:	08008bb4 	.word	0x08008bb4
 80070f0:	08008985 	.word	0x08008985
 80070f4:	080089bc 	.word	0x080089bc
 80070f8:	08008d45 	.word	0x08008d45
 80070fc:	08008ac8 	.word	0x08008ac8
 8007100:	08008aa0 	.word	0x08008aa0
 8007104:	7ff00000 	.word	0x7ff00000
 8007108:	7ca00000 	.word	0x7ca00000
 800710c:	7fefffff 	.word	0x7fefffff
 8007110:	f015 0310 	ands.w	r3, r5, #16
 8007114:	bf18      	it	ne
 8007116:	236a      	movne	r3, #106	; 0x6a
 8007118:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80074bc <_strtod_l+0x94c>
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	2300      	movs	r3, #0
 8007124:	07ea      	lsls	r2, r5, #31
 8007126:	d504      	bpl.n	8007132 <_strtod_l+0x5c2>
 8007128:	e9da 2300 	ldrd	r2, r3, [sl]
 800712c:	f7f9 fa74 	bl	8000618 <__aeabi_dmul>
 8007130:	2301      	movs	r3, #1
 8007132:	106d      	asrs	r5, r5, #1
 8007134:	f10a 0a08 	add.w	sl, sl, #8
 8007138:	d1f4      	bne.n	8007124 <_strtod_l+0x5b4>
 800713a:	b10b      	cbz	r3, 8007140 <_strtod_l+0x5d0>
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	9b04      	ldr	r3, [sp, #16]
 8007142:	b1bb      	cbz	r3, 8007174 <_strtod_l+0x604>
 8007144:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007148:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800714c:	2b00      	cmp	r3, #0
 800714e:	4649      	mov	r1, r9
 8007150:	dd10      	ble.n	8007174 <_strtod_l+0x604>
 8007152:	2b1f      	cmp	r3, #31
 8007154:	f340 811e 	ble.w	8007394 <_strtod_l+0x824>
 8007158:	2b34      	cmp	r3, #52	; 0x34
 800715a:	bfde      	ittt	le
 800715c:	f04f 33ff 	movle.w	r3, #4294967295
 8007160:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007164:	4093      	lslle	r3, r2
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	bfcc      	ite	gt
 800716c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007170:	ea03 0901 	andle.w	r9, r3, r1
 8007174:	2200      	movs	r2, #0
 8007176:	2300      	movs	r3, #0
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007180:	2800      	cmp	r0, #0
 8007182:	d1a6      	bne.n	80070d2 <_strtod_l+0x562>
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800718a:	4633      	mov	r3, r6
 800718c:	465a      	mov	r2, fp
 800718e:	4620      	mov	r0, r4
 8007190:	f7ff f8cc 	bl	800632c <__s2b>
 8007194:	9009      	str	r0, [sp, #36]	; 0x24
 8007196:	2800      	cmp	r0, #0
 8007198:	f43f af2a 	beq.w	8006ff0 <_strtod_l+0x480>
 800719c:	9a08      	ldr	r2, [sp, #32]
 800719e:	9b05      	ldr	r3, [sp, #20]
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	eba3 0307 	sub.w	r3, r3, r7
 80071a6:	bfa8      	it	ge
 80071a8:	2300      	movge	r3, #0
 80071aa:	930c      	str	r3, [sp, #48]	; 0x30
 80071ac:	2500      	movs	r5, #0
 80071ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071b2:	9312      	str	r3, [sp, #72]	; 0x48
 80071b4:	46ab      	mov	fp, r5
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	4620      	mov	r0, r4
 80071ba:	6859      	ldr	r1, [r3, #4]
 80071bc:	f7ff f80e 	bl	80061dc <_Balloc>
 80071c0:	9005      	str	r0, [sp, #20]
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f43f af18 	beq.w	8006ff8 <_strtod_l+0x488>
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	f103 010c 	add.w	r1, r3, #12
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	300c      	adds	r0, #12
 80071d6:	f000 ff4f 	bl	8008078 <memcpy>
 80071da:	ec49 8b10 	vmov	d0, r8, r9
 80071de:	aa18      	add	r2, sp, #96	; 0x60
 80071e0:	a917      	add	r1, sp, #92	; 0x5c
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7ff fbd6 	bl	8006994 <__d2b>
 80071e8:	ec49 8b18 	vmov	d8, r8, r9
 80071ec:	9016      	str	r0, [sp, #88]	; 0x58
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f43f af02 	beq.w	8006ff8 <_strtod_l+0x488>
 80071f4:	2101      	movs	r1, #1
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff f930 	bl	800645c <__i2b>
 80071fc:	4683      	mov	fp, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f aefa 	beq.w	8006ff8 <_strtod_l+0x488>
 8007204:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007206:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007208:	2e00      	cmp	r6, #0
 800720a:	bfab      	itete	ge
 800720c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800720e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007210:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007212:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007216:	bfac      	ite	ge
 8007218:	eb06 0a03 	addge.w	sl, r6, r3
 800721c:	1b9f      	sublt	r7, r3, r6
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	1af6      	subs	r6, r6, r3
 8007222:	4416      	add	r6, r2
 8007224:	4ba0      	ldr	r3, [pc, #640]	; (80074a8 <_strtod_l+0x938>)
 8007226:	3e01      	subs	r6, #1
 8007228:	429e      	cmp	r6, r3
 800722a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800722e:	f280 80c4 	bge.w	80073ba <_strtod_l+0x84a>
 8007232:	1b9b      	subs	r3, r3, r6
 8007234:	2b1f      	cmp	r3, #31
 8007236:	eba2 0203 	sub.w	r2, r2, r3
 800723a:	f04f 0101 	mov.w	r1, #1
 800723e:	f300 80b0 	bgt.w	80073a2 <_strtod_l+0x832>
 8007242:	fa01 f303 	lsl.w	r3, r1, r3
 8007246:	930e      	str	r3, [sp, #56]	; 0x38
 8007248:	2300      	movs	r3, #0
 800724a:	930d      	str	r3, [sp, #52]	; 0x34
 800724c:	eb0a 0602 	add.w	r6, sl, r2
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	45b2      	cmp	sl, r6
 8007254:	4417      	add	r7, r2
 8007256:	441f      	add	r7, r3
 8007258:	4653      	mov	r3, sl
 800725a:	bfa8      	it	ge
 800725c:	4633      	movge	r3, r6
 800725e:	42bb      	cmp	r3, r7
 8007260:	bfa8      	it	ge
 8007262:	463b      	movge	r3, r7
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfc2      	ittt	gt
 8007268:	1af6      	subgt	r6, r6, r3
 800726a:	1aff      	subgt	r7, r7, r3
 800726c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd17      	ble.n	80072a6 <_strtod_l+0x736>
 8007276:	4659      	mov	r1, fp
 8007278:	461a      	mov	r2, r3
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff f9ae 	bl	80065dc <__pow5mult>
 8007280:	4683      	mov	fp, r0
 8007282:	2800      	cmp	r0, #0
 8007284:	f43f aeb8 	beq.w	8006ff8 <_strtod_l+0x488>
 8007288:	4601      	mov	r1, r0
 800728a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff f8fb 	bl	8006488 <__multiply>
 8007292:	900b      	str	r0, [sp, #44]	; 0x2c
 8007294:	2800      	cmp	r0, #0
 8007296:	f43f aeaf 	beq.w	8006ff8 <_strtod_l+0x488>
 800729a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800729c:	4620      	mov	r0, r4
 800729e:	f7fe ffdd 	bl	800625c <_Bfree>
 80072a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a4:	9316      	str	r3, [sp, #88]	; 0x58
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	f300 808c 	bgt.w	80073c4 <_strtod_l+0x854>
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dd08      	ble.n	80072c4 <_strtod_l+0x754>
 80072b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b4:	9905      	ldr	r1, [sp, #20]
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff f990 	bl	80065dc <__pow5mult>
 80072bc:	9005      	str	r0, [sp, #20]
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f ae9a 	beq.w	8006ff8 <_strtod_l+0x488>
 80072c4:	2f00      	cmp	r7, #0
 80072c6:	dd08      	ble.n	80072da <_strtod_l+0x76a>
 80072c8:	9905      	ldr	r1, [sp, #20]
 80072ca:	463a      	mov	r2, r7
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7ff f9df 	bl	8006690 <__lshift>
 80072d2:	9005      	str	r0, [sp, #20]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f43f ae8f 	beq.w	8006ff8 <_strtod_l+0x488>
 80072da:	f1ba 0f00 	cmp.w	sl, #0
 80072de:	dd08      	ble.n	80072f2 <_strtod_l+0x782>
 80072e0:	4659      	mov	r1, fp
 80072e2:	4652      	mov	r2, sl
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7ff f9d3 	bl	8006690 <__lshift>
 80072ea:	4683      	mov	fp, r0
 80072ec:	2800      	cmp	r0, #0
 80072ee:	f43f ae83 	beq.w	8006ff8 <_strtod_l+0x488>
 80072f2:	9a05      	ldr	r2, [sp, #20]
 80072f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff fa52 	bl	80067a0 <__mdiff>
 80072fc:	4605      	mov	r5, r0
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f ae7a 	beq.w	8006ff8 <_strtod_l+0x488>
 8007304:	68c3      	ldr	r3, [r0, #12]
 8007306:	930b      	str	r3, [sp, #44]	; 0x2c
 8007308:	2300      	movs	r3, #0
 800730a:	60c3      	str	r3, [r0, #12]
 800730c:	4659      	mov	r1, fp
 800730e:	f7ff fa2b 	bl	8006768 <__mcmp>
 8007312:	2800      	cmp	r0, #0
 8007314:	da60      	bge.n	80073d8 <_strtod_l+0x868>
 8007316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007318:	ea53 0308 	orrs.w	r3, r3, r8
 800731c:	f040 8084 	bne.w	8007428 <_strtod_l+0x8b8>
 8007320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007324:	2b00      	cmp	r3, #0
 8007326:	d17f      	bne.n	8007428 <_strtod_l+0x8b8>
 8007328:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800732c:	0d1b      	lsrs	r3, r3, #20
 800732e:	051b      	lsls	r3, r3, #20
 8007330:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007334:	d978      	bls.n	8007428 <_strtod_l+0x8b8>
 8007336:	696b      	ldr	r3, [r5, #20]
 8007338:	b913      	cbnz	r3, 8007340 <_strtod_l+0x7d0>
 800733a:	692b      	ldr	r3, [r5, #16]
 800733c:	2b01      	cmp	r3, #1
 800733e:	dd73      	ble.n	8007428 <_strtod_l+0x8b8>
 8007340:	4629      	mov	r1, r5
 8007342:	2201      	movs	r2, #1
 8007344:	4620      	mov	r0, r4
 8007346:	f7ff f9a3 	bl	8006690 <__lshift>
 800734a:	4659      	mov	r1, fp
 800734c:	4605      	mov	r5, r0
 800734e:	f7ff fa0b 	bl	8006768 <__mcmp>
 8007352:	2800      	cmp	r0, #0
 8007354:	dd68      	ble.n	8007428 <_strtod_l+0x8b8>
 8007356:	9904      	ldr	r1, [sp, #16]
 8007358:	4a54      	ldr	r2, [pc, #336]	; (80074ac <_strtod_l+0x93c>)
 800735a:	464b      	mov	r3, r9
 800735c:	2900      	cmp	r1, #0
 800735e:	f000 8084 	beq.w	800746a <_strtod_l+0x8fa>
 8007362:	ea02 0109 	and.w	r1, r2, r9
 8007366:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800736a:	dc7e      	bgt.n	800746a <_strtod_l+0x8fa>
 800736c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007370:	f77f aeb3 	ble.w	80070da <_strtod_l+0x56a>
 8007374:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <_strtod_l+0x940>)
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	2200      	movs	r2, #0
 800737c:	f7f9 f94c 	bl	8000618 <__aeabi_dmul>
 8007380:	4b4a      	ldr	r3, [pc, #296]	; (80074ac <_strtod_l+0x93c>)
 8007382:	400b      	ands	r3, r1
 8007384:	4680      	mov	r8, r0
 8007386:	4689      	mov	r9, r1
 8007388:	2b00      	cmp	r3, #0
 800738a:	f47f ae3f 	bne.w	800700c <_strtod_l+0x49c>
 800738e:	2322      	movs	r3, #34	; 0x22
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	e63b      	b.n	800700c <_strtod_l+0x49c>
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	ea03 0808 	and.w	r8, r3, r8
 80073a0:	e6e8      	b.n	8007174 <_strtod_l+0x604>
 80073a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80073a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80073aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80073ae:	36e2      	adds	r6, #226	; 0xe2
 80073b0:	fa01 f306 	lsl.w	r3, r1, r6
 80073b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80073b8:	e748      	b.n	800724c <_strtod_l+0x6dc>
 80073ba:	2100      	movs	r1, #0
 80073bc:	2301      	movs	r3, #1
 80073be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80073c2:	e743      	b.n	800724c <_strtod_l+0x6dc>
 80073c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80073c6:	4632      	mov	r2, r6
 80073c8:	4620      	mov	r0, r4
 80073ca:	f7ff f961 	bl	8006690 <__lshift>
 80073ce:	9016      	str	r0, [sp, #88]	; 0x58
 80073d0:	2800      	cmp	r0, #0
 80073d2:	f47f af6b 	bne.w	80072ac <_strtod_l+0x73c>
 80073d6:	e60f      	b.n	8006ff8 <_strtod_l+0x488>
 80073d8:	46ca      	mov	sl, r9
 80073da:	d171      	bne.n	80074c0 <_strtod_l+0x950>
 80073dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073e2:	b352      	cbz	r2, 800743a <_strtod_l+0x8ca>
 80073e4:	4a33      	ldr	r2, [pc, #204]	; (80074b4 <_strtod_l+0x944>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d12a      	bne.n	8007440 <_strtod_l+0x8d0>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	4641      	mov	r1, r8
 80073ee:	b1fb      	cbz	r3, 8007430 <_strtod_l+0x8c0>
 80073f0:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <_strtod_l+0x93c>)
 80073f2:	ea09 0303 	and.w	r3, r9, r3
 80073f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	d81a      	bhi.n	8007436 <_strtod_l+0x8c6>
 8007400:	0d1b      	lsrs	r3, r3, #20
 8007402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	4299      	cmp	r1, r3
 800740c:	d118      	bne.n	8007440 <_strtod_l+0x8d0>
 800740e:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <_strtod_l+0x948>)
 8007410:	459a      	cmp	sl, r3
 8007412:	d102      	bne.n	800741a <_strtod_l+0x8aa>
 8007414:	3101      	adds	r1, #1
 8007416:	f43f adef 	beq.w	8006ff8 <_strtod_l+0x488>
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <_strtod_l+0x93c>)
 800741c:	ea0a 0303 	and.w	r3, sl, r3
 8007420:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007424:	f04f 0800 	mov.w	r8, #0
 8007428:	9b04      	ldr	r3, [sp, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1a2      	bne.n	8007374 <_strtod_l+0x804>
 800742e:	e5ed      	b.n	800700c <_strtod_l+0x49c>
 8007430:	f04f 33ff 	mov.w	r3, #4294967295
 8007434:	e7e9      	b.n	800740a <_strtod_l+0x89a>
 8007436:	4613      	mov	r3, r2
 8007438:	e7e7      	b.n	800740a <_strtod_l+0x89a>
 800743a:	ea53 0308 	orrs.w	r3, r3, r8
 800743e:	d08a      	beq.n	8007356 <_strtod_l+0x7e6>
 8007440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007442:	b1e3      	cbz	r3, 800747e <_strtod_l+0x90e>
 8007444:	ea13 0f0a 	tst.w	r3, sl
 8007448:	d0ee      	beq.n	8007428 <_strtod_l+0x8b8>
 800744a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744c:	9a04      	ldr	r2, [sp, #16]
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	b1c3      	cbz	r3, 8007486 <_strtod_l+0x916>
 8007454:	f7ff fb6f 	bl	8006b36 <sulp>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	ec51 0b18 	vmov	r0, r1, d8
 8007460:	f7f8 ff24 	bl	80002ac <__adddf3>
 8007464:	4680      	mov	r8, r0
 8007466:	4689      	mov	r9, r1
 8007468:	e7de      	b.n	8007428 <_strtod_l+0x8b8>
 800746a:	4013      	ands	r3, r2
 800746c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007470:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007474:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007478:	f04f 38ff 	mov.w	r8, #4294967295
 800747c:	e7d4      	b.n	8007428 <_strtod_l+0x8b8>
 800747e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007480:	ea13 0f08 	tst.w	r3, r8
 8007484:	e7e0      	b.n	8007448 <_strtod_l+0x8d8>
 8007486:	f7ff fb56 	bl	8006b36 <sulp>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	ec51 0b18 	vmov	r0, r1, d8
 8007492:	f7f8 ff09 	bl	80002a8 <__aeabi_dsub>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4680      	mov	r8, r0
 800749c:	4689      	mov	r9, r1
 800749e:	f7f9 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d0c0      	beq.n	8007428 <_strtod_l+0x8b8>
 80074a6:	e618      	b.n	80070da <_strtod_l+0x56a>
 80074a8:	fffffc02 	.word	0xfffffc02
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	39500000 	.word	0x39500000
 80074b4:	000fffff 	.word	0x000fffff
 80074b8:	7fefffff 	.word	0x7fefffff
 80074bc:	08008bc8 	.word	0x08008bc8
 80074c0:	4659      	mov	r1, fp
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7ff fac0 	bl	8006a48 <__ratio>
 80074c8:	ec57 6b10 	vmov	r6, r7, d0
 80074cc:	ee10 0a10 	vmov	r0, s0
 80074d0:	2200      	movs	r2, #0
 80074d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 fb1a 	bl	8000b10 <__aeabi_dcmple>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d071      	beq.n	80075c4 <_strtod_l+0xa54>
 80074e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d17c      	bne.n	80075e0 <_strtod_l+0xa70>
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	d15a      	bne.n	80075a2 <_strtod_l+0xa32>
 80074ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d15d      	bne.n	80075b0 <_strtod_l+0xa40>
 80074f4:	4b90      	ldr	r3, [pc, #576]	; (8007738 <_strtod_l+0xbc8>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f9 fafe 	bl	8000afc <__aeabi_dcmplt>
 8007500:	2800      	cmp	r0, #0
 8007502:	d15c      	bne.n	80075be <_strtod_l+0xa4e>
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	4b8c      	ldr	r3, [pc, #560]	; (800773c <_strtod_l+0xbcc>)
 800750a:	2200      	movs	r2, #0
 800750c:	f7f9 f884 	bl	8000618 <__aeabi_dmul>
 8007510:	4606      	mov	r6, r0
 8007512:	460f      	mov	r7, r1
 8007514:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007518:	9606      	str	r6, [sp, #24]
 800751a:	9307      	str	r3, [sp, #28]
 800751c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007520:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007524:	4b86      	ldr	r3, [pc, #536]	; (8007740 <_strtod_l+0xbd0>)
 8007526:	ea0a 0303 	and.w	r3, sl, r3
 800752a:	930d      	str	r3, [sp, #52]	; 0x34
 800752c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800752e:	4b85      	ldr	r3, [pc, #532]	; (8007744 <_strtod_l+0xbd4>)
 8007530:	429a      	cmp	r2, r3
 8007532:	f040 8090 	bne.w	8007656 <_strtod_l+0xae6>
 8007536:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800753a:	ec49 8b10 	vmov	d0, r8, r9
 800753e:	f7ff f9b9 	bl	80068b4 <__ulp>
 8007542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007546:	ec51 0b10 	vmov	r0, r1, d0
 800754a:	f7f9 f865 	bl	8000618 <__aeabi_dmul>
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	f7f8 feab 	bl	80002ac <__adddf3>
 8007556:	460b      	mov	r3, r1
 8007558:	4979      	ldr	r1, [pc, #484]	; (8007740 <_strtod_l+0xbd0>)
 800755a:	4a7b      	ldr	r2, [pc, #492]	; (8007748 <_strtod_l+0xbd8>)
 800755c:	4019      	ands	r1, r3
 800755e:	4291      	cmp	r1, r2
 8007560:	4680      	mov	r8, r0
 8007562:	d944      	bls.n	80075ee <_strtod_l+0xa7e>
 8007564:	ee18 2a90 	vmov	r2, s17
 8007568:	4b78      	ldr	r3, [pc, #480]	; (800774c <_strtod_l+0xbdc>)
 800756a:	429a      	cmp	r2, r3
 800756c:	d104      	bne.n	8007578 <_strtod_l+0xa08>
 800756e:	ee18 3a10 	vmov	r3, s16
 8007572:	3301      	adds	r3, #1
 8007574:	f43f ad40 	beq.w	8006ff8 <_strtod_l+0x488>
 8007578:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800774c <_strtod_l+0xbdc>
 800757c:	f04f 38ff 	mov.w	r8, #4294967295
 8007580:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007582:	4620      	mov	r0, r4
 8007584:	f7fe fe6a 	bl	800625c <_Bfree>
 8007588:	9905      	ldr	r1, [sp, #20]
 800758a:	4620      	mov	r0, r4
 800758c:	f7fe fe66 	bl	800625c <_Bfree>
 8007590:	4659      	mov	r1, fp
 8007592:	4620      	mov	r0, r4
 8007594:	f7fe fe62 	bl	800625c <_Bfree>
 8007598:	4629      	mov	r1, r5
 800759a:	4620      	mov	r0, r4
 800759c:	f7fe fe5e 	bl	800625c <_Bfree>
 80075a0:	e609      	b.n	80071b6 <_strtod_l+0x646>
 80075a2:	f1b8 0f01 	cmp.w	r8, #1
 80075a6:	d103      	bne.n	80075b0 <_strtod_l+0xa40>
 80075a8:	f1b9 0f00 	cmp.w	r9, #0
 80075ac:	f43f ad95 	beq.w	80070da <_strtod_l+0x56a>
 80075b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007708 <_strtod_l+0xb98>
 80075b4:	4f60      	ldr	r7, [pc, #384]	; (8007738 <_strtod_l+0xbc8>)
 80075b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075ba:	2600      	movs	r6, #0
 80075bc:	e7ae      	b.n	800751c <_strtod_l+0x9ac>
 80075be:	4f5f      	ldr	r7, [pc, #380]	; (800773c <_strtod_l+0xbcc>)
 80075c0:	2600      	movs	r6, #0
 80075c2:	e7a7      	b.n	8007514 <_strtod_l+0x9a4>
 80075c4:	4b5d      	ldr	r3, [pc, #372]	; (800773c <_strtod_l+0xbcc>)
 80075c6:	4630      	mov	r0, r6
 80075c8:	4639      	mov	r1, r7
 80075ca:	2200      	movs	r2, #0
 80075cc:	f7f9 f824 	bl	8000618 <__aeabi_dmul>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d09c      	beq.n	8007514 <_strtod_l+0x9a4>
 80075da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80075de:	e79d      	b.n	800751c <_strtod_l+0x9ac>
 80075e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007710 <_strtod_l+0xba0>
 80075e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075e8:	ec57 6b17 	vmov	r6, r7, d7
 80075ec:	e796      	b.n	800751c <_strtod_l+0x9ac>
 80075ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	46ca      	mov	sl, r9
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1c2      	bne.n	8007580 <_strtod_l+0xa10>
 80075fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	429a      	cmp	r2, r3
 8007606:	d1bb      	bne.n	8007580 <_strtod_l+0xa10>
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	f7f9 fb64 	bl	8000cd8 <__aeabi_d2lz>
 8007610:	f7f8 ffd4 	bl	80005bc <__aeabi_l2d>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fe44 	bl	80002a8 <__aeabi_dsub>
 8007620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007622:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007626:	ea43 0308 	orr.w	r3, r3, r8
 800762a:	4313      	orrs	r3, r2
 800762c:	4606      	mov	r6, r0
 800762e:	460f      	mov	r7, r1
 8007630:	d054      	beq.n	80076dc <_strtod_l+0xb6c>
 8007632:	a339      	add	r3, pc, #228	; (adr r3, 8007718 <_strtod_l+0xba8>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f9 fa60 	bl	8000afc <__aeabi_dcmplt>
 800763c:	2800      	cmp	r0, #0
 800763e:	f47f ace5 	bne.w	800700c <_strtod_l+0x49c>
 8007642:	a337      	add	r3, pc, #220	; (adr r3, 8007720 <_strtod_l+0xbb0>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa74 	bl	8000b38 <__aeabi_dcmpgt>
 8007650:	2800      	cmp	r0, #0
 8007652:	d095      	beq.n	8007580 <_strtod_l+0xa10>
 8007654:	e4da      	b.n	800700c <_strtod_l+0x49c>
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	b333      	cbz	r3, 80076a8 <_strtod_l+0xb38>
 800765a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007660:	d822      	bhi.n	80076a8 <_strtod_l+0xb38>
 8007662:	a331      	add	r3, pc, #196	; (adr r3, 8007728 <_strtod_l+0xbb8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f9 fa50 	bl	8000b10 <__aeabi_dcmple>
 8007670:	b1a0      	cbz	r0, 800769c <_strtod_l+0xb2c>
 8007672:	4639      	mov	r1, r7
 8007674:	4630      	mov	r0, r6
 8007676:	f7f9 faa7 	bl	8000bc8 <__aeabi_d2uiz>
 800767a:	2801      	cmp	r0, #1
 800767c:	bf38      	it	cc
 800767e:	2001      	movcc	r0, #1
 8007680:	f7f8 ff50 	bl	8000524 <__aeabi_ui2d>
 8007684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	bb23      	cbnz	r3, 80076d6 <_strtod_l+0xb66>
 800768c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007690:	9010      	str	r0, [sp, #64]	; 0x40
 8007692:	9311      	str	r3, [sp, #68]	; 0x44
 8007694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007698:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800769c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800769e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076ac:	eeb0 0a48 	vmov.f32	s0, s16
 80076b0:	eef0 0a68 	vmov.f32	s1, s17
 80076b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80076b8:	f7ff f8fc 	bl	80068b4 <__ulp>
 80076bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076c0:	ec53 2b10 	vmov	r2, r3, d0
 80076c4:	f7f8 ffa8 	bl	8000618 <__aeabi_dmul>
 80076c8:	ec53 2b18 	vmov	r2, r3, d8
 80076cc:	f7f8 fdee 	bl	80002ac <__adddf3>
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	e78d      	b.n	80075f2 <_strtod_l+0xa82>
 80076d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80076da:	e7db      	b.n	8007694 <_strtod_l+0xb24>
 80076dc:	a314      	add	r3, pc, #80	; (adr r3, 8007730 <_strtod_l+0xbc0>)
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f7f9 fa0b 	bl	8000afc <__aeabi_dcmplt>
 80076e6:	e7b3      	b.n	8007650 <_strtod_l+0xae0>
 80076e8:	2300      	movs	r3, #0
 80076ea:	930a      	str	r3, [sp, #40]	; 0x28
 80076ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	f7ff ba7c 	b.w	8006bee <_strtod_l+0x7e>
 80076f6:	2a65      	cmp	r2, #101	; 0x65
 80076f8:	f43f ab75 	beq.w	8006de6 <_strtod_l+0x276>
 80076fc:	2a45      	cmp	r2, #69	; 0x45
 80076fe:	f43f ab72 	beq.w	8006de6 <_strtod_l+0x276>
 8007702:	2301      	movs	r3, #1
 8007704:	f7ff bbaa 	b.w	8006e5c <_strtod_l+0x2ec>
 8007708:	00000000 	.word	0x00000000
 800770c:	bff00000 	.word	0xbff00000
 8007710:	00000000 	.word	0x00000000
 8007714:	3ff00000 	.word	0x3ff00000
 8007718:	94a03595 	.word	0x94a03595
 800771c:	3fdfffff 	.word	0x3fdfffff
 8007720:	35afe535 	.word	0x35afe535
 8007724:	3fe00000 	.word	0x3fe00000
 8007728:	ffc00000 	.word	0xffc00000
 800772c:	41dfffff 	.word	0x41dfffff
 8007730:	94a03595 	.word	0x94a03595
 8007734:	3fcfffff 	.word	0x3fcfffff
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	3fe00000 	.word	0x3fe00000
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	7fe00000 	.word	0x7fe00000
 8007748:	7c9fffff 	.word	0x7c9fffff
 800774c:	7fefffff 	.word	0x7fefffff

08007750 <_strtod_r>:
 8007750:	4b01      	ldr	r3, [pc, #4]	; (8007758 <_strtod_r+0x8>)
 8007752:	f7ff ba0d 	b.w	8006b70 <_strtod_l>
 8007756:	bf00      	nop
 8007758:	20000068 	.word	0x20000068

0800775c <_strtol_l.constprop.0>:
 800775c:	2b01      	cmp	r3, #1
 800775e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007762:	d001      	beq.n	8007768 <_strtol_l.constprop.0+0xc>
 8007764:	2b24      	cmp	r3, #36	; 0x24
 8007766:	d906      	bls.n	8007776 <_strtol_l.constprop.0+0x1a>
 8007768:	f7fd fd8a 	bl	8005280 <__errno>
 800776c:	2316      	movs	r3, #22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	2000      	movs	r0, #0
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800785c <_strtol_l.constprop.0+0x100>
 800777a:	460d      	mov	r5, r1
 800777c:	462e      	mov	r6, r5
 800777e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007782:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007786:	f017 0708 	ands.w	r7, r7, #8
 800778a:	d1f7      	bne.n	800777c <_strtol_l.constprop.0+0x20>
 800778c:	2c2d      	cmp	r4, #45	; 0x2d
 800778e:	d132      	bne.n	80077f6 <_strtol_l.constprop.0+0x9a>
 8007790:	782c      	ldrb	r4, [r5, #0]
 8007792:	2701      	movs	r7, #1
 8007794:	1cb5      	adds	r5, r6, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d05b      	beq.n	8007852 <_strtol_l.constprop.0+0xf6>
 800779a:	2b10      	cmp	r3, #16
 800779c:	d109      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 800779e:	2c30      	cmp	r4, #48	; 0x30
 80077a0:	d107      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 80077a2:	782c      	ldrb	r4, [r5, #0]
 80077a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077a8:	2c58      	cmp	r4, #88	; 0x58
 80077aa:	d14d      	bne.n	8007848 <_strtol_l.constprop.0+0xec>
 80077ac:	786c      	ldrb	r4, [r5, #1]
 80077ae:	2310      	movs	r3, #16
 80077b0:	3502      	adds	r5, #2
 80077b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ba:	f04f 0e00 	mov.w	lr, #0
 80077be:	fbb8 f9f3 	udiv	r9, r8, r3
 80077c2:	4676      	mov	r6, lr
 80077c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80077c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80077cc:	f1bc 0f09 	cmp.w	ip, #9
 80077d0:	d816      	bhi.n	8007800 <_strtol_l.constprop.0+0xa4>
 80077d2:	4664      	mov	r4, ip
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	dd24      	ble.n	8007822 <_strtol_l.constprop.0+0xc6>
 80077d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80077dc:	d008      	beq.n	80077f0 <_strtol_l.constprop.0+0x94>
 80077de:	45b1      	cmp	r9, r6
 80077e0:	d31c      	bcc.n	800781c <_strtol_l.constprop.0+0xc0>
 80077e2:	d101      	bne.n	80077e8 <_strtol_l.constprop.0+0x8c>
 80077e4:	45a2      	cmp	sl, r4
 80077e6:	db19      	blt.n	800781c <_strtol_l.constprop.0+0xc0>
 80077e8:	fb06 4603 	mla	r6, r6, r3, r4
 80077ec:	f04f 0e01 	mov.w	lr, #1
 80077f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077f4:	e7e8      	b.n	80077c8 <_strtol_l.constprop.0+0x6c>
 80077f6:	2c2b      	cmp	r4, #43	; 0x2b
 80077f8:	bf04      	itt	eq
 80077fa:	782c      	ldrbeq	r4, [r5, #0]
 80077fc:	1cb5      	addeq	r5, r6, #2
 80077fe:	e7ca      	b.n	8007796 <_strtol_l.constprop.0+0x3a>
 8007800:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007804:	f1bc 0f19 	cmp.w	ip, #25
 8007808:	d801      	bhi.n	800780e <_strtol_l.constprop.0+0xb2>
 800780a:	3c37      	subs	r4, #55	; 0x37
 800780c:	e7e2      	b.n	80077d4 <_strtol_l.constprop.0+0x78>
 800780e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007812:	f1bc 0f19 	cmp.w	ip, #25
 8007816:	d804      	bhi.n	8007822 <_strtol_l.constprop.0+0xc6>
 8007818:	3c57      	subs	r4, #87	; 0x57
 800781a:	e7db      	b.n	80077d4 <_strtol_l.constprop.0+0x78>
 800781c:	f04f 3eff 	mov.w	lr, #4294967295
 8007820:	e7e6      	b.n	80077f0 <_strtol_l.constprop.0+0x94>
 8007822:	f1be 3fff 	cmp.w	lr, #4294967295
 8007826:	d105      	bne.n	8007834 <_strtol_l.constprop.0+0xd8>
 8007828:	2322      	movs	r3, #34	; 0x22
 800782a:	6003      	str	r3, [r0, #0]
 800782c:	4646      	mov	r6, r8
 800782e:	b942      	cbnz	r2, 8007842 <_strtol_l.constprop.0+0xe6>
 8007830:	4630      	mov	r0, r6
 8007832:	e79e      	b.n	8007772 <_strtol_l.constprop.0+0x16>
 8007834:	b107      	cbz	r7, 8007838 <_strtol_l.constprop.0+0xdc>
 8007836:	4276      	negs	r6, r6
 8007838:	2a00      	cmp	r2, #0
 800783a:	d0f9      	beq.n	8007830 <_strtol_l.constprop.0+0xd4>
 800783c:	f1be 0f00 	cmp.w	lr, #0
 8007840:	d000      	beq.n	8007844 <_strtol_l.constprop.0+0xe8>
 8007842:	1e69      	subs	r1, r5, #1
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	e7f3      	b.n	8007830 <_strtol_l.constprop.0+0xd4>
 8007848:	2430      	movs	r4, #48	; 0x30
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1b1      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 800784e:	2308      	movs	r3, #8
 8007850:	e7af      	b.n	80077b2 <_strtol_l.constprop.0+0x56>
 8007852:	2c30      	cmp	r4, #48	; 0x30
 8007854:	d0a5      	beq.n	80077a2 <_strtol_l.constprop.0+0x46>
 8007856:	230a      	movs	r3, #10
 8007858:	e7ab      	b.n	80077b2 <_strtol_l.constprop.0+0x56>
 800785a:	bf00      	nop
 800785c:	08008bf1 	.word	0x08008bf1

08007860 <_strtol_r>:
 8007860:	f7ff bf7c 	b.w	800775c <_strtol_l.constprop.0>

08007864 <__ssputs_r>:
 8007864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	688e      	ldr	r6, [r1, #8]
 800786a:	461f      	mov	r7, r3
 800786c:	42be      	cmp	r6, r7
 800786e:	680b      	ldr	r3, [r1, #0]
 8007870:	4682      	mov	sl, r0
 8007872:	460c      	mov	r4, r1
 8007874:	4690      	mov	r8, r2
 8007876:	d82c      	bhi.n	80078d2 <__ssputs_r+0x6e>
 8007878:	898a      	ldrh	r2, [r1, #12]
 800787a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800787e:	d026      	beq.n	80078ce <__ssputs_r+0x6a>
 8007880:	6965      	ldr	r5, [r4, #20]
 8007882:	6909      	ldr	r1, [r1, #16]
 8007884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007888:	eba3 0901 	sub.w	r9, r3, r1
 800788c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007890:	1c7b      	adds	r3, r7, #1
 8007892:	444b      	add	r3, r9
 8007894:	106d      	asrs	r5, r5, #1
 8007896:	429d      	cmp	r5, r3
 8007898:	bf38      	it	cc
 800789a:	461d      	movcc	r5, r3
 800789c:	0553      	lsls	r3, r2, #21
 800789e:	d527      	bpl.n	80078f0 <__ssputs_r+0x8c>
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7fe fc0f 	bl	80060c4 <_malloc_r>
 80078a6:	4606      	mov	r6, r0
 80078a8:	b360      	cbz	r0, 8007904 <__ssputs_r+0xa0>
 80078aa:	6921      	ldr	r1, [r4, #16]
 80078ac:	464a      	mov	r2, r9
 80078ae:	f000 fbe3 	bl	8008078 <memcpy>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	6126      	str	r6, [r4, #16]
 80078c0:	6165      	str	r5, [r4, #20]
 80078c2:	444e      	add	r6, r9
 80078c4:	eba5 0509 	sub.w	r5, r5, r9
 80078c8:	6026      	str	r6, [r4, #0]
 80078ca:	60a5      	str	r5, [r4, #8]
 80078cc:	463e      	mov	r6, r7
 80078ce:	42be      	cmp	r6, r7
 80078d0:	d900      	bls.n	80078d4 <__ssputs_r+0x70>
 80078d2:	463e      	mov	r6, r7
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	4632      	mov	r2, r6
 80078d8:	4641      	mov	r1, r8
 80078da:	f000 fb6f 	bl	8007fbc <memmove>
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	1b9b      	subs	r3, r3, r6
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	4433      	add	r3, r6
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	2000      	movs	r0, #0
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	462a      	mov	r2, r5
 80078f2:	f000 ff76 	bl	80087e2 <_realloc_r>
 80078f6:	4606      	mov	r6, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d1e0      	bne.n	80078be <__ssputs_r+0x5a>
 80078fc:	6921      	ldr	r1, [r4, #16]
 80078fe:	4650      	mov	r0, sl
 8007900:	f7fe fb6c 	bl	8005fdc <_free_r>
 8007904:	230c      	movs	r3, #12
 8007906:	f8ca 3000 	str.w	r3, [sl]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	e7e9      	b.n	80078ec <__ssputs_r+0x88>

08007918 <_svfiprintf_r>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	4698      	mov	r8, r3
 800791e:	898b      	ldrh	r3, [r1, #12]
 8007920:	061b      	lsls	r3, r3, #24
 8007922:	b09d      	sub	sp, #116	; 0x74
 8007924:	4607      	mov	r7, r0
 8007926:	460d      	mov	r5, r1
 8007928:	4614      	mov	r4, r2
 800792a:	d50e      	bpl.n	800794a <_svfiprintf_r+0x32>
 800792c:	690b      	ldr	r3, [r1, #16]
 800792e:	b963      	cbnz	r3, 800794a <_svfiprintf_r+0x32>
 8007930:	2140      	movs	r1, #64	; 0x40
 8007932:	f7fe fbc7 	bl	80060c4 <_malloc_r>
 8007936:	6028      	str	r0, [r5, #0]
 8007938:	6128      	str	r0, [r5, #16]
 800793a:	b920      	cbnz	r0, 8007946 <_svfiprintf_r+0x2e>
 800793c:	230c      	movs	r3, #12
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e0d0      	b.n	8007ae8 <_svfiprintf_r+0x1d0>
 8007946:	2340      	movs	r3, #64	; 0x40
 8007948:	616b      	str	r3, [r5, #20]
 800794a:	2300      	movs	r3, #0
 800794c:	9309      	str	r3, [sp, #36]	; 0x24
 800794e:	2320      	movs	r3, #32
 8007950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007954:	f8cd 800c 	str.w	r8, [sp, #12]
 8007958:	2330      	movs	r3, #48	; 0x30
 800795a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b00 <_svfiprintf_r+0x1e8>
 800795e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007962:	f04f 0901 	mov.w	r9, #1
 8007966:	4623      	mov	r3, r4
 8007968:	469a      	mov	sl, r3
 800796a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796e:	b10a      	cbz	r2, 8007974 <_svfiprintf_r+0x5c>
 8007970:	2a25      	cmp	r2, #37	; 0x25
 8007972:	d1f9      	bne.n	8007968 <_svfiprintf_r+0x50>
 8007974:	ebba 0b04 	subs.w	fp, sl, r4
 8007978:	d00b      	beq.n	8007992 <_svfiprintf_r+0x7a>
 800797a:	465b      	mov	r3, fp
 800797c:	4622      	mov	r2, r4
 800797e:	4629      	mov	r1, r5
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff6f 	bl	8007864 <__ssputs_r>
 8007986:	3001      	adds	r0, #1
 8007988:	f000 80a9 	beq.w	8007ade <_svfiprintf_r+0x1c6>
 800798c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798e:	445a      	add	r2, fp
 8007990:	9209      	str	r2, [sp, #36]	; 0x24
 8007992:	f89a 3000 	ldrb.w	r3, [sl]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80a1 	beq.w	8007ade <_svfiprintf_r+0x1c6>
 800799c:	2300      	movs	r3, #0
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a6:	f10a 0a01 	add.w	sl, sl, #1
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b2:	931a      	str	r3, [sp, #104]	; 0x68
 80079b4:	4654      	mov	r4, sl
 80079b6:	2205      	movs	r2, #5
 80079b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079bc:	4850      	ldr	r0, [pc, #320]	; (8007b00 <_svfiprintf_r+0x1e8>)
 80079be:	f7f8 fc17 	bl	80001f0 <memchr>
 80079c2:	9a04      	ldr	r2, [sp, #16]
 80079c4:	b9d8      	cbnz	r0, 80079fe <_svfiprintf_r+0xe6>
 80079c6:	06d0      	lsls	r0, r2, #27
 80079c8:	bf44      	itt	mi
 80079ca:	2320      	movmi	r3, #32
 80079cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d0:	0711      	lsls	r1, r2, #28
 80079d2:	bf44      	itt	mi
 80079d4:	232b      	movmi	r3, #43	; 0x2b
 80079d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b2a      	cmp	r3, #42	; 0x2a
 80079e0:	d015      	beq.n	8007a0e <_svfiprintf_r+0xf6>
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	4654      	mov	r4, sl
 80079e6:	2000      	movs	r0, #0
 80079e8:	f04f 0c0a 	mov.w	ip, #10
 80079ec:	4621      	mov	r1, r4
 80079ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f2:	3b30      	subs	r3, #48	; 0x30
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d94d      	bls.n	8007a94 <_svfiprintf_r+0x17c>
 80079f8:	b1b0      	cbz	r0, 8007a28 <_svfiprintf_r+0x110>
 80079fa:	9207      	str	r2, [sp, #28]
 80079fc:	e014      	b.n	8007a28 <_svfiprintf_r+0x110>
 80079fe:	eba0 0308 	sub.w	r3, r0, r8
 8007a02:	fa09 f303 	lsl.w	r3, r9, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	46a2      	mov	sl, r4
 8007a0c:	e7d2      	b.n	80079b4 <_svfiprintf_r+0x9c>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9103      	str	r1, [sp, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bfbb      	ittet	lt
 8007a1a:	425b      	neglt	r3, r3
 8007a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a20:	9307      	strge	r3, [sp, #28]
 8007a22:	9307      	strlt	r3, [sp, #28]
 8007a24:	bfb8      	it	lt
 8007a26:	9204      	strlt	r2, [sp, #16]
 8007a28:	7823      	ldrb	r3, [r4, #0]
 8007a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2c:	d10c      	bne.n	8007a48 <_svfiprintf_r+0x130>
 8007a2e:	7863      	ldrb	r3, [r4, #1]
 8007a30:	2b2a      	cmp	r3, #42	; 0x2a
 8007a32:	d134      	bne.n	8007a9e <_svfiprintf_r+0x186>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9203      	str	r2, [sp, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfb8      	it	lt
 8007a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a44:	3402      	adds	r4, #2
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b10 <_svfiprintf_r+0x1f8>
 8007a4c:	7821      	ldrb	r1, [r4, #0]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	4650      	mov	r0, sl
 8007a52:	f7f8 fbcd 	bl	80001f0 <memchr>
 8007a56:	b138      	cbz	r0, 8007a68 <_svfiprintf_r+0x150>
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	eba0 000a 	sub.w	r0, r0, sl
 8007a5e:	2240      	movs	r2, #64	; 0x40
 8007a60:	4082      	lsls	r2, r0
 8007a62:	4313      	orrs	r3, r2
 8007a64:	3401      	adds	r4, #1
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6c:	4825      	ldr	r0, [pc, #148]	; (8007b04 <_svfiprintf_r+0x1ec>)
 8007a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a72:	2206      	movs	r2, #6
 8007a74:	f7f8 fbbc 	bl	80001f0 <memchr>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d038      	beq.n	8007aee <_svfiprintf_r+0x1d6>
 8007a7c:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <_svfiprintf_r+0x1f0>)
 8007a7e:	bb1b      	cbnz	r3, 8007ac8 <_svfiprintf_r+0x1b0>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	3308      	adds	r3, #8
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	4433      	add	r3, r6
 8007a90:	9309      	str	r3, [sp, #36]	; 0x24
 8007a92:	e768      	b.n	8007966 <_svfiprintf_r+0x4e>
 8007a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a98:	460c      	mov	r4, r1
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7a6      	b.n	80079ec <_svfiprintf_r+0xd4>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f04f 0c0a 	mov.w	ip, #10
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab0:	3a30      	subs	r2, #48	; 0x30
 8007ab2:	2a09      	cmp	r2, #9
 8007ab4:	d903      	bls.n	8007abe <_svfiprintf_r+0x1a6>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0c6      	beq.n	8007a48 <_svfiprintf_r+0x130>
 8007aba:	9105      	str	r1, [sp, #20]
 8007abc:	e7c4      	b.n	8007a48 <_svfiprintf_r+0x130>
 8007abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e7f0      	b.n	8007aaa <_svfiprintf_r+0x192>
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <_svfiprintf_r+0x1f4>)
 8007ad0:	a904      	add	r1, sp, #16
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f7fc fb84 	bl	80041e0 <_printf_float>
 8007ad8:	1c42      	adds	r2, r0, #1
 8007ada:	4606      	mov	r6, r0
 8007adc:	d1d6      	bne.n	8007a8c <_svfiprintf_r+0x174>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	065b      	lsls	r3, r3, #25
 8007ae2:	f53f af2d 	bmi.w	8007940 <_svfiprintf_r+0x28>
 8007ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ae8:	b01d      	add	sp, #116	; 0x74
 8007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aee:	ab03      	add	r3, sp, #12
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	462a      	mov	r2, r5
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <_svfiprintf_r+0x1f4>)
 8007af6:	a904      	add	r1, sp, #16
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7fc fe15 	bl	8004728 <_printf_i>
 8007afe:	e7eb      	b.n	8007ad8 <_svfiprintf_r+0x1c0>
 8007b00:	08008cf1 	.word	0x08008cf1
 8007b04:	08008cfb 	.word	0x08008cfb
 8007b08:	080041e1 	.word	0x080041e1
 8007b0c:	08007865 	.word	0x08007865
 8007b10:	08008cf7 	.word	0x08008cf7

08007b14 <__sfputc_r>:
 8007b14:	6893      	ldr	r3, [r2, #8]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	b410      	push	{r4}
 8007b1c:	6093      	str	r3, [r2, #8]
 8007b1e:	da08      	bge.n	8007b32 <__sfputc_r+0x1e>
 8007b20:	6994      	ldr	r4, [r2, #24]
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	db01      	blt.n	8007b2a <__sfputc_r+0x16>
 8007b26:	290a      	cmp	r1, #10
 8007b28:	d103      	bne.n	8007b32 <__sfputc_r+0x1e>
 8007b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b2e:	f7fd bac0 	b.w	80050b2 <__swbuf_r>
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	1c58      	adds	r0, r3, #1
 8007b36:	6010      	str	r0, [r2, #0]
 8007b38:	7019      	strb	r1, [r3, #0]
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <__sfputs_r>:
 8007b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	18d5      	adds	r5, r2, r3
 8007b4c:	42ac      	cmp	r4, r5
 8007b4e:	d101      	bne.n	8007b54 <__sfputs_r+0x12>
 8007b50:	2000      	movs	r0, #0
 8007b52:	e007      	b.n	8007b64 <__sfputs_r+0x22>
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ffda 	bl	8007b14 <__sfputc_r>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d1f3      	bne.n	8007b4c <__sfputs_r+0xa>
 8007b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b68 <_vfiprintf_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	b09d      	sub	sp, #116	; 0x74
 8007b70:	4614      	mov	r4, r2
 8007b72:	4698      	mov	r8, r3
 8007b74:	4606      	mov	r6, r0
 8007b76:	b118      	cbz	r0, 8007b80 <_vfiprintf_r+0x18>
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b90b      	cbnz	r3, 8007b80 <_vfiprintf_r+0x18>
 8007b7c:	f7fd f992 	bl	8004ea4 <__sinit>
 8007b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_vfiprintf_r+0x2a>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_vfiprintf_r+0x2a>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f7fd fba2 	bl	80052d6 <__retarget_lock_acquire_recursive>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	071b      	lsls	r3, r3, #28
 8007b96:	d501      	bpl.n	8007b9c <_vfiprintf_r+0x34>
 8007b98:	692b      	ldr	r3, [r5, #16]
 8007b9a:	b99b      	cbnz	r3, 8007bc4 <_vfiprintf_r+0x5c>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7fd fac4 	bl	800512c <__swsetup_r>
 8007ba4:	b170      	cbz	r0, 8007bc4 <_vfiprintf_r+0x5c>
 8007ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba8:	07dc      	lsls	r4, r3, #31
 8007baa:	d504      	bpl.n	8007bb6 <_vfiprintf_r+0x4e>
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	b01d      	add	sp, #116	; 0x74
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	0598      	lsls	r0, r3, #22
 8007bba:	d4f7      	bmi.n	8007bac <_vfiprintf_r+0x44>
 8007bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bbe:	f7fd fb8b 	bl	80052d8 <__retarget_lock_release_recursive>
 8007bc2:	e7f3      	b.n	8007bac <_vfiprintf_r+0x44>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd2:	2330      	movs	r3, #48	; 0x30
 8007bd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d88 <_vfiprintf_r+0x220>
 8007bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bdc:	f04f 0901 	mov.w	r9, #1
 8007be0:	4623      	mov	r3, r4
 8007be2:	469a      	mov	sl, r3
 8007be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be8:	b10a      	cbz	r2, 8007bee <_vfiprintf_r+0x86>
 8007bea:	2a25      	cmp	r2, #37	; 0x25
 8007bec:	d1f9      	bne.n	8007be2 <_vfiprintf_r+0x7a>
 8007bee:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf2:	d00b      	beq.n	8007c0c <_vfiprintf_r+0xa4>
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ffa1 	bl	8007b42 <__sfputs_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	f000 80a9 	beq.w	8007d58 <_vfiprintf_r+0x1f0>
 8007c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c08:	445a      	add	r2, fp
 8007c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80a1 	beq.w	8007d58 <_vfiprintf_r+0x1f0>
 8007c16:	2300      	movs	r3, #0
 8007c18:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c20:	f10a 0a01 	add.w	sl, sl, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c2e:	4654      	mov	r4, sl
 8007c30:	2205      	movs	r2, #5
 8007c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c36:	4854      	ldr	r0, [pc, #336]	; (8007d88 <_vfiprintf_r+0x220>)
 8007c38:	f7f8 fada 	bl	80001f0 <memchr>
 8007c3c:	9a04      	ldr	r2, [sp, #16]
 8007c3e:	b9d8      	cbnz	r0, 8007c78 <_vfiprintf_r+0x110>
 8007c40:	06d1      	lsls	r1, r2, #27
 8007c42:	bf44      	itt	mi
 8007c44:	2320      	movmi	r3, #32
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4a:	0713      	lsls	r3, r2, #28
 8007c4c:	bf44      	itt	mi
 8007c4e:	232b      	movmi	r3, #43	; 0x2b
 8007c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c54:	f89a 3000 	ldrb.w	r3, [sl]
 8007c58:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5a:	d015      	beq.n	8007c88 <_vfiprintf_r+0x120>
 8007c5c:	9a07      	ldr	r2, [sp, #28]
 8007c5e:	4654      	mov	r4, sl
 8007c60:	2000      	movs	r0, #0
 8007c62:	f04f 0c0a 	mov.w	ip, #10
 8007c66:	4621      	mov	r1, r4
 8007c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6c:	3b30      	subs	r3, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d94d      	bls.n	8007d0e <_vfiprintf_r+0x1a6>
 8007c72:	b1b0      	cbz	r0, 8007ca2 <_vfiprintf_r+0x13a>
 8007c74:	9207      	str	r2, [sp, #28]
 8007c76:	e014      	b.n	8007ca2 <_vfiprintf_r+0x13a>
 8007c78:	eba0 0308 	sub.w	r3, r0, r8
 8007c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	46a2      	mov	sl, r4
 8007c86:	e7d2      	b.n	8007c2e <_vfiprintf_r+0xc6>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	1d19      	adds	r1, r3, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	9103      	str	r1, [sp, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbb      	ittet	lt
 8007c94:	425b      	neglt	r3, r3
 8007c96:	f042 0202 	orrlt.w	r2, r2, #2
 8007c9a:	9307      	strge	r3, [sp, #28]
 8007c9c:	9307      	strlt	r3, [sp, #28]
 8007c9e:	bfb8      	it	lt
 8007ca0:	9204      	strlt	r2, [sp, #16]
 8007ca2:	7823      	ldrb	r3, [r4, #0]
 8007ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca6:	d10c      	bne.n	8007cc2 <_vfiprintf_r+0x15a>
 8007ca8:	7863      	ldrb	r3, [r4, #1]
 8007caa:	2b2a      	cmp	r3, #42	; 0x2a
 8007cac:	d134      	bne.n	8007d18 <_vfiprintf_r+0x1b0>
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	9203      	str	r2, [sp, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cbe:	3402      	adds	r4, #2
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d98 <_vfiprintf_r+0x230>
 8007cc6:	7821      	ldrb	r1, [r4, #0]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	4650      	mov	r0, sl
 8007ccc:	f7f8 fa90 	bl	80001f0 <memchr>
 8007cd0:	b138      	cbz	r0, 8007ce2 <_vfiprintf_r+0x17a>
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	eba0 000a 	sub.w	r0, r0, sl
 8007cd8:	2240      	movs	r2, #64	; 0x40
 8007cda:	4082      	lsls	r2, r0
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	3401      	adds	r4, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	4829      	ldr	r0, [pc, #164]	; (8007d8c <_vfiprintf_r+0x224>)
 8007ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cec:	2206      	movs	r2, #6
 8007cee:	f7f8 fa7f 	bl	80001f0 <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d03f      	beq.n	8007d76 <_vfiprintf_r+0x20e>
 8007cf6:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <_vfiprintf_r+0x228>)
 8007cf8:	bb1b      	cbnz	r3, 8007d42 <_vfiprintf_r+0x1da>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	443b      	add	r3, r7
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e768      	b.n	8007be0 <_vfiprintf_r+0x78>
 8007d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d12:	460c      	mov	r4, r1
 8007d14:	2001      	movs	r0, #1
 8007d16:	e7a6      	b.n	8007c66 <_vfiprintf_r+0xfe>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	f04f 0c0a 	mov.w	ip, #10
 8007d24:	4620      	mov	r0, r4
 8007d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d2a:	3a30      	subs	r2, #48	; 0x30
 8007d2c:	2a09      	cmp	r2, #9
 8007d2e:	d903      	bls.n	8007d38 <_vfiprintf_r+0x1d0>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0c6      	beq.n	8007cc2 <_vfiprintf_r+0x15a>
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	e7c4      	b.n	8007cc2 <_vfiprintf_r+0x15a>
 8007d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e7f0      	b.n	8007d24 <_vfiprintf_r+0x1bc>
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <_vfiprintf_r+0x22c>)
 8007d4a:	a904      	add	r1, sp, #16
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7fc fa47 	bl	80041e0 <_printf_float>
 8007d52:	4607      	mov	r7, r0
 8007d54:	1c78      	adds	r0, r7, #1
 8007d56:	d1d6      	bne.n	8007d06 <_vfiprintf_r+0x19e>
 8007d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_vfiprintf_r+0x202>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	059a      	lsls	r2, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_vfiprintf_r+0x202>
 8007d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d66:	f7fd fab7 	bl	80052d8 <__retarget_lock_release_recursive>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	065b      	lsls	r3, r3, #25
 8007d6e:	f53f af1d 	bmi.w	8007bac <_vfiprintf_r+0x44>
 8007d72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d74:	e71c      	b.n	8007bb0 <_vfiprintf_r+0x48>
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <_vfiprintf_r+0x22c>)
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7fc fcd1 	bl	8004728 <_printf_i>
 8007d86:	e7e4      	b.n	8007d52 <_vfiprintf_r+0x1ea>
 8007d88:	08008cf1 	.word	0x08008cf1
 8007d8c:	08008cfb 	.word	0x08008cfb
 8007d90:	080041e1 	.word	0x080041e1
 8007d94:	08007b43 	.word	0x08007b43
 8007d98:	08008cf7 	.word	0x08008cf7

08007d9c <__sflush_r>:
 8007d9c:	898a      	ldrh	r2, [r1, #12]
 8007d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	0710      	lsls	r0, r2, #28
 8007da6:	460c      	mov	r4, r1
 8007da8:	d458      	bmi.n	8007e5c <__sflush_r+0xc0>
 8007daa:	684b      	ldr	r3, [r1, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dc05      	bgt.n	8007dbc <__sflush_r+0x20>
 8007db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dc02      	bgt.n	8007dbc <__sflush_r+0x20>
 8007db6:	2000      	movs	r0, #0
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	d0f9      	beq.n	8007db6 <__sflush_r+0x1a>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc8:	682f      	ldr	r7, [r5, #0]
 8007dca:	6a21      	ldr	r1, [r4, #32]
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	d032      	beq.n	8007e36 <__sflush_r+0x9a>
 8007dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	075a      	lsls	r2, r3, #29
 8007dd6:	d505      	bpl.n	8007de4 <__sflush_r+0x48>
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	1ac0      	subs	r0, r0, r3
 8007ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dde:	b10b      	cbz	r3, 8007de4 <__sflush_r+0x48>
 8007de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de2:	1ac0      	subs	r0, r0, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	4602      	mov	r2, r0
 8007de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dea:	6a21      	ldr	r1, [r4, #32]
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b0      	blx	r6
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	d106      	bne.n	8007e04 <__sflush_r+0x68>
 8007df6:	6829      	ldr	r1, [r5, #0]
 8007df8:	291d      	cmp	r1, #29
 8007dfa:	d82b      	bhi.n	8007e54 <__sflush_r+0xb8>
 8007dfc:	4a29      	ldr	r2, [pc, #164]	; (8007ea4 <__sflush_r+0x108>)
 8007dfe:	410a      	asrs	r2, r1
 8007e00:	07d6      	lsls	r6, r2, #31
 8007e02:	d427      	bmi.n	8007e54 <__sflush_r+0xb8>
 8007e04:	2200      	movs	r2, #0
 8007e06:	6062      	str	r2, [r4, #4]
 8007e08:	04d9      	lsls	r1, r3, #19
 8007e0a:	6922      	ldr	r2, [r4, #16]
 8007e0c:	6022      	str	r2, [r4, #0]
 8007e0e:	d504      	bpl.n	8007e1a <__sflush_r+0x7e>
 8007e10:	1c42      	adds	r2, r0, #1
 8007e12:	d101      	bne.n	8007e18 <__sflush_r+0x7c>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b903      	cbnz	r3, 8007e1a <__sflush_r+0x7e>
 8007e18:	6560      	str	r0, [r4, #84]	; 0x54
 8007e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1c:	602f      	str	r7, [r5, #0]
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	d0c9      	beq.n	8007db6 <__sflush_r+0x1a>
 8007e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e26:	4299      	cmp	r1, r3
 8007e28:	d002      	beq.n	8007e30 <__sflush_r+0x94>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7fe f8d6 	bl	8005fdc <_free_r>
 8007e30:	2000      	movs	r0, #0
 8007e32:	6360      	str	r0, [r4, #52]	; 0x34
 8007e34:	e7c0      	b.n	8007db8 <__sflush_r+0x1c>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b0      	blx	r6
 8007e3c:	1c41      	adds	r1, r0, #1
 8007e3e:	d1c8      	bne.n	8007dd2 <__sflush_r+0x36>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0c5      	beq.n	8007dd2 <__sflush_r+0x36>
 8007e46:	2b1d      	cmp	r3, #29
 8007e48:	d001      	beq.n	8007e4e <__sflush_r+0xb2>
 8007e4a:	2b16      	cmp	r3, #22
 8007e4c:	d101      	bne.n	8007e52 <__sflush_r+0xb6>
 8007e4e:	602f      	str	r7, [r5, #0]
 8007e50:	e7b1      	b.n	8007db6 <__sflush_r+0x1a>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	e7ad      	b.n	8007db8 <__sflush_r+0x1c>
 8007e5c:	690f      	ldr	r7, [r1, #16]
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	d0a9      	beq.n	8007db6 <__sflush_r+0x1a>
 8007e62:	0793      	lsls	r3, r2, #30
 8007e64:	680e      	ldr	r6, [r1, #0]
 8007e66:	bf08      	it	eq
 8007e68:	694b      	ldreq	r3, [r1, #20]
 8007e6a:	600f      	str	r7, [r1, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2300      	movne	r3, #0
 8007e70:	eba6 0807 	sub.w	r8, r6, r7
 8007e74:	608b      	str	r3, [r1, #8]
 8007e76:	f1b8 0f00 	cmp.w	r8, #0
 8007e7a:	dd9c      	ble.n	8007db6 <__sflush_r+0x1a>
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e80:	4643      	mov	r3, r8
 8007e82:	463a      	mov	r2, r7
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b0      	blx	r6
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dc06      	bgt.n	8007e9a <__sflush_r+0xfe>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	e78e      	b.n	8007db8 <__sflush_r+0x1c>
 8007e9a:	4407      	add	r7, r0
 8007e9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ea0:	e7e9      	b.n	8007e76 <__sflush_r+0xda>
 8007ea2:	bf00      	nop
 8007ea4:	dfbffffe 	.word	0xdfbffffe

08007ea8 <_fflush_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	4605      	mov	r5, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	b913      	cbnz	r3, 8007eb8 <_fflush_r+0x10>
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	b118      	cbz	r0, 8007ec2 <_fflush_r+0x1a>
 8007eba:	6a03      	ldr	r3, [r0, #32]
 8007ebc:	b90b      	cbnz	r3, 8007ec2 <_fflush_r+0x1a>
 8007ebe:	f7fc fff1 	bl	8004ea4 <__sinit>
 8007ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f3      	beq.n	8007eb2 <_fflush_r+0xa>
 8007eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ecc:	07d0      	lsls	r0, r2, #31
 8007ece:	d404      	bmi.n	8007eda <_fflush_r+0x32>
 8007ed0:	0599      	lsls	r1, r3, #22
 8007ed2:	d402      	bmi.n	8007eda <_fflush_r+0x32>
 8007ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed6:	f7fd f9fe 	bl	80052d6 <__retarget_lock_acquire_recursive>
 8007eda:	4628      	mov	r0, r5
 8007edc:	4621      	mov	r1, r4
 8007ede:	f7ff ff5d 	bl	8007d9c <__sflush_r>
 8007ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee4:	07da      	lsls	r2, r3, #31
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	d4e4      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	059b      	lsls	r3, r3, #22
 8007eee:	d4e1      	bmi.n	8007eb4 <_fflush_r+0xc>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef2:	f7fd f9f1 	bl	80052d8 <__retarget_lock_release_recursive>
 8007ef6:	e7dd      	b.n	8007eb4 <_fflush_r+0xc>

08007ef8 <__swhatbuf_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	2900      	cmp	r1, #0
 8007f02:	b096      	sub	sp, #88	; 0x58
 8007f04:	4615      	mov	r5, r2
 8007f06:	461e      	mov	r6, r3
 8007f08:	da0d      	bge.n	8007f26 <__swhatbuf_r+0x2e>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f10:	f04f 0100 	mov.w	r1, #0
 8007f14:	bf0c      	ite	eq
 8007f16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f1a:	2340      	movne	r3, #64	; 0x40
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	6031      	str	r1, [r6, #0]
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	b016      	add	sp, #88	; 0x58
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	466a      	mov	r2, sp
 8007f28:	f000 f874 	bl	8008014 <_fstat_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	dbec      	blt.n	8007f0a <__swhatbuf_r+0x12>
 8007f30:	9901      	ldr	r1, [sp, #4]
 8007f32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f3a:	4259      	negs	r1, r3
 8007f3c:	4159      	adcs	r1, r3
 8007f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f42:	e7eb      	b.n	8007f1c <__swhatbuf_r+0x24>

08007f44 <__smakebuf_r>:
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f48:	079d      	lsls	r5, r3, #30
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d507      	bpl.n	8007f60 <__smakebuf_r+0x1c>
 8007f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	ab01      	add	r3, sp, #4
 8007f62:	466a      	mov	r2, sp
 8007f64:	f7ff ffc8 	bl	8007ef8 <__swhatbuf_r>
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7fe f8a9 	bl	80060c4 <_malloc_r>
 8007f72:	b948      	cbnz	r0, 8007f88 <__smakebuf_r+0x44>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d4ef      	bmi.n	8007f5c <__smakebuf_r+0x18>
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e3      	b.n	8007f50 <__smakebuf_r+0xc>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	6020      	str	r0, [r4, #0]
 8007f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f90:	81a3      	strh	r3, [r4, #12]
 8007f92:	9b00      	ldr	r3, [sp, #0]
 8007f94:	6163      	str	r3, [r4, #20]
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	6120      	str	r0, [r4, #16]
 8007f9a:	b15b      	cbz	r3, 8007fb4 <__smakebuf_r+0x70>
 8007f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f849 	bl	8008038 <_isatty_r>
 8007fa6:	b128      	cbz	r0, 8007fb4 <__smakebuf_r+0x70>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	431d      	orrs	r5, r3
 8007fb8:	81a5      	strh	r5, [r4, #12]
 8007fba:	e7cf      	b.n	8007f5c <__smakebuf_r+0x18>

08007fbc <memmove>:
 8007fbc:	4288      	cmp	r0, r1
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	eb01 0402 	add.w	r4, r1, r2
 8007fc4:	d902      	bls.n	8007fcc <memmove+0x10>
 8007fc6:	4284      	cmp	r4, r0
 8007fc8:	4623      	mov	r3, r4
 8007fca:	d807      	bhi.n	8007fdc <memmove+0x20>
 8007fcc:	1e43      	subs	r3, r0, #1
 8007fce:	42a1      	cmp	r1, r4
 8007fd0:	d008      	beq.n	8007fe4 <memmove+0x28>
 8007fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fda:	e7f8      	b.n	8007fce <memmove+0x12>
 8007fdc:	4402      	add	r2, r0
 8007fde:	4601      	mov	r1, r0
 8007fe0:	428a      	cmp	r2, r1
 8007fe2:	d100      	bne.n	8007fe6 <memmove+0x2a>
 8007fe4:	bd10      	pop	{r4, pc}
 8007fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fee:	e7f7      	b.n	8007fe0 <memmove+0x24>

08007ff0 <strncmp>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	b16a      	cbz	r2, 8008010 <strncmp+0x20>
 8007ff4:	3901      	subs	r1, #1
 8007ff6:	1884      	adds	r4, r0, r2
 8007ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008000:	429a      	cmp	r2, r3
 8008002:	d103      	bne.n	800800c <strncmp+0x1c>
 8008004:	42a0      	cmp	r0, r4
 8008006:	d001      	beq.n	800800c <strncmp+0x1c>
 8008008:	2a00      	cmp	r2, #0
 800800a:	d1f5      	bne.n	8007ff8 <strncmp+0x8>
 800800c:	1ad0      	subs	r0, r2, r3
 800800e:	bd10      	pop	{r4, pc}
 8008010:	4610      	mov	r0, r2
 8008012:	e7fc      	b.n	800800e <strncmp+0x1e>

08008014 <_fstat_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d07      	ldr	r5, [pc, #28]	; (8008034 <_fstat_r+0x20>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	f7f9 fc90 	bl	8001946 <_fstat>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d102      	bne.n	8008030 <_fstat_r+0x1c>
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	b103      	cbz	r3, 8008030 <_fstat_r+0x1c>
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	200004f4 	.word	0x200004f4

08008038 <_isatty_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4d06      	ldr	r5, [pc, #24]	; (8008054 <_isatty_r+0x1c>)
 800803c:	2300      	movs	r3, #0
 800803e:	4604      	mov	r4, r0
 8008040:	4608      	mov	r0, r1
 8008042:	602b      	str	r3, [r5, #0]
 8008044:	f7f9 fc8f 	bl	8001966 <_isatty>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_isatty_r+0x1a>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_isatty_r+0x1a>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	200004f4 	.word	0x200004f4

08008058 <_sbrk_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d06      	ldr	r5, [pc, #24]	; (8008074 <_sbrk_r+0x1c>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	f7f9 fc98 	bl	8001998 <_sbrk>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_sbrk_r+0x1a>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_sbrk_r+0x1a>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	200004f4 	.word	0x200004f4

08008078 <memcpy>:
 8008078:	440a      	add	r2, r1
 800807a:	4291      	cmp	r1, r2
 800807c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008080:	d100      	bne.n	8008084 <memcpy+0xc>
 8008082:	4770      	bx	lr
 8008084:	b510      	push	{r4, lr}
 8008086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800808e:	4291      	cmp	r1, r2
 8008090:	d1f9      	bne.n	8008086 <memcpy+0xe>
 8008092:	bd10      	pop	{r4, pc}
 8008094:	0000      	movs	r0, r0
	...

08008098 <nan>:
 8008098:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80080a0 <nan+0x8>
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	00000000 	.word	0x00000000
 80080a4:	7ff80000 	.word	0x7ff80000

080080a8 <__assert_func>:
 80080a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080aa:	4614      	mov	r4, r2
 80080ac:	461a      	mov	r2, r3
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <__assert_func+0x2c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4605      	mov	r5, r0
 80080b4:	68d8      	ldr	r0, [r3, #12]
 80080b6:	b14c      	cbz	r4, 80080cc <__assert_func+0x24>
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <__assert_func+0x30>)
 80080ba:	9100      	str	r1, [sp, #0]
 80080bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c0:	4906      	ldr	r1, [pc, #24]	; (80080dc <__assert_func+0x34>)
 80080c2:	462b      	mov	r3, r5
 80080c4:	f000 fbca 	bl	800885c <fiprintf>
 80080c8:	f000 fbda 	bl	8008880 <abort>
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <__assert_func+0x38>)
 80080ce:	461c      	mov	r4, r3
 80080d0:	e7f3      	b.n	80080ba <__assert_func+0x12>
 80080d2:	bf00      	nop
 80080d4:	20000064 	.word	0x20000064
 80080d8:	08008d0a 	.word	0x08008d0a
 80080dc:	08008d17 	.word	0x08008d17
 80080e0:	08008d45 	.word	0x08008d45

080080e4 <_calloc_r>:
 80080e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080e6:	fba1 2402 	umull	r2, r4, r1, r2
 80080ea:	b94c      	cbnz	r4, 8008100 <_calloc_r+0x1c>
 80080ec:	4611      	mov	r1, r2
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	f7fd ffe8 	bl	80060c4 <_malloc_r>
 80080f4:	9a01      	ldr	r2, [sp, #4]
 80080f6:	4605      	mov	r5, r0
 80080f8:	b930      	cbnz	r0, 8008108 <_calloc_r+0x24>
 80080fa:	4628      	mov	r0, r5
 80080fc:	b003      	add	sp, #12
 80080fe:	bd30      	pop	{r4, r5, pc}
 8008100:	220c      	movs	r2, #12
 8008102:	6002      	str	r2, [r0, #0]
 8008104:	2500      	movs	r5, #0
 8008106:	e7f8      	b.n	80080fa <_calloc_r+0x16>
 8008108:	4621      	mov	r1, r4
 800810a:	f7fd f867 	bl	80051dc <memset>
 800810e:	e7f4      	b.n	80080fa <_calloc_r+0x16>

08008110 <rshift>:
 8008110:	6903      	ldr	r3, [r0, #16]
 8008112:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800811a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800811e:	f100 0414 	add.w	r4, r0, #20
 8008122:	dd45      	ble.n	80081b0 <rshift+0xa0>
 8008124:	f011 011f 	ands.w	r1, r1, #31
 8008128:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800812c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008130:	d10c      	bne.n	800814c <rshift+0x3c>
 8008132:	f100 0710 	add.w	r7, r0, #16
 8008136:	4629      	mov	r1, r5
 8008138:	42b1      	cmp	r1, r6
 800813a:	d334      	bcc.n	80081a6 <rshift+0x96>
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	1eea      	subs	r2, r5, #3
 8008142:	4296      	cmp	r6, r2
 8008144:	bf38      	it	cc
 8008146:	2300      	movcc	r3, #0
 8008148:	4423      	add	r3, r4
 800814a:	e015      	b.n	8008178 <rshift+0x68>
 800814c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008150:	f1c1 0820 	rsb	r8, r1, #32
 8008154:	40cf      	lsrs	r7, r1
 8008156:	f105 0e04 	add.w	lr, r5, #4
 800815a:	46a1      	mov	r9, r4
 800815c:	4576      	cmp	r6, lr
 800815e:	46f4      	mov	ip, lr
 8008160:	d815      	bhi.n	800818e <rshift+0x7e>
 8008162:	1a9a      	subs	r2, r3, r2
 8008164:	0092      	lsls	r2, r2, #2
 8008166:	3a04      	subs	r2, #4
 8008168:	3501      	adds	r5, #1
 800816a:	42ae      	cmp	r6, r5
 800816c:	bf38      	it	cc
 800816e:	2200      	movcc	r2, #0
 8008170:	18a3      	adds	r3, r4, r2
 8008172:	50a7      	str	r7, [r4, r2]
 8008174:	b107      	cbz	r7, 8008178 <rshift+0x68>
 8008176:	3304      	adds	r3, #4
 8008178:	1b1a      	subs	r2, r3, r4
 800817a:	42a3      	cmp	r3, r4
 800817c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008180:	bf08      	it	eq
 8008182:	2300      	moveq	r3, #0
 8008184:	6102      	str	r2, [r0, #16]
 8008186:	bf08      	it	eq
 8008188:	6143      	streq	r3, [r0, #20]
 800818a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818e:	f8dc c000 	ldr.w	ip, [ip]
 8008192:	fa0c fc08 	lsl.w	ip, ip, r8
 8008196:	ea4c 0707 	orr.w	r7, ip, r7
 800819a:	f849 7b04 	str.w	r7, [r9], #4
 800819e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081a2:	40cf      	lsrs	r7, r1
 80081a4:	e7da      	b.n	800815c <rshift+0x4c>
 80081a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80081aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80081ae:	e7c3      	b.n	8008138 <rshift+0x28>
 80081b0:	4623      	mov	r3, r4
 80081b2:	e7e1      	b.n	8008178 <rshift+0x68>

080081b4 <__hexdig_fun>:
 80081b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d802      	bhi.n	80081c2 <__hexdig_fun+0xe>
 80081bc:	3820      	subs	r0, #32
 80081be:	b2c0      	uxtb	r0, r0
 80081c0:	4770      	bx	lr
 80081c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d801      	bhi.n	80081ce <__hexdig_fun+0x1a>
 80081ca:	3847      	subs	r0, #71	; 0x47
 80081cc:	e7f7      	b.n	80081be <__hexdig_fun+0xa>
 80081ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d801      	bhi.n	80081da <__hexdig_fun+0x26>
 80081d6:	3827      	subs	r0, #39	; 0x27
 80081d8:	e7f1      	b.n	80081be <__hexdig_fun+0xa>
 80081da:	2000      	movs	r0, #0
 80081dc:	4770      	bx	lr
	...

080081e0 <__gethex>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4617      	mov	r7, r2
 80081e6:	680a      	ldr	r2, [r1, #0]
 80081e8:	b085      	sub	sp, #20
 80081ea:	f102 0b02 	add.w	fp, r2, #2
 80081ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80081f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081f6:	4681      	mov	r9, r0
 80081f8:	468a      	mov	sl, r1
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	32fe      	adds	r2, #254	; 0xfe
 80081fe:	eb02 030b 	add.w	r3, r2, fp
 8008202:	46d8      	mov	r8, fp
 8008204:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	2830      	cmp	r0, #48	; 0x30
 800820c:	d0f7      	beq.n	80081fe <__gethex+0x1e>
 800820e:	f7ff ffd1 	bl	80081b4 <__hexdig_fun>
 8008212:	4604      	mov	r4, r0
 8008214:	2800      	cmp	r0, #0
 8008216:	d138      	bne.n	800828a <__gethex+0xaa>
 8008218:	49a7      	ldr	r1, [pc, #668]	; (80084b8 <__gethex+0x2d8>)
 800821a:	2201      	movs	r2, #1
 800821c:	4640      	mov	r0, r8
 800821e:	f7ff fee7 	bl	8007ff0 <strncmp>
 8008222:	4606      	mov	r6, r0
 8008224:	2800      	cmp	r0, #0
 8008226:	d169      	bne.n	80082fc <__gethex+0x11c>
 8008228:	f898 0001 	ldrb.w	r0, [r8, #1]
 800822c:	465d      	mov	r5, fp
 800822e:	f7ff ffc1 	bl	80081b4 <__hexdig_fun>
 8008232:	2800      	cmp	r0, #0
 8008234:	d064      	beq.n	8008300 <__gethex+0x120>
 8008236:	465a      	mov	r2, fp
 8008238:	7810      	ldrb	r0, [r2, #0]
 800823a:	2830      	cmp	r0, #48	; 0x30
 800823c:	4690      	mov	r8, r2
 800823e:	f102 0201 	add.w	r2, r2, #1
 8008242:	d0f9      	beq.n	8008238 <__gethex+0x58>
 8008244:	f7ff ffb6 	bl	80081b4 <__hexdig_fun>
 8008248:	2301      	movs	r3, #1
 800824a:	fab0 f480 	clz	r4, r0
 800824e:	0964      	lsrs	r4, r4, #5
 8008250:	465e      	mov	r6, fp
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	4642      	mov	r2, r8
 8008256:	4615      	mov	r5, r2
 8008258:	3201      	adds	r2, #1
 800825a:	7828      	ldrb	r0, [r5, #0]
 800825c:	f7ff ffaa 	bl	80081b4 <__hexdig_fun>
 8008260:	2800      	cmp	r0, #0
 8008262:	d1f8      	bne.n	8008256 <__gethex+0x76>
 8008264:	4994      	ldr	r1, [pc, #592]	; (80084b8 <__gethex+0x2d8>)
 8008266:	2201      	movs	r2, #1
 8008268:	4628      	mov	r0, r5
 800826a:	f7ff fec1 	bl	8007ff0 <strncmp>
 800826e:	b978      	cbnz	r0, 8008290 <__gethex+0xb0>
 8008270:	b946      	cbnz	r6, 8008284 <__gethex+0xa4>
 8008272:	1c6e      	adds	r6, r5, #1
 8008274:	4632      	mov	r2, r6
 8008276:	4615      	mov	r5, r2
 8008278:	3201      	adds	r2, #1
 800827a:	7828      	ldrb	r0, [r5, #0]
 800827c:	f7ff ff9a 	bl	80081b4 <__hexdig_fun>
 8008280:	2800      	cmp	r0, #0
 8008282:	d1f8      	bne.n	8008276 <__gethex+0x96>
 8008284:	1b73      	subs	r3, r6, r5
 8008286:	009e      	lsls	r6, r3, #2
 8008288:	e004      	b.n	8008294 <__gethex+0xb4>
 800828a:	2400      	movs	r4, #0
 800828c:	4626      	mov	r6, r4
 800828e:	e7e1      	b.n	8008254 <__gethex+0x74>
 8008290:	2e00      	cmp	r6, #0
 8008292:	d1f7      	bne.n	8008284 <__gethex+0xa4>
 8008294:	782b      	ldrb	r3, [r5, #0]
 8008296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800829a:	2b50      	cmp	r3, #80	; 0x50
 800829c:	d13d      	bne.n	800831a <__gethex+0x13a>
 800829e:	786b      	ldrb	r3, [r5, #1]
 80082a0:	2b2b      	cmp	r3, #43	; 0x2b
 80082a2:	d02f      	beq.n	8008304 <__gethex+0x124>
 80082a4:	2b2d      	cmp	r3, #45	; 0x2d
 80082a6:	d031      	beq.n	800830c <__gethex+0x12c>
 80082a8:	1c69      	adds	r1, r5, #1
 80082aa:	f04f 0b00 	mov.w	fp, #0
 80082ae:	7808      	ldrb	r0, [r1, #0]
 80082b0:	f7ff ff80 	bl	80081b4 <__hexdig_fun>
 80082b4:	1e42      	subs	r2, r0, #1
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	2a18      	cmp	r2, #24
 80082ba:	d82e      	bhi.n	800831a <__gethex+0x13a>
 80082bc:	f1a0 0210 	sub.w	r2, r0, #16
 80082c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082c4:	f7ff ff76 	bl	80081b4 <__hexdig_fun>
 80082c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80082cc:	fa5f fc8c 	uxtb.w	ip, ip
 80082d0:	f1bc 0f18 	cmp.w	ip, #24
 80082d4:	d91d      	bls.n	8008312 <__gethex+0x132>
 80082d6:	f1bb 0f00 	cmp.w	fp, #0
 80082da:	d000      	beq.n	80082de <__gethex+0xfe>
 80082dc:	4252      	negs	r2, r2
 80082de:	4416      	add	r6, r2
 80082e0:	f8ca 1000 	str.w	r1, [sl]
 80082e4:	b1dc      	cbz	r4, 800831e <__gethex+0x13e>
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bf14      	ite	ne
 80082ec:	f04f 0800 	movne.w	r8, #0
 80082f0:	f04f 0806 	moveq.w	r8, #6
 80082f4:	4640      	mov	r0, r8
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4645      	mov	r5, r8
 80082fe:	4626      	mov	r6, r4
 8008300:	2401      	movs	r4, #1
 8008302:	e7c7      	b.n	8008294 <__gethex+0xb4>
 8008304:	f04f 0b00 	mov.w	fp, #0
 8008308:	1ca9      	adds	r1, r5, #2
 800830a:	e7d0      	b.n	80082ae <__gethex+0xce>
 800830c:	f04f 0b01 	mov.w	fp, #1
 8008310:	e7fa      	b.n	8008308 <__gethex+0x128>
 8008312:	230a      	movs	r3, #10
 8008314:	fb03 0002 	mla	r0, r3, r2, r0
 8008318:	e7d0      	b.n	80082bc <__gethex+0xdc>
 800831a:	4629      	mov	r1, r5
 800831c:	e7e0      	b.n	80082e0 <__gethex+0x100>
 800831e:	eba5 0308 	sub.w	r3, r5, r8
 8008322:	3b01      	subs	r3, #1
 8008324:	4621      	mov	r1, r4
 8008326:	2b07      	cmp	r3, #7
 8008328:	dc0a      	bgt.n	8008340 <__gethex+0x160>
 800832a:	4648      	mov	r0, r9
 800832c:	f7fd ff56 	bl	80061dc <_Balloc>
 8008330:	4604      	mov	r4, r0
 8008332:	b940      	cbnz	r0, 8008346 <__gethex+0x166>
 8008334:	4b61      	ldr	r3, [pc, #388]	; (80084bc <__gethex+0x2dc>)
 8008336:	4602      	mov	r2, r0
 8008338:	21e4      	movs	r1, #228	; 0xe4
 800833a:	4861      	ldr	r0, [pc, #388]	; (80084c0 <__gethex+0x2e0>)
 800833c:	f7ff feb4 	bl	80080a8 <__assert_func>
 8008340:	3101      	adds	r1, #1
 8008342:	105b      	asrs	r3, r3, #1
 8008344:	e7ef      	b.n	8008326 <__gethex+0x146>
 8008346:	f100 0a14 	add.w	sl, r0, #20
 800834a:	2300      	movs	r3, #0
 800834c:	495a      	ldr	r1, [pc, #360]	; (80084b8 <__gethex+0x2d8>)
 800834e:	f8cd a004 	str.w	sl, [sp, #4]
 8008352:	469b      	mov	fp, r3
 8008354:	45a8      	cmp	r8, r5
 8008356:	d342      	bcc.n	80083de <__gethex+0x1fe>
 8008358:	9801      	ldr	r0, [sp, #4]
 800835a:	f840 bb04 	str.w	fp, [r0], #4
 800835e:	eba0 000a 	sub.w	r0, r0, sl
 8008362:	1080      	asrs	r0, r0, #2
 8008364:	6120      	str	r0, [r4, #16]
 8008366:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800836a:	4658      	mov	r0, fp
 800836c:	f7fe f828 	bl	80063c0 <__hi0bits>
 8008370:	683d      	ldr	r5, [r7, #0]
 8008372:	eba8 0000 	sub.w	r0, r8, r0
 8008376:	42a8      	cmp	r0, r5
 8008378:	dd59      	ble.n	800842e <__gethex+0x24e>
 800837a:	eba0 0805 	sub.w	r8, r0, r5
 800837e:	4641      	mov	r1, r8
 8008380:	4620      	mov	r0, r4
 8008382:	f7fe fbb7 	bl	8006af4 <__any_on>
 8008386:	4683      	mov	fp, r0
 8008388:	b1b8      	cbz	r0, 80083ba <__gethex+0x1da>
 800838a:	f108 33ff 	add.w	r3, r8, #4294967295
 800838e:	1159      	asrs	r1, r3, #5
 8008390:	f003 021f 	and.w	r2, r3, #31
 8008394:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008398:	f04f 0b01 	mov.w	fp, #1
 800839c:	fa0b f202 	lsl.w	r2, fp, r2
 80083a0:	420a      	tst	r2, r1
 80083a2:	d00a      	beq.n	80083ba <__gethex+0x1da>
 80083a4:	455b      	cmp	r3, fp
 80083a6:	dd06      	ble.n	80083b6 <__gethex+0x1d6>
 80083a8:	f1a8 0102 	sub.w	r1, r8, #2
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7fe fba1 	bl	8006af4 <__any_on>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d138      	bne.n	8008428 <__gethex+0x248>
 80083b6:	f04f 0b02 	mov.w	fp, #2
 80083ba:	4641      	mov	r1, r8
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff fea7 	bl	8008110 <rshift>
 80083c2:	4446      	add	r6, r8
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	42b3      	cmp	r3, r6
 80083c8:	da41      	bge.n	800844e <__gethex+0x26e>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4648      	mov	r0, r9
 80083ce:	f7fd ff45 	bl	800625c <_Bfree>
 80083d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d4:	2300      	movs	r3, #0
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80083dc:	e78a      	b.n	80082f4 <__gethex+0x114>
 80083de:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80083e2:	2a2e      	cmp	r2, #46	; 0x2e
 80083e4:	d014      	beq.n	8008410 <__gethex+0x230>
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d106      	bne.n	80083f8 <__gethex+0x218>
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	f843 bb04 	str.w	fp, [r3], #4
 80083f0:	f04f 0b00 	mov.w	fp, #0
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	465b      	mov	r3, fp
 80083f8:	7828      	ldrb	r0, [r5, #0]
 80083fa:	9303      	str	r3, [sp, #12]
 80083fc:	f7ff feda 	bl	80081b4 <__hexdig_fun>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	f000 000f 	and.w	r0, r0, #15
 8008406:	4098      	lsls	r0, r3
 8008408:	ea4b 0b00 	orr.w	fp, fp, r0
 800840c:	3304      	adds	r3, #4
 800840e:	e7a1      	b.n	8008354 <__gethex+0x174>
 8008410:	45a8      	cmp	r8, r5
 8008412:	d8e8      	bhi.n	80083e6 <__gethex+0x206>
 8008414:	2201      	movs	r2, #1
 8008416:	4628      	mov	r0, r5
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	f7ff fde9 	bl	8007ff0 <strncmp>
 800841e:	4926      	ldr	r1, [pc, #152]	; (80084b8 <__gethex+0x2d8>)
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	2800      	cmp	r0, #0
 8008424:	d1df      	bne.n	80083e6 <__gethex+0x206>
 8008426:	e795      	b.n	8008354 <__gethex+0x174>
 8008428:	f04f 0b03 	mov.w	fp, #3
 800842c:	e7c5      	b.n	80083ba <__gethex+0x1da>
 800842e:	da0b      	bge.n	8008448 <__gethex+0x268>
 8008430:	eba5 0800 	sub.w	r8, r5, r0
 8008434:	4621      	mov	r1, r4
 8008436:	4642      	mov	r2, r8
 8008438:	4648      	mov	r0, r9
 800843a:	f7fe f929 	bl	8006690 <__lshift>
 800843e:	eba6 0608 	sub.w	r6, r6, r8
 8008442:	4604      	mov	r4, r0
 8008444:	f100 0a14 	add.w	sl, r0, #20
 8008448:	f04f 0b00 	mov.w	fp, #0
 800844c:	e7ba      	b.n	80083c4 <__gethex+0x1e4>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	42b3      	cmp	r3, r6
 8008452:	dd73      	ble.n	800853c <__gethex+0x35c>
 8008454:	1b9e      	subs	r6, r3, r6
 8008456:	42b5      	cmp	r5, r6
 8008458:	dc34      	bgt.n	80084c4 <__gethex+0x2e4>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d023      	beq.n	80084a8 <__gethex+0x2c8>
 8008460:	2b03      	cmp	r3, #3
 8008462:	d025      	beq.n	80084b0 <__gethex+0x2d0>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d115      	bne.n	8008494 <__gethex+0x2b4>
 8008468:	42b5      	cmp	r5, r6
 800846a:	d113      	bne.n	8008494 <__gethex+0x2b4>
 800846c:	2d01      	cmp	r5, #1
 800846e:	d10b      	bne.n	8008488 <__gethex+0x2a8>
 8008470:	9a02      	ldr	r2, [sp, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	2301      	movs	r3, #1
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	f8ca 3000 	str.w	r3, [sl]
 800847e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008480:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008484:	601c      	str	r4, [r3, #0]
 8008486:	e735      	b.n	80082f4 <__gethex+0x114>
 8008488:	1e69      	subs	r1, r5, #1
 800848a:	4620      	mov	r0, r4
 800848c:	f7fe fb32 	bl	8006af4 <__any_on>
 8008490:	2800      	cmp	r0, #0
 8008492:	d1ed      	bne.n	8008470 <__gethex+0x290>
 8008494:	4621      	mov	r1, r4
 8008496:	4648      	mov	r0, r9
 8008498:	f7fd fee0 	bl	800625c <_Bfree>
 800849c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849e:	2300      	movs	r3, #0
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80084a6:	e725      	b.n	80082f4 <__gethex+0x114>
 80084a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f2      	bne.n	8008494 <__gethex+0x2b4>
 80084ae:	e7df      	b.n	8008470 <__gethex+0x290>
 80084b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1dc      	bne.n	8008470 <__gethex+0x290>
 80084b6:	e7ed      	b.n	8008494 <__gethex+0x2b4>
 80084b8:	08008b9c 	.word	0x08008b9c
 80084bc:	08008a35 	.word	0x08008a35
 80084c0:	08008d46 	.word	0x08008d46
 80084c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80084c8:	f1bb 0f00 	cmp.w	fp, #0
 80084cc:	d133      	bne.n	8008536 <__gethex+0x356>
 80084ce:	f1b8 0f00 	cmp.w	r8, #0
 80084d2:	d004      	beq.n	80084de <__gethex+0x2fe>
 80084d4:	4641      	mov	r1, r8
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7fe fb0c 	bl	8006af4 <__any_on>
 80084dc:	4683      	mov	fp, r0
 80084de:	ea4f 1268 	mov.w	r2, r8, asr #5
 80084e2:	2301      	movs	r3, #1
 80084e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084e8:	f008 081f 	and.w	r8, r8, #31
 80084ec:	fa03 f308 	lsl.w	r3, r3, r8
 80084f0:	4213      	tst	r3, r2
 80084f2:	4631      	mov	r1, r6
 80084f4:	4620      	mov	r0, r4
 80084f6:	bf18      	it	ne
 80084f8:	f04b 0b02 	orrne.w	fp, fp, #2
 80084fc:	1bad      	subs	r5, r5, r6
 80084fe:	f7ff fe07 	bl	8008110 <rshift>
 8008502:	687e      	ldr	r6, [r7, #4]
 8008504:	f04f 0802 	mov.w	r8, #2
 8008508:	f1bb 0f00 	cmp.w	fp, #0
 800850c:	d04a      	beq.n	80085a4 <__gethex+0x3c4>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d016      	beq.n	8008542 <__gethex+0x362>
 8008514:	2b03      	cmp	r3, #3
 8008516:	d018      	beq.n	800854a <__gethex+0x36a>
 8008518:	2b01      	cmp	r3, #1
 800851a:	d109      	bne.n	8008530 <__gethex+0x350>
 800851c:	f01b 0f02 	tst.w	fp, #2
 8008520:	d006      	beq.n	8008530 <__gethex+0x350>
 8008522:	f8da 3000 	ldr.w	r3, [sl]
 8008526:	ea4b 0b03 	orr.w	fp, fp, r3
 800852a:	f01b 0f01 	tst.w	fp, #1
 800852e:	d10f      	bne.n	8008550 <__gethex+0x370>
 8008530:	f048 0810 	orr.w	r8, r8, #16
 8008534:	e036      	b.n	80085a4 <__gethex+0x3c4>
 8008536:	f04f 0b01 	mov.w	fp, #1
 800853a:	e7d0      	b.n	80084de <__gethex+0x2fe>
 800853c:	f04f 0801 	mov.w	r8, #1
 8008540:	e7e2      	b.n	8008508 <__gethex+0x328>
 8008542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008544:	f1c3 0301 	rsb	r3, r3, #1
 8008548:	930f      	str	r3, [sp, #60]	; 0x3c
 800854a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0ef      	beq.n	8008530 <__gethex+0x350>
 8008550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008554:	f104 0214 	add.w	r2, r4, #20
 8008558:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008562:	2300      	movs	r3, #0
 8008564:	4694      	mov	ip, r2
 8008566:	f852 1b04 	ldr.w	r1, [r2], #4
 800856a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800856e:	d01e      	beq.n	80085ae <__gethex+0x3ce>
 8008570:	3101      	adds	r1, #1
 8008572:	f8cc 1000 	str.w	r1, [ip]
 8008576:	f1b8 0f02 	cmp.w	r8, #2
 800857a:	f104 0214 	add.w	r2, r4, #20
 800857e:	d13d      	bne.n	80085fc <__gethex+0x41c>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	3b01      	subs	r3, #1
 8008584:	42ab      	cmp	r3, r5
 8008586:	d10b      	bne.n	80085a0 <__gethex+0x3c0>
 8008588:	1169      	asrs	r1, r5, #5
 800858a:	2301      	movs	r3, #1
 800858c:	f005 051f 	and.w	r5, r5, #31
 8008590:	fa03 f505 	lsl.w	r5, r3, r5
 8008594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008598:	421d      	tst	r5, r3
 800859a:	bf18      	it	ne
 800859c:	f04f 0801 	movne.w	r8, #1
 80085a0:	f048 0820 	orr.w	r8, r8, #32
 80085a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a6:	601c      	str	r4, [r3, #0]
 80085a8:	9b02      	ldr	r3, [sp, #8]
 80085aa:	601e      	str	r6, [r3, #0]
 80085ac:	e6a2      	b.n	80082f4 <__gethex+0x114>
 80085ae:	4290      	cmp	r0, r2
 80085b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80085b4:	d8d6      	bhi.n	8008564 <__gethex+0x384>
 80085b6:	68a2      	ldr	r2, [r4, #8]
 80085b8:	4593      	cmp	fp, r2
 80085ba:	db17      	blt.n	80085ec <__gethex+0x40c>
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4648      	mov	r0, r9
 80085c0:	3101      	adds	r1, #1
 80085c2:	f7fd fe0b 	bl	80061dc <_Balloc>
 80085c6:	4682      	mov	sl, r0
 80085c8:	b918      	cbnz	r0, 80085d2 <__gethex+0x3f2>
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <__gethex+0x458>)
 80085cc:	4602      	mov	r2, r0
 80085ce:	2184      	movs	r1, #132	; 0x84
 80085d0:	e6b3      	b.n	800833a <__gethex+0x15a>
 80085d2:	6922      	ldr	r2, [r4, #16]
 80085d4:	3202      	adds	r2, #2
 80085d6:	f104 010c 	add.w	r1, r4, #12
 80085da:	0092      	lsls	r2, r2, #2
 80085dc:	300c      	adds	r0, #12
 80085de:	f7ff fd4b 	bl	8008078 <memcpy>
 80085e2:	4621      	mov	r1, r4
 80085e4:	4648      	mov	r0, r9
 80085e6:	f7fd fe39 	bl	800625c <_Bfree>
 80085ea:	4654      	mov	r4, sl
 80085ec:	6922      	ldr	r2, [r4, #16]
 80085ee:	1c51      	adds	r1, r2, #1
 80085f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80085f4:	6121      	str	r1, [r4, #16]
 80085f6:	2101      	movs	r1, #1
 80085f8:	6151      	str	r1, [r2, #20]
 80085fa:	e7bc      	b.n	8008576 <__gethex+0x396>
 80085fc:	6921      	ldr	r1, [r4, #16]
 80085fe:	4559      	cmp	r1, fp
 8008600:	dd0b      	ble.n	800861a <__gethex+0x43a>
 8008602:	2101      	movs	r1, #1
 8008604:	4620      	mov	r0, r4
 8008606:	f7ff fd83 	bl	8008110 <rshift>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3601      	adds	r6, #1
 800860e:	42b3      	cmp	r3, r6
 8008610:	f6ff aedb 	blt.w	80083ca <__gethex+0x1ea>
 8008614:	f04f 0801 	mov.w	r8, #1
 8008618:	e7c2      	b.n	80085a0 <__gethex+0x3c0>
 800861a:	f015 051f 	ands.w	r5, r5, #31
 800861e:	d0f9      	beq.n	8008614 <__gethex+0x434>
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	441a      	add	r2, r3
 8008624:	f1c5 0520 	rsb	r5, r5, #32
 8008628:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800862c:	f7fd fec8 	bl	80063c0 <__hi0bits>
 8008630:	42a8      	cmp	r0, r5
 8008632:	dbe6      	blt.n	8008602 <__gethex+0x422>
 8008634:	e7ee      	b.n	8008614 <__gethex+0x434>
 8008636:	bf00      	nop
 8008638:	08008a35 	.word	0x08008a35

0800863c <L_shift>:
 800863c:	f1c2 0208 	rsb	r2, r2, #8
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	b570      	push	{r4, r5, r6, lr}
 8008644:	f1c2 0620 	rsb	r6, r2, #32
 8008648:	6843      	ldr	r3, [r0, #4]
 800864a:	6804      	ldr	r4, [r0, #0]
 800864c:	fa03 f506 	lsl.w	r5, r3, r6
 8008650:	432c      	orrs	r4, r5
 8008652:	40d3      	lsrs	r3, r2
 8008654:	6004      	str	r4, [r0, #0]
 8008656:	f840 3f04 	str.w	r3, [r0, #4]!
 800865a:	4288      	cmp	r0, r1
 800865c:	d3f4      	bcc.n	8008648 <L_shift+0xc>
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <__match>:
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	6803      	ldr	r3, [r0, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866a:	b914      	cbnz	r4, 8008672 <__match+0x12>
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	2001      	movs	r0, #1
 8008670:	bd30      	pop	{r4, r5, pc}
 8008672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008676:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800867a:	2d19      	cmp	r5, #25
 800867c:	bf98      	it	ls
 800867e:	3220      	addls	r2, #32
 8008680:	42a2      	cmp	r2, r4
 8008682:	d0f0      	beq.n	8008666 <__match+0x6>
 8008684:	2000      	movs	r0, #0
 8008686:	e7f3      	b.n	8008670 <__match+0x10>

08008688 <__hexnan>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	680b      	ldr	r3, [r1, #0]
 800868e:	6801      	ldr	r1, [r0, #0]
 8008690:	115e      	asrs	r6, r3, #5
 8008692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008696:	f013 031f 	ands.w	r3, r3, #31
 800869a:	b087      	sub	sp, #28
 800869c:	bf18      	it	ne
 800869e:	3604      	addne	r6, #4
 80086a0:	2500      	movs	r5, #0
 80086a2:	1f37      	subs	r7, r6, #4
 80086a4:	4682      	mov	sl, r0
 80086a6:	4690      	mov	r8, r2
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80086ae:	46b9      	mov	r9, r7
 80086b0:	463c      	mov	r4, r7
 80086b2:	9502      	str	r5, [sp, #8]
 80086b4:	46ab      	mov	fp, r5
 80086b6:	784a      	ldrb	r2, [r1, #1]
 80086b8:	1c4b      	adds	r3, r1, #1
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	b342      	cbz	r2, 8008710 <__hexnan+0x88>
 80086be:	4610      	mov	r0, r2
 80086c0:	9105      	str	r1, [sp, #20]
 80086c2:	9204      	str	r2, [sp, #16]
 80086c4:	f7ff fd76 	bl	80081b4 <__hexdig_fun>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d14f      	bne.n	800876c <__hexnan+0xe4>
 80086cc:	9a04      	ldr	r2, [sp, #16]
 80086ce:	9905      	ldr	r1, [sp, #20]
 80086d0:	2a20      	cmp	r2, #32
 80086d2:	d818      	bhi.n	8008706 <__hexnan+0x7e>
 80086d4:	9b02      	ldr	r3, [sp, #8]
 80086d6:	459b      	cmp	fp, r3
 80086d8:	dd13      	ble.n	8008702 <__hexnan+0x7a>
 80086da:	454c      	cmp	r4, r9
 80086dc:	d206      	bcs.n	80086ec <__hexnan+0x64>
 80086de:	2d07      	cmp	r5, #7
 80086e0:	dc04      	bgt.n	80086ec <__hexnan+0x64>
 80086e2:	462a      	mov	r2, r5
 80086e4:	4649      	mov	r1, r9
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7ff ffa8 	bl	800863c <L_shift>
 80086ec:	4544      	cmp	r4, r8
 80086ee:	d950      	bls.n	8008792 <__hexnan+0x10a>
 80086f0:	2300      	movs	r3, #0
 80086f2:	f1a4 0904 	sub.w	r9, r4, #4
 80086f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80086fa:	f8cd b008 	str.w	fp, [sp, #8]
 80086fe:	464c      	mov	r4, r9
 8008700:	461d      	mov	r5, r3
 8008702:	9903      	ldr	r1, [sp, #12]
 8008704:	e7d7      	b.n	80086b6 <__hexnan+0x2e>
 8008706:	2a29      	cmp	r2, #41	; 0x29
 8008708:	d155      	bne.n	80087b6 <__hexnan+0x12e>
 800870a:	3102      	adds	r1, #2
 800870c:	f8ca 1000 	str.w	r1, [sl]
 8008710:	f1bb 0f00 	cmp.w	fp, #0
 8008714:	d04f      	beq.n	80087b6 <__hexnan+0x12e>
 8008716:	454c      	cmp	r4, r9
 8008718:	d206      	bcs.n	8008728 <__hexnan+0xa0>
 800871a:	2d07      	cmp	r5, #7
 800871c:	dc04      	bgt.n	8008728 <__hexnan+0xa0>
 800871e:	462a      	mov	r2, r5
 8008720:	4649      	mov	r1, r9
 8008722:	4620      	mov	r0, r4
 8008724:	f7ff ff8a 	bl	800863c <L_shift>
 8008728:	4544      	cmp	r4, r8
 800872a:	d934      	bls.n	8008796 <__hexnan+0x10e>
 800872c:	f1a8 0204 	sub.w	r2, r8, #4
 8008730:	4623      	mov	r3, r4
 8008732:	f853 1b04 	ldr.w	r1, [r3], #4
 8008736:	f842 1f04 	str.w	r1, [r2, #4]!
 800873a:	429f      	cmp	r7, r3
 800873c:	d2f9      	bcs.n	8008732 <__hexnan+0xaa>
 800873e:	1b3b      	subs	r3, r7, r4
 8008740:	f023 0303 	bic.w	r3, r3, #3
 8008744:	3304      	adds	r3, #4
 8008746:	3e03      	subs	r6, #3
 8008748:	3401      	adds	r4, #1
 800874a:	42a6      	cmp	r6, r4
 800874c:	bf38      	it	cc
 800874e:	2304      	movcc	r3, #4
 8008750:	4443      	add	r3, r8
 8008752:	2200      	movs	r2, #0
 8008754:	f843 2b04 	str.w	r2, [r3], #4
 8008758:	429f      	cmp	r7, r3
 800875a:	d2fb      	bcs.n	8008754 <__hexnan+0xcc>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	b91b      	cbnz	r3, 8008768 <__hexnan+0xe0>
 8008760:	4547      	cmp	r7, r8
 8008762:	d126      	bne.n	80087b2 <__hexnan+0x12a>
 8008764:	2301      	movs	r3, #1
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	2005      	movs	r0, #5
 800876a:	e025      	b.n	80087b8 <__hexnan+0x130>
 800876c:	3501      	adds	r5, #1
 800876e:	2d08      	cmp	r5, #8
 8008770:	f10b 0b01 	add.w	fp, fp, #1
 8008774:	dd06      	ble.n	8008784 <__hexnan+0xfc>
 8008776:	4544      	cmp	r4, r8
 8008778:	d9c3      	bls.n	8008702 <__hexnan+0x7a>
 800877a:	2300      	movs	r3, #0
 800877c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008780:	2501      	movs	r5, #1
 8008782:	3c04      	subs	r4, #4
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	f000 000f 	and.w	r0, r0, #15
 800878a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800878e:	6020      	str	r0, [r4, #0]
 8008790:	e7b7      	b.n	8008702 <__hexnan+0x7a>
 8008792:	2508      	movs	r5, #8
 8008794:	e7b5      	b.n	8008702 <__hexnan+0x7a>
 8008796:	9b01      	ldr	r3, [sp, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0df      	beq.n	800875c <__hexnan+0xd4>
 800879c:	f1c3 0320 	rsb	r3, r3, #32
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	40da      	lsrs	r2, r3
 80087a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087aa:	4013      	ands	r3, r2
 80087ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80087b0:	e7d4      	b.n	800875c <__hexnan+0xd4>
 80087b2:	3f04      	subs	r7, #4
 80087b4:	e7d2      	b.n	800875c <__hexnan+0xd4>
 80087b6:	2004      	movs	r0, #4
 80087b8:	b007      	add	sp, #28
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087be <__ascii_mbtowc>:
 80087be:	b082      	sub	sp, #8
 80087c0:	b901      	cbnz	r1, 80087c4 <__ascii_mbtowc+0x6>
 80087c2:	a901      	add	r1, sp, #4
 80087c4:	b142      	cbz	r2, 80087d8 <__ascii_mbtowc+0x1a>
 80087c6:	b14b      	cbz	r3, 80087dc <__ascii_mbtowc+0x1e>
 80087c8:	7813      	ldrb	r3, [r2, #0]
 80087ca:	600b      	str	r3, [r1, #0]
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	1e10      	subs	r0, r2, #0
 80087d0:	bf18      	it	ne
 80087d2:	2001      	movne	r0, #1
 80087d4:	b002      	add	sp, #8
 80087d6:	4770      	bx	lr
 80087d8:	4610      	mov	r0, r2
 80087da:	e7fb      	b.n	80087d4 <__ascii_mbtowc+0x16>
 80087dc:	f06f 0001 	mvn.w	r0, #1
 80087e0:	e7f8      	b.n	80087d4 <__ascii_mbtowc+0x16>

080087e2 <_realloc_r>:
 80087e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e6:	4680      	mov	r8, r0
 80087e8:	4614      	mov	r4, r2
 80087ea:	460e      	mov	r6, r1
 80087ec:	b921      	cbnz	r1, 80087f8 <_realloc_r+0x16>
 80087ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	4611      	mov	r1, r2
 80087f4:	f7fd bc66 	b.w	80060c4 <_malloc_r>
 80087f8:	b92a      	cbnz	r2, 8008806 <_realloc_r+0x24>
 80087fa:	f7fd fbef 	bl	8005fdc <_free_r>
 80087fe:	4625      	mov	r5, r4
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008806:	f000 f842 	bl	800888e <_malloc_usable_size_r>
 800880a:	4284      	cmp	r4, r0
 800880c:	4607      	mov	r7, r0
 800880e:	d802      	bhi.n	8008816 <_realloc_r+0x34>
 8008810:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008814:	d812      	bhi.n	800883c <_realloc_r+0x5a>
 8008816:	4621      	mov	r1, r4
 8008818:	4640      	mov	r0, r8
 800881a:	f7fd fc53 	bl	80060c4 <_malloc_r>
 800881e:	4605      	mov	r5, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	d0ed      	beq.n	8008800 <_realloc_r+0x1e>
 8008824:	42bc      	cmp	r4, r7
 8008826:	4622      	mov	r2, r4
 8008828:	4631      	mov	r1, r6
 800882a:	bf28      	it	cs
 800882c:	463a      	movcs	r2, r7
 800882e:	f7ff fc23 	bl	8008078 <memcpy>
 8008832:	4631      	mov	r1, r6
 8008834:	4640      	mov	r0, r8
 8008836:	f7fd fbd1 	bl	8005fdc <_free_r>
 800883a:	e7e1      	b.n	8008800 <_realloc_r+0x1e>
 800883c:	4635      	mov	r5, r6
 800883e:	e7df      	b.n	8008800 <_realloc_r+0x1e>

08008840 <__ascii_wctomb>:
 8008840:	b149      	cbz	r1, 8008856 <__ascii_wctomb+0x16>
 8008842:	2aff      	cmp	r2, #255	; 0xff
 8008844:	bf85      	ittet	hi
 8008846:	238a      	movhi	r3, #138	; 0x8a
 8008848:	6003      	strhi	r3, [r0, #0]
 800884a:	700a      	strbls	r2, [r1, #0]
 800884c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008850:	bf98      	it	ls
 8008852:	2001      	movls	r0, #1
 8008854:	4770      	bx	lr
 8008856:	4608      	mov	r0, r1
 8008858:	4770      	bx	lr
	...

0800885c <fiprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b503      	push	{r0, r1, lr}
 8008860:	4601      	mov	r1, r0
 8008862:	ab03      	add	r3, sp, #12
 8008864:	4805      	ldr	r0, [pc, #20]	; (800887c <fiprintf+0x20>)
 8008866:	f853 2b04 	ldr.w	r2, [r3], #4
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f7ff f97b 	bl	8007b68 <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	20000064 	.word	0x20000064

08008880 <abort>:
 8008880:	b508      	push	{r3, lr}
 8008882:	2006      	movs	r0, #6
 8008884:	f000 f834 	bl	80088f0 <raise>
 8008888:	2001      	movs	r0, #1
 800888a:	f7f9 f829 	bl	80018e0 <_exit>

0800888e <_malloc_usable_size_r>:
 800888e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008892:	1f18      	subs	r0, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbc      	itt	lt
 8008898:	580b      	ldrlt	r3, [r1, r0]
 800889a:	18c0      	addlt	r0, r0, r3
 800889c:	4770      	bx	lr

0800889e <_raise_r>:
 800889e:	291f      	cmp	r1, #31
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	d904      	bls.n	80088b2 <_raise_r+0x14>
 80088a8:	2316      	movs	r3, #22
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	bd38      	pop	{r3, r4, r5, pc}
 80088b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80088b4:	b112      	cbz	r2, 80088bc <_raise_r+0x1e>
 80088b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088ba:	b94b      	cbnz	r3, 80088d0 <_raise_r+0x32>
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 f831 	bl	8008924 <_getpid_r>
 80088c2:	462a      	mov	r2, r5
 80088c4:	4601      	mov	r1, r0
 80088c6:	4620      	mov	r0, r4
 80088c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088cc:	f000 b818 	b.w	8008900 <_kill_r>
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d00a      	beq.n	80088ea <_raise_r+0x4c>
 80088d4:	1c59      	adds	r1, r3, #1
 80088d6:	d103      	bne.n	80088e0 <_raise_r+0x42>
 80088d8:	2316      	movs	r3, #22
 80088da:	6003      	str	r3, [r0, #0]
 80088dc:	2001      	movs	r0, #1
 80088de:	e7e7      	b.n	80088b0 <_raise_r+0x12>
 80088e0:	2400      	movs	r4, #0
 80088e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e6:	4628      	mov	r0, r5
 80088e8:	4798      	blx	r3
 80088ea:	2000      	movs	r0, #0
 80088ec:	e7e0      	b.n	80088b0 <_raise_r+0x12>
	...

080088f0 <raise>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <raise+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f7ff bfd2 	b.w	800889e <_raise_r>
 80088fa:	bf00      	nop
 80088fc:	20000064 	.word	0x20000064

08008900 <_kill_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	; (8008920 <_kill_r+0x20>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f7f8 ffd7 	bl	80018c0 <_kill>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d102      	bne.n	800891c <_kill_r+0x1c>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b103      	cbz	r3, 800891c <_kill_r+0x1c>
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	200004f4 	.word	0x200004f4

08008924 <_getpid_r>:
 8008924:	f7f8 bfc4 	b.w	80018b0 <_getpid>

08008928 <_init>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr

08008934 <_fini>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr
